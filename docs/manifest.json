{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.11", "generated_at": "2024-09-10T22:20:39.854437Z", "invocation_id": "a269079a-0bf4-40e9-9c07-644142c99849", "env": {}, "project_id": "647af26f9fae153d2b2758dfcf0bba8f", "user_id": "68620fe0-402a-4941-81d4-1254a9a0a690", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.admin_models.github_actions__current_task_status": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__current_task_status", "resource_type": "model", "package_name": "admin_models", "path": "github_actions/github_actions__current_task_status.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.sql", "unique_id": "model.admin_models.github_actions__current_task_status", "fqn": ["admin_models", "github_actions", "github_actions__current_task_status"], "alias": "current_task_status", "checksum": {"name": "sha256", "checksum": "08e1867f676c1424245dfdd83a8012885ddcc42691c069ce4f58335feee2fd32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gha_tasks"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["gha_tasks"], "description": "", "columns": {"PIPELINE_ACTIVE": {"name": "PIPELINE_ACTIVE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUCCESSES": {"name": "SUCCESSES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "admin_models://models/github_actions/github_actions__current_task_status.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["gha_tasks"]}, "created_at": 1726006843.5468583, "relation_name": "ADMIN.github_actions.current_task_status", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['gha_tasks']\n) }}\n\n{{ fsc_utils.gha_task_current_status_view() }}", "language": "sql", "refs": [{"name": "github_actions__task_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_current_status_view"], "nodes": ["model.admin_models.github_actions__task_performance"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__current_task_status.sql", "compiled": true, "compiled_code": "\n\n\n    WITH base AS (\n        SELECT \n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM ADMIN.github_actions.task_performance\n        QUALIFY row_number() OVER (PARTITION BY task_name ORDER BY scheduled_time DESC) <= 2\n    )\n    SELECT \n        task_name,\n        workflow_name,\n        MAX(scheduled_time) AS recent_scheduled_time,\n        MIN(scheduled_time) AS prior_scheduled_time,\n        SUM(IFF(return_value = 204, 1, 0)) AS successes,\n        successes > 0 AS pipeline_active\n    FROM base \n    GROUP BY task_name, workflow_name\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.admin_models.github_actions__task_schedule": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__task_schedule", "resource_type": "model", "package_name": "admin_models", "path": "github_actions/github_actions__task_schedule.sql", "original_file_path": "models/github_actions/github_actions__task_schedule.sql", "unique_id": "model.admin_models.github_actions__task_schedule", "fqn": ["admin_models", "github_actions", "github_actions__task_schedule"], "alias": "task_schedule", "checksum": {"name": "sha256", "checksum": "79fc9efc97518abfc95c04fd8a99218dd62462dbbf6bd6182488b8746d64e1e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1726006842.2179031, "relation_name": "ADMIN.github_actions.task_schedule", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_schedule_view() }}", "language": "sql", "refs": [{"name": "github_actions__tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_schedule_view"], "nodes": ["model.admin_models.github_actions__tasks"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__task_schedule.sql", "compiled": true, "compiled_code": "\n\n\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            ADMIN.github_actions.tasks AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\n    SELECT\n        task_name,\n        workflow_name,\n        workflow_schedule,\n        scheduled_time\n    FROM\n        base\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.admin_models.github_actions__tasks": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__tasks", "resource_type": "model", "package_name": "admin_models", "path": "github_actions/github_actions__tasks.sql", "original_file_path": "models/github_actions/github_actions__tasks.sql", "unique_id": "model.admin_models.github_actions__tasks", "fqn": ["admin_models", "github_actions", "github_actions__tasks"], "alias": "tasks", "checksum": {"name": "sha256", "checksum": "5d7cc2c25b75b28b272236732d1ef2503568e316ff347b4b7cb093fa1c9dd08d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1726006842.2263536, "relation_name": "ADMIN.github_actions.tasks", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_tasks_view() }}", "language": "sql", "refs": [], "sources": [["github_actions", "workflows"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_tasks_view"], "nodes": ["source.admin_models.github_actions.workflows"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__tasks.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT\n        workflow_name,\n        concat_ws(\n            '_',\n            'TRIGGER',\n            UPPER(workflow_name)\n        ) AS task_name,\n        workflow_schedule\n    FROM\n        ADMIN.github_actions.workflows\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.admin_models.github_actions__task_performance": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__task_performance", "resource_type": "model", "package_name": "admin_models", "path": "github_actions/github_actions__task_performance.sql", "original_file_path": "models/github_actions/github_actions__task_performance.sql", "unique_id": "model.admin_models.github_actions__task_performance", "fqn": ["admin_models", "github_actions", "github_actions__task_performance"], "alias": "task_performance", "checksum": {"name": "sha256", "checksum": "95006f48053eea3f63f04dd9f5e5cb4d33d967c5e737d819f2eecfb05592522a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1726006842.2348754, "relation_name": "ADMIN.github_actions.task_performance", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_performance_view() }}", "language": "sql", "refs": [{"name": "github_actions__task_schedule", "package": null, "version": null}, {"name": "github_actions__task_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_performance_view"], "nodes": ["model.admin_models.github_actions__task_schedule", "model.admin_models.github_actions__task_history"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__task_performance.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT\n        s.task_name,\n        s.workflow_name,\n        s.scheduled_time,\n        h.return_value\n    FROM\n        ADMIN.github_actions.task_schedule\n        s\n        LEFT JOIN ADMIN.github_actions.task_history\n        h\n        ON s.task_name = h.task_name\n        AND TO_TIMESTAMP_NTZ(DATE_TRUNC('minute', s.scheduled_time)) = TO_TIMESTAMP_NTZ(DATE_TRUNC('minute', h.scheduled_time))\n        AND try_to_number(h.return_value) between 200 and 299\n        AND h.state = 'SUCCEEDED'\n    ORDER BY\n        task_name,\n        scheduled_time\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.admin_models.github_actions__task_history": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__task_history", "resource_type": "model", "package_name": "admin_models", "path": "github_actions/github_actions__task_history.sql", "original_file_path": "models/github_actions/github_actions__task_history.sql", "unique_id": "model.admin_models.github_actions__task_history", "fqn": ["admin_models", "github_actions", "github_actions__task_history"], "alias": "task_history", "checksum": {"name": "sha256", "checksum": "930efeff096136e9b4c944ffed5eaff9637db22700ad70d546b04921d45618cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1726006842.2435198, "relation_name": "ADMIN.github_actions.task_history", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_history_view() }}", "language": "sql", "refs": [{"name": "github_actions__tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_history_view"], "nodes": ["model.admin_models.github_actions__tasks"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__task_history.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n    \n        \n    \n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            (\n            SELECT\n                NAME AS task_name, \n                completed_time, \n                return_value, \n                state, \n                database_name, \n                schema_name, \n                scheduled_time, \n                query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => 'TRIGGER_DBT_RUN_DATASHARES')) \n                UNION ALL\n                \n            \n            SELECT\n                NAME AS task_name, \n                completed_time, \n                return_value, \n                state, \n                database_name, \n                schema_name, \n                scheduled_time, \n                query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => 'TRIGGER_DBT_RUN_DATASHARES_V2')) \n            ) AS subquery\n        WHERE\n            database_name = 'ADMIN' \n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.admin_models.github_actions__workflows": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__workflows", "resource_type": "seed", "package_name": "admin_models", "path": "github_actions__workflows.csv", "original_file_path": "data/github_actions__workflows.csv", "unique_id": "seed.admin_models.github_actions__workflows", "fqn": ["admin_models", "github_actions__workflows"], "alias": "workflows", "checksum": {"name": "sha256", "checksum": "c71c2329bf0636d65dcb2900304277a9eb0d31f737d64996d97bfc9e33ca6110"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1726006842.2875829, "relation_name": "ADMIN.github_actions.workflows", "raw_code": "", "root_path": "/home/runner/work/admin-models/admin-models", "depends_on": {"macros": []}}, "seed.admin_models.datashare__share_suffix": {"database": "ADMIN", "schema": "datashare", "name": "datashare__share_suffix", "resource_type": "seed", "package_name": "admin_models", "path": "datashare__share_suffix.csv", "original_file_path": "data/datashare__share_suffix.csv", "unique_id": "seed.admin_models.datashare__share_suffix", "fqn": ["admin_models", "datashare__share_suffix"], "alias": "share_suffix", "checksum": {"name": "sha256", "checksum": "96a53de879e0d2cbd5edb60f9d571c3de79b2b090e1652730ac9d229ecd963c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1726006842.2907321, "relation_name": "ADMIN.datashare.share_suffix", "raw_code": "", "root_path": "/home/runner/work/admin-models/admin-models", "depends_on": {"macros": []}}, "operation.admin_models.admin_models-on-run-start-0": {"database": "ADMIN", "schema": "admin_models-on-run-start-0", "name": "admin_models-on-run-start-0", "resource_type": "operation", "package_name": "admin_models", "path": "hooks/admin_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.admin_models.admin_models-on-run-start-0", "fqn": ["admin_models", "hooks", "admin_models-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "51b310b784d09dcf6d53f3c498e28f143a645075d52a0e6655c423cb9f59408f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.3130322, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [["studio", "active_databases"], ["studio", "active_schemas"], ["studio", "objects"]], "metrics": [], "depends_on": {"macros": ["macro.admin_models.create_sps"], "nodes": ["source.admin_models.studio.active_databases", "source.admin_models.studio.active_schemas", "source.admin_models.studio.objects"]}, "compiled_path": "target/compiled/admin_models/./dbt_project.yml/hooks/admin_models-on-run-start-0.sql", "compiled": true, "compiled_code": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.admin_models.admin_models-on-run-start-1": {"database": "ADMIN", "schema": "admin_models-on-run-start-1", "name": "admin_models-on-run-start-1", "resource_type": "operation", "package_name": "admin_models", "path": "hooks/admin_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.admin_models.admin_models-on-run-start-1", "fqn": ["admin_models", "hooks", "admin_models-on-run-start-1"], "alias": "", "checksum": {"name": "sha256", "checksum": "51b310b784d09dcf6d53f3c498e28f143a645075d52a0e6655c423cb9f59408f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.3333116, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.admin_models.create_udfs"], "nodes": []}, "compiled_path": "target/compiled/admin_models/./dbt_project.yml/hooks/admin_models-on-run-start-1.sql", "compiled": true, "compiled_code": "\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 1}, "operation.admin_models.admin_models-on-run-end-0": {"database": "ADMIN", "schema": "admin_models-on-run-end-0", "name": "admin_models-on-run-end-0", "resource_type": "operation", "package_name": "admin_models", "path": "hooks/admin_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.admin_models.admin_models-on-run-end-0", "fqn": ["admin_models", "hooks", "admin_models-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "51b310b784d09dcf6d53f3c498e28f143a645075d52a0e6655c423cb9f59408f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.3402483, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.admin_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": "target/compiled/admin_models/./dbt_project.yml/hooks/admin_models-on-run-end-0.sql", "compiled": true, "compiled_code": "\n    \n        \n        \n        \n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "model.fsc_utils._datashare___create_gold": {"database": "ADMIN", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "e05db71a87f76f4cff0b9c4d1b83b975ef424d147379e2442907b1004f709887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "merge_update_columns": [], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.3859015, "relation_name": "ADMIN._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.generate_datashare_ddl"], "nodes": []}, "compiled_path": "target/compiled/fsc_utils/models/datashare/_datashare___create_gold.sql", "compiled": true, "compiled_code": "\n\nSELECT\n$$\nBEGIN\nCREATE DATABASE IF NOT EXISTS __NEW__;\nEND$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.fsc_utils._datashare___create_udfs": {"database": "ADMIN", "schema": "_datashare", "name": "_datashare___create_udfs", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_udfs.sql", "original_file_path": "models/datashare/_datashare___create_udfs.sql", "unique_id": "model.fsc_utils._datashare___create_udfs", "fqn": ["fsc_utils", "datashare", "_datashare___create_udfs"], "alias": "_create_udfs", "checksum": {"name": "sha256", "checksum": "fc39e053d81b2ed8b8106cf5c917ea005b96942a61f37ee4850a838c6c8f7ce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "merge_update_columns": [], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.3941424, "relation_name": "ADMIN._datashare._create_udfs", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\nCONCAT_WS('\\n',{{- fsc_utils.generate_datashare_udf_ddl().strip() -}}) AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.generate_datashare_udf_ddl"], "nodes": []}, "compiled_path": "target/compiled/fsc_utils/models/datashare/_datashare___create_udfs.sql", "compiled": true, "compiled_code": "\n\nSELECT\nCONCAT_WS('\\n','BEGIN','CREATE DATABASE IF NOT EXISTS __NEW__;','USE DATABASE __NEW__;','CREATE SCHEMA IF NOT EXISTS UTILS;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_int(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nSTRICT IMMUTABLE\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'hex_to_int\\'\n\n    AS\n    $$\n    \ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int(\\'200000000000000000000000000000211\\');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(\\'0x200000000000000000000000000000211\\');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_int(\n            encoding STRING,\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nSTRICT IMMUTABLE\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'hex_to_int\\'\n\n    AS\n    $$\n    \ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int(\\'hex\\', \\'200000000000000000000000000000211\\');\n  >> 680564733841876926926749214863536423441\n  hex_to_int(\\'hex\\', \\'0x200000000000000000000000000000211\\');\n  >> 680564733841876926926749214863536423441\n  hex_to_int(\\'hex\\', NULL);\n  >> NULL\n  hex_to_int(\\'s2c\\', \\'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf\\');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == \\'s2c\\':\n    if hex[0:2].lower() != \\'0x\\':\n      hex = f\\'0x{hex}\\'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_string(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nSTRICT IMMUTABLE\n\n    AS\n    $$\n    SELECT\n  LTRIM(regexp_replace(\n    try_hex_decode_string(hex),\n      \\'[\\\\x00-\\\\x1F\\\\x7F-\\\\x9F\\\\xAD]\\', \\'\\', 1))\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_evm_text_signature(\n            abi VARIANT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'get_simplified_signature\\'\n\n    AS\n    $$\n    \n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if \\'components\\' in input_data:\n                component_signature_parts = []\n                components = input_data[\\'components\\']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data[\\'type\\'].endswith(\\'[]\\'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data[\\'type\\'].replace(\\'enum \\', \\'\\').replace(\\' payable\\', \\'\\') + \",\")\n        return signature_parts\n\n    signature_parts = [abi[\\'name\\'] + \"(\"]\n    signature_parts.extend(generate_signature(abi[\\'inputs\\']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_keccak256(\n            event_name VARCHAR(255)\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nPACKAGES = (\\'pycryptodome==3.15.0\\')\nHANDLER = \\'udf_encode\\'\n\n    AS\n    $$\n    \nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode(\\'utf-8\\'))\n    return \\'0x\\' + keccak_hash.hexdigest()\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_decimal_adjust(\n            input string,\n            adjustment int\n    )\n    COPY GRANTS\n    RETURNS VARCHAR\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'custom_divide\\'\n\n    AS\n    $$\n    \n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_cron_to_prior_timestamps(\n            workflow_name STRING,\n            workflow_schedule STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nPACKAGES = (\\'croniter\\')\nHANDLER = \\'TimestampGenerator\\'\n\n    AS\n    $$\n    \nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_transform_logs(\n            decoded VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform\\'\n\n    AS\n    $$\n    \n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_base58_to_hex(\n            input STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform_base58_to_hex\\'\n\n    AS\n    $$\n    \n\ndef transform_base58_to_hex(input):\n    if input is None:\n        return \\'Invalid input\\'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    for char in input:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return \\'Invalid character in input\\'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = \\'0\\' + hex_string\n\n    return \\'0x\\' + hex_string\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_base58(\n            input STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform_hex_to_base58\\'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, \\'big\\')\n\n    encoded = \\'\\'\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = \\'1\\' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_bech32(\n            input STRING,\n            hrp STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform_hex_to_bech32\\'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_bech32(input, hrp=\\'\\'):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return \\'Data conversion failed\\'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + \\'1\\' + \\'\\'.join([CHARSET[d] for d in data5bit + checksum])\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_algorand(\n            input STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform_hex_to_algorand\\'\n\n    AS\n    $$\n    \n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new(\\'sha512_256\\', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode(\\'utf-8\\').rstrip(\\'=\\')\n\n    return algorand_address\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_tezos(\n            input STRING,\n            prefix STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.8\\'\nHANDLER = \\'transform_hex_to_tezos\\'\n\n    AS\n    $$\n    \n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return \\'Invalid length\\'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        \\'tz1\\': \\'06a19f\\',  # Ed25519\n        \\'tz2\\': \\'06a1a1\\',  # Secp256k1\n        \\'tz3\\': \\'06a1a4\\'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return \\'Invalid prefix: Must be tz1, tz2, or tz3\\'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, \\'big\\')\n\n    encoded = \\'\\'\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = \\'1\\' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_detect_overflowed_responses(\n            file_url STRING,\n            index_cols ARRAY\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.11\\'\nCOMMENT = \\'Detect overflowed responses larger than 16MB\\'\nPACKAGES = (\\'snowflake-snowpark-python\\', \\'pandas\\')\nHANDLER = \\'main\\'\n\n    AS\n    $$\n    \n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, \\'rb\\') as f:\n        df = pd.read_json(f, lines=True, compression=\\'gzip\\')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udtf_flatten_overflowed_responses(\n            file_url STRING,\n            index_cols ARRAY,\n            index_vals ARRAY\n    )\n    COPY GRANTS\n    RETURNS table(\n      index_vals ARRAY,\n      block_number NUMBER,\n      metadata OBJECT,\n      seq NUMBER,\n      key STRING,\n      path STRING,\n      index NUMBER,\n      value_ VARIANT\n    )\n\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.11\\'\nCOMMENT = \\'Flatten rows from a JSON file with overflowed responses larger than 16MB\\'\nPACKAGES = (\\'snowflake-snowpark-python\\', \\'pandas\\', \\'simplejson\\', \\'numpy\\')\nHANDLER = \\'FlattenRows\\'\n\n    AS\n    $$\n    \n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, \\'rb\\') as f:\n            df = pd.read_json(f, lines=True, compression=\\'gzip\\')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n\n    $$;','END') AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.live__allow_list": {"database": "ADMIN", "schema": "live", "name": "live__allow_list", "resource_type": "model", "package_name": "livequery_models", "path": "live__allow_list.sql", "original_file_path": "models/live__allow_list.sql", "unique_id": "model.livequery_models.live__allow_list", "fqn": ["livequery_models", "live__allow_list"], "alias": "allow_list", "checksum": {"name": "sha256", "checksum": "0f0f0355e5f959d9d75458d90cee37209b5632f984414c3fcf65eca0e0e5de2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.4530334, "relation_name": "ADMIN.live.allow_list", "raw_code": "-- depends_on: {{ ref('live') }}\n{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => {{ this.database }}.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/live__allow_list.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\n\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => ADMIN.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.utils": {"database": "ADMIN", "schema": "utils", "name": "utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/utils.sql", "original_file_path": "models/deploy/core/utils.sql", "unique_id": "model.livequery_models.utils", "fqn": ["livequery_models", "deploy", "core", "utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "306321713017a3700a99c47db3a99ca2f64fdf6fe567c883a7507f13bd8095c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["core"], "description": "", "columns": {"udf_json_rpc_call": {"name": "udf_json_rpc_call", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_urlencode": {"name": "udf_urlencode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_int_to_binary": {"name": "udf_int_to_binary", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_binary_to_int": {"name": "udf_binary_to_int", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_evm_decode_log": {"name": "udf_evm_decode_log", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.6530845, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n{% set config = config_core_utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._live": {"database": "ADMIN", "schema": "_live", "name": "_live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_live.sql", "original_file_path": "models/deploy/core/_live.sql", "unique_id": "model.livequery_models._live", "fqn": ["livequery_models", "deploy", "core", "_live"], "alias": "", "checksum": {"name": "sha256", "checksum": "c96cbb9dfef8ff10375c8e187dc394f7a38d172e8df94f343761d485338f4036"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.4764197, "relation_name": null, "raw_code": "{% set config = config_core__live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_live.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT '_live' as schema_", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.live": {"database": "ADMIN", "schema": "live", "name": "live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/live.sql", "original_file_path": "models/deploy/core/live.sql", "unique_id": "model.livequery_models.live", "fqn": ["livequery_models", "deploy", "core", "live"], "alias": "", "checksum": {"name": "sha256", "checksum": "71b371765e23aa22b9961eeaeb7657413cc7f6d5995b811f85a5c110ae1d4d00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["core"], "description": "", "columns": {"udf_api": {"name": "udf_api", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/live.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.8760576, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('utils') }}\n-- depends_on: {{ ref('_live') }}\n{% set config = config_core_live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}, {"name": "_live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils", "model.livequery_models.utils", "model.livequery_models._live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._utils": {"database": "ADMIN", "schema": "_utils", "name": "_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_utils.sql", "original_file_path": "models/deploy/core/_utils.sql", "unique_id": "model.livequery_models._utils", "fqn": ["livequery_models", "deploy", "core", "_utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "3d202cb82095728dae3b02cdca6d2c5f9521ecf50b687a50739f44b5ee828015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["core"], "description": "", "columns": {"udf_introspect": {"name": "udf_introspect", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.6000402, "relation_name": null, "raw_code": "{% set config = config_core__utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_utils.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT '_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.harmony__mainnet": {"database": "ADMIN", "schema": "harmony", "name": "harmony__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__mainnet.sql", "original_file_path": "models/deploy/evm/harmony__mainnet.sql", "unique_id": "model.livequery_models.harmony__mainnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.509406, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/harmony__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'harmony' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.arbitrum_one__mainnet": {"database": "ADMIN", "schema": "arbitrum_one", "name": "arbitrum_one__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_one__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_one__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.525494, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_one__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'arbitrum_one' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.base__mainnet": {"database": "ADMIN", "schema": "base", "name": "base__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__mainnet.sql", "original_file_path": "models/deploy/evm/base__mainnet.sql", "unique_id": "model.livequery_models.base__mainnet", "fqn": ["livequery_models", "deploy", "evm", "base__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.5346627, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/base__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'base' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.polygon__testnet": {"database": "ADMIN", "schema": "polygon", "name": "polygon__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__testnet.sql", "original_file_path": "models/deploy/evm/polygon__testnet.sql", "unique_id": "model.livequery_models.polygon__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.5437238, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'polygon' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.avalanche_c__mainnet": {"database": "ADMIN", "schema": "avalanche_c", "name": "avalanche_c__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__mainnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__mainnet.sql", "unique_id": "model.livequery_models.avalanche_c__mainnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.5527737, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/avalanche_c__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'avalanche_c' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.ethereum__sepolia": {"database": "ADMIN", "schema": "ethereum", "name": "ethereum__sepolia", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__sepolia.sql", "original_file_path": "models/deploy/evm/ethereum__sepolia.sql", "unique_id": "model.livequery_models.ethereum__sepolia", "fqn": ["livequery_models", "deploy", "evm", "ethereum__sepolia"], "alias": "sepolia", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.562634, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__sepolia.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.fantom__mainnet": {"database": "ADMIN", "schema": "fantom", "name": "fantom__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/fantom__mainnet.sql", "original_file_path": "models/deploy/evm/fantom__mainnet.sql", "unique_id": "model.livequery_models.fantom__mainnet", "fqn": ["livequery_models", "deploy", "evm", "fantom__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.571669, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/fantom__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'fantom' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.polygon_zkevm__testnet": {"database": "ADMIN", "schema": "polygon_zkevm", "name": "polygon_zkevm__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__testnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__testnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.5807314, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon_zkevm__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'polygon_zkevm' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.ethereum__mainnet": {"database": "ADMIN", "schema": "ethereum", "name": "ethereum__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__mainnet.sql", "original_file_path": "models/deploy/evm/ethereum__mainnet.sql", "unique_id": "model.livequery_models.ethereum__mainnet", "fqn": ["livequery_models", "deploy", "evm", "ethereum__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "42fcff256d5cc7381b3feee8e69fc5ac0df9c6c255bc772f793908ca1d70e640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.5897555, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('_eth__logs') }}\n-- depends_on: {{ ref('_eth__decoded_logs') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions,\n    config_eth_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_eth__logs", "package": null, "version": null}, {"name": "_eth__decoded_logs", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._eth__logs", "model.livequery_models._eth__decoded_logs", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: ADMIN._eth.logs\n-- depends_on: ADMIN._eth.decoded_logs\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.bsc__testnet": {"database": "ADMIN", "schema": "bsc", "name": "bsc__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__testnet.sql", "original_file_path": "models/deploy/evm/bsc__testnet.sql", "unique_id": "model.livequery_models.bsc__testnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6001587, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/bsc__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'bsc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.polygon__mainnet": {"database": "ADMIN", "schema": "polygon", "name": "polygon__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__mainnet.sql", "original_file_path": "models/deploy/evm/polygon__mainnet.sql", "unique_id": "model.livequery_models.polygon__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.609479, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'polygon' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.arbitrum_one__goerli": {"database": "ADMIN", "schema": "arbitrum_one", "name": "arbitrum_one__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__goerli.sql", "original_file_path": "models/deploy/evm/arbitrum_one__goerli.sql", "unique_id": "model.livequery_models.arbitrum_one__goerli", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6185522, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_one__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'arbitrum_one' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.arbitrum_nova__mainnet": {"database": "ADMIN", "schema": "arbitrum_nova", "name": "arbitrum_nova__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_nova__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_nova__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_nova__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_nova__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.627615, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_nova__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'arbitrum_nova' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.avalanche_c__testnet": {"database": "ADMIN", "schema": "avalanche_c", "name": "avalanche_c__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__testnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__testnet.sql", "unique_id": "model.livequery_models.avalanche_c__testnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6376398, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/avalanche_c__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'avalanche_c' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.celo__mainnet": {"database": "ADMIN", "schema": "celo", "name": "celo__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/celo__mainnet.sql", "original_file_path": "models/deploy/evm/celo__mainnet.sql", "unique_id": "model.livequery_models.celo__mainnet", "fqn": ["livequery_models", "deploy", "evm", "celo__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6466727, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/celo__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'celo' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.bsc__mainnet": {"database": "ADMIN", "schema": "bsc", "name": "bsc__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__mainnet.sql", "original_file_path": "models/deploy/evm/bsc__mainnet.sql", "unique_id": "model.livequery_models.bsc__mainnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.655676, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/bsc__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'bsc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.ethereum__goerli": {"database": "ADMIN", "schema": "ethereum", "name": "ethereum__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__goerli.sql", "original_file_path": "models/deploy/evm/ethereum__goerli.sql", "unique_id": "model.livequery_models.ethereum__goerli", "fqn": ["livequery_models", "deploy", "evm", "ethereum__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6649122, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.base__goerli": {"database": "ADMIN", "schema": "base", "name": "base__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__goerli.sql", "original_file_path": "models/deploy/evm/base__goerli.sql", "unique_id": "model.livequery_models.base__goerli", "fqn": ["livequery_models", "deploy", "evm", "base__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.674744, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/base__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'base' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.polygon_zkevm__mainnet": {"database": "ADMIN", "schema": "polygon_zkevm", "name": "polygon_zkevm__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__mainnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__mainnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6837714, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon_zkevm__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'polygon_zkevm' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.optimism__goerli": {"database": "ADMIN", "schema": "optimism", "name": "optimism__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__goerli.sql", "original_file_path": "models/deploy/evm/optimism__goerli.sql", "unique_id": "model.livequery_models.optimism__goerli", "fqn": ["livequery_models", "deploy", "evm", "optimism__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.6930175, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/optimism__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'optimism' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.gnosis__mainnet": {"database": "ADMIN", "schema": "gnosis", "name": "gnosis__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/gnosis__mainnet.sql", "original_file_path": "models/deploy/evm/gnosis__mainnet.sql", "unique_id": "model.livequery_models.gnosis__mainnet", "fqn": ["livequery_models", "deploy", "evm", "gnosis__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.7020836, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/gnosis__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'gnosis' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.optimism__mainnet": {"database": "ADMIN", "schema": "optimism", "name": "optimism__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__mainnet.sql", "original_file_path": "models/deploy/evm/optimism__mainnet.sql", "unique_id": "model.livequery_models.optimism__mainnet", "fqn": ["livequery_models", "deploy", "evm", "optimism__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.7120414, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/optimism__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'optimism' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.harmony__testnet": {"database": "ADMIN", "schema": "harmony", "name": "harmony__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__testnet.sql", "original_file_path": "models/deploy/evm/harmony__testnet.sql", "unique_id": "model.livequery_models.harmony__testnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.7211118, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/harmony__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: ADMIN._evm.contracts_map\n-- depends_on: ADMIN._evm.abi_map\n-- depends_on: ADMIN._evm.native_symbol_map\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__utils\n\n    SELECT 'harmony' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_ethereum_nfts", "name": "quicknode_ethereum_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "01a0dba1033fe3cb3334fb37d12177d3ada4e9bafa4596bd1c2382df8ddd6aa6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.9946802, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_utils__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_utils", "name": "quicknode_utils__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_utils__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_utils__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "19648edc7f037d57db6423d1103148840109bb643b983410a69cc4ee15bf4185"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.7440286, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_ethereum_tokens", "name": "quicknode_ethereum_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "63a3801533cd007c9e82ad7e4a566d5708f196ae7c5262d341bfc0b7cba8678b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.9168956, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_solana_nfts__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_solana_nfts", "name": "quicknode_solana_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_solana_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "321974e17cbe3269d6e2228a11da818de60d89f6114be913ef229dc0a5342ecc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_creator": {"name": "fetch_nfts_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.8989744, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_solana_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_polygon_tokens", "name": "quicknode_polygon_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "6eede1c8f6dd8dea7e02d996adf1f0e1d8985f42480ab38af9708ee181d5eaac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.034003, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": {"database": "ADMIN", "schema": "quicknode_polygon_nfts", "name": "quicknode_polygon_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "8fa2d0247ac0c24d068b4acad95177a66924ace12e33177403b37767e64273aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.955942, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.blockpour_utils__": {"database": "ADMIN", "schema": "blockpour_utils", "name": "blockpour_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/blockpour/blockpour_utils__.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.sql", "unique_id": "model.livequery_models.blockpour_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "blockpour_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b42854ed08d11ee40b146d93bafb5961ed3474bf0bd335a0b38a6a30822f4a4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "post": {"name": "post", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/blockpour/blockpour_utils__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.071421, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_blockpour_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/blockpour/blockpour_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'blockpour_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.transpose__": {"database": "ADMIN", "schema": "transpose", "name": "transpose__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/transpose/transpose__.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.sql", "unique_id": "model.livequery_models.transpose__", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "transpose__"], "alias": "", "checksum": {"name": "sha256", "checksum": "8d2ddcca714778664a2a954d5e7fadca4ff62b56e8013fce0c48b06bb2e2298d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/transpose/transpose__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.0872636, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_transpose_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/transpose/transpose__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'transpose' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.deepnftvalue__": {"database": "ADMIN", "schema": "deepnftvalue", "name": "deepnftvalue__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "unique_id": "model.livequery_models.deepnftvalue__", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "deepnftvalue__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a71c5173a5afd11110e3e118e2e6bd5ade443d94407151e03397de3f6789c5f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.0957701, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_deepnftvalue_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'deepnftvalue' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.alchemy_utils__alchemy_utils": {"database": "ADMIN", "schema": "alchemy_utils", "name": "alchemy_utils__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_utils__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_utils__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "f1262dc20957c1f57345d120d5fa804f99a3bbf73fdffb6bac4d1eb830ba841c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006842.8114176, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.alchemy_transfers__alchemy_utils": {"database": "ADMIN", "schema": "alchemy_transfers", "name": "alchemy_transfers__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_transfers__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_transfers__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "6b6f4c070fd03d24d24751920d4bfd3873272a75b8ed8e8e8b88523ec4241c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_asset_transfers": {"name": "get_asset_transfers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.1286507, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_transfers_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.alchemy_nfts__alchemy_utils": {"database": "ADMIN", "schema": "alchemy_nfts", "name": "alchemy_nfts__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_nfts__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_nfts__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "296d282fac83cc82133d804554b6202ccbbfa6bf30fd67217d7b61ff7d47d9c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_nfts": {"name": "get_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_owners_for_token": {"name": "get_owners_for_token", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_owners_for_collection": {"name": "get_owners_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_holder_of_collection": {"name": "is_holder_of_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contracts_for_owner": {"name": "get_contracts_for_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_metadata": {"name": "get_nft_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_metadata_batch": {"name": "get_nft_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contract_metadata": {"name": "get_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contract_metadata_batch": {"name": "get_contract_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invalidate_contract": {"name": "invalidate_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reingest_contract": {"name": "reingest_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_contract_metadata": {"name": "search_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nfts_for_collection": {"name": "get_nfts_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_spam_contracts": {"name": "get_spam_contracts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_spam_contract": {"name": "is_spam_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_airdrop": {"name": "is_airdrop", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "report_spam": {"name": "report_spam", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_floor_price": {"name": "get_floor_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_sales": {"name": "get_nft_sales", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compute_rarity": {"name": "compute_rarity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "summarize_nft_attributes": {"name": "summarize_nft_attributes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.1451676, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.alchemy_tokens__alchemy_utils": {"database": "ADMIN", "schema": "alchemy_tokens", "name": "alchemy_tokens__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_tokens__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_tokens__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "f6672fd74929ac1a3aef90af7871a36707752c078fece259ed2efd898d8e75f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_token_allowance": {"name": "get_token_allowance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_balances": {"name": "get_token_balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata": {"name": "get_token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.1050494, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.chainbase_utils__": {"database": "ADMIN", "schema": "chainbase_utils", "name": "chainbase_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/chainbase/chainbase_utils__.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.sql", "unique_id": "model.livequery_models.chainbase_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "chainbase_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3acb77e875379304467b7de0996fdf7a1d519f6696cad8ab87754da38fe8e7fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/chainbase/chainbase_utils__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.2970088, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_chainbase_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/chainbase/chainbase_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'chainbase_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.credmark_utils__": {"database": "ADMIN", "schema": "credmark_utils", "name": "credmark_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/credmark/credmark_utils__.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.sql", "unique_id": "model.livequery_models.credmark_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "credmark_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c62bd748a22e1fd79d1f6a3a0d41552de14eb226395e2af34a65562d50a76f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/credmark/credmark_utils__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.3055205, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_credmark_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/credmark/credmark_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'credmark_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.playgrounds__": {"database": "ADMIN", "schema": "playgrounds", "name": "playgrounds__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/playgrounds/playgrounds__.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.sql", "unique_id": "model.livequery_models.playgrounds__", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "playgrounds__"], "alias": "", "checksum": {"name": "sha256", "checksum": "dcf2d8aba472812a413cd5630fb4e0ee4a84567370c1060b970a22c70fafda5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"query_subgraph": {"name": "query_subgraph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/playgrounds/playgrounds__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.3141053, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_playgrounds_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'playgrounds' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.opensea__": {"database": "ADMIN", "schema": "opensea", "name": "opensea__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/opensea/opensea__.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.sql", "unique_id": "model.livequery_models.opensea__", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "opensea__"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ea7806ecada9430a35a51a202c79a3632a56ba9b06b5bbca56473003fc14bba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/opensea/opensea__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.3304648, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_opensea_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/opensea/opensea__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'opensea' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.bitquery__": {"database": "ADMIN", "schema": "bitquery", "name": "bitquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/bitquery/bitquery__.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.sql", "unique_id": "model.livequery_models.bitquery__", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "bitquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c41507cb784eab92dd6f9e91932240038ec5d054378a41b7af05b350294e3709"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/bitquery/bitquery__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.3854206, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_bitquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/bitquery/bitquery__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'bitquery' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.allday__": {"database": "ADMIN", "schema": "allday", "name": "allday__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/allday/allday__.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.sql", "unique_id": "model.livequery_models.allday__", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "allday__"], "alias": "", "checksum": {"name": "sha256", "checksum": "aeba24365cef1ac3a11bd50bd89eecc3df0aee8b5f2e29a57a67ca3fb6bc9861"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/allday/allday__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.3941386, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_allday_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/allday/allday__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'allday' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.topshot__": {"database": "ADMIN", "schema": "topshot", "name": "topshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/topshot/topshot__.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.sql", "unique_id": "model.livequery_models.topshot__", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "topshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "114366c4e0f69de805b68085852b826d594dfae80b2dc66a4f95d2dd1dd63cc2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/topshot/topshot__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.402622, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_topshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/topshot/topshot__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'topshot' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.covalent__": {"database": "ADMIN", "schema": "covalent", "name": "covalent__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/covalent/covalent__.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.sql", "unique_id": "model.livequery_models.covalent__", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "covalent__"], "alias": "", "checksum": {"name": "sha256", "checksum": "eb21a1d1de2f5a44abdba0379a7c265092caa8ae68a040b178b1f8a66ef0dbaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/covalent/covalent__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4101095, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_covalent_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/covalent/covalent__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'covalent' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.stakingrewards__": {"database": "ADMIN", "schema": "stakingrewards", "name": "stakingrewards__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/stakingrewards/stakingrewards__.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__.sql", "unique_id": "model.livequery_models.stakingrewards__", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "stakingrewards__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b106fc542269f4bca677dd36a22951b8cf79a5bfc8cf6c8fc6a63645c963a929"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4185157, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_stakingrewards_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/stakingrewards/stakingrewards__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'stakingrewards' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.strangelove__": {"database": "ADMIN", "schema": "strangelove", "name": "strangelove__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/strangelove/strangelove__.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.sql", "unique_id": "model.livequery_models.strangelove__", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "strangelove__"], "alias": "", "checksum": {"name": "sha256", "checksum": "bad70832540e2461bccfa1c03d382b89b0e187b55dfbcaa2aa8bf5abe76b3ec5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/strangelove/strangelove__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4269714, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_strangelove_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/strangelove/strangelove__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'strangelove' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.dappradar__": {"database": "ADMIN", "schema": "dappradar", "name": "dappradar__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dappradar/dappradar__.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.sql", "unique_id": "model.livequery_models.dappradar__", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "dappradar__"], "alias": "", "checksum": {"name": "sha256", "checksum": "55abd3e81a034c665926ed47361d4d248da944b9adc4a57c1a19baa11a38af57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dappradar/dappradar__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4354692, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dappradar_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dappradar/dappradar__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'dappradar' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.footprint_utils__footprint_utils": {"database": "ADMIN", "schema": "footprint_utils", "name": "footprint_utils__footprint_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "unique_id": "model.livequery_models.footprint_utils__footprint_utils", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "footprint_utils__footprint_utils"], "alias": "footprint_utils", "checksum": {"name": "sha256", "checksum": "7b014ae6db72a2e0f20070bf29c433cb90b4d265f7342d52e2cea483ff06787f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4439058, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_footprint_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'footprint_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.subquery__": {"database": "ADMIN", "schema": "subquery", "name": "subquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/subquery/subquery__.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.sql", "unique_id": "model.livequery_models.subquery__", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "subquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "41725d4e8e1a831be3ff17e4ce5f2bc8f80679f436e25b362be2ee01282f5dbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/subquery/subquery__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4524486, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_subquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/subquery/subquery__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'subquery' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.snapshot__": {"database": "ADMIN", "schema": "snapshot", "name": "snapshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/snapshot/snapshot__.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__.sql", "unique_id": "model.livequery_models.snapshot__", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "snapshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "cabcd83e37dfb9424dd9a69490d63d1204dca1ef383d300ecad295ffaed3f6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/snapshot/snapshot__ .yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4609122, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_snapshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/snapshot/snapshot__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'snapshot' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.nftscan__": {"database": "ADMIN", "schema": "nftscan", "name": "nftscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/nftscan/nftscan__.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.sql", "unique_id": "model.livequery_models.nftscan__", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "nftscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "00b1f0a5c932642d40b70efec0522b85821fb640a2928f67258fa415902bb9fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/nftscan/nftscan__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.469431, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_nftscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/nftscan/nftscan__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'nftscan' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.cmc__": {"database": "ADMIN", "schema": "cmc", "name": "cmc__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/cmc/cmc__.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.sql", "unique_id": "model.livequery_models.cmc__", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "cmc__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c26c75aa21e109f25bcba7e695b7cef34df142384b567fce95de8b2374b33887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/cmc/cmc__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.477868, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_cmc_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/cmc/cmc__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'cmc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.apilayer__": {"database": "ADMIN", "schema": "apilayer", "name": "apilayer__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/apilayer/apilayer__.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.sql", "unique_id": "model.livequery_models.apilayer__", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "apilayer__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3bed74d4a9a1ec55eadec250ffcecb484876c79cf42be448591ceee377714c81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/apilayer/apilayer__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4869297, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_apilayer_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/apilayer/apilayer__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'apilayer' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.helius_apis__helius_utils": {"database": "ADMIN", "schema": "helius_apis", "name": "helius_apis__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_apis__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.sql", "unique_id": "model.livequery_models.helius_apis__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_apis__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "c2d9fec018a695c9fdb69fc0166d07df725eadaf4c6e1b1d52f8a1161cb3e09b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"token_metadata": {"name": "token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balances": {"name": "balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parse_transactions": {"name": "parse_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.5582106, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_apis_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.helius_utils__helius_utils": {"database": "ADMIN", "schema": "helius_utils", "name": "helius_utils__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_utils__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_utils__helius_utils.sql", "unique_id": "model.livequery_models.helius_utils__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_utils__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "87bb2d3485bba61ea826583fa5a5773732b5cd9ca498be8b66e7d514f31f2b76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.0401452, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_utils__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.helius_das__helius_utils": {"database": "ADMIN", "schema": "helius_das", "name": "helius_das__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_das__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.sql", "unique_id": "model.livequery_models.helius_das__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_das__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "28fa6015380d003e7edb1366c57119215d7fcecec9f00f660eef2b6011e94e7c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_asset": {"name": "get_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_signatures_for_asset": {"name": "get_signatures_for_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_assets": {"name": "search_assets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_asset_proof": {"name": "get_asset_proof", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_owner": {"name": "get_assets_by_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_authority": {"name": "get_assets_by_authority", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_creator": {"name": "get_assets_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_group": {"name": "get_assets_by_group", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_das__helius_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.4981983, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_das_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.defillama__": {"database": "ADMIN", "schema": "defillama", "name": "defillama__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/defillama/defillama__.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.sql", "unique_id": "model.livequery_models.defillama__", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "defillama__"], "alias": "", "checksum": {"name": "sha256", "checksum": "09036911befd5c87aa63e7467568c629ab1cc182664c632cf92b8fc60919f485"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/defillama/defillama__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.581296, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_defillama_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/defillama/defillama__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'defillama' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.zettablock__": {"database": "ADMIN", "schema": "zettablock", "name": "zettablock__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zettablock/zettablock__.sql", "original_file_path": "models/deploy/marketplace/zettablock/zettablock__.sql", "unique_id": "model.livequery_models.zettablock__", "fqn": ["livequery_models", "deploy", "marketplace", "zettablock", "zettablock__"], "alias": "", "checksum": {"name": "sha256", "checksum": "1fcd113d09cfbd2ec5691bbcd8b9f392e45080f7f92e45df76bf2c3f7ce0f5c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.0657604, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zettablock_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/zettablock/zettablock__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'zettablock' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.github_utils__github_utils": {"database": "ADMIN", "schema": "github_utils", "name": "github_utils__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_utils__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.sql", "unique_id": "model.livequery_models.github_utils__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_utils__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "73bfd31747254bf79ad2ca91c0d363c8c8f3ba518cf7828835b5a588cd69da6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"octocat": {"name": "octocat", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_utils__github_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.5904438, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_github_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_utils__github_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.github_actions__github_utils": {"database": "ADMIN", "schema": "github_actions", "name": "github_actions__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_actions__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.sql", "unique_id": "model.livequery_models.github_actions__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_actions__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "708556920b602f295cd781689c359542552043117fa4dfe3164137e7e72d6a1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"workflows": {"name": "workflows", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workflow_runs": {"name": "workflow_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_actions__github_utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.5994077, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('github_utils__github_utils') }}\n{%- set configs = [\n    config_github_actions_udfs,\n    config_github_actions_udtfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.github_utils__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.espn__": {"database": "ADMIN", "schema": "espn", "name": "espn__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/espn/espn__.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.sql", "unique_id": "model.livequery_models.espn__", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "espn__"], "alias": "", "checksum": {"name": "sha256", "checksum": "87f5a3b7083b803d50ac3cf614a6b734aff4cd08c776829ba2c3d93706ed130c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/espn/espn__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.6221013, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_espn_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/espn/espn__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'espn' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.solscan__": {"database": "ADMIN", "schema": "solscan", "name": "solscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/solscan/solscan__.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.sql", "unique_id": "model.livequery_models.solscan__", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "solscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c65ffbc4dae2ec4fd19fb9863658f818db84f430a371dda7baf0a28636f4c603"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"public_api_get": {"name": "public_api_get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/solscan/solscan__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.6306028, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_solscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/solscan/solscan__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'solscan' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.coingecko__": {"database": "ADMIN", "schema": "coingecko", "name": "coingecko__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/coingecko/coingecko__.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.sql", "unique_id": "model.livequery_models.coingecko__", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "coingecko__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a0daf27e44aed8a6507b087f7b1274784d628e4edf2fae68148de64ac46f2b90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/coingecko/coingecko__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.6391566, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_coingecko_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/coingecko/coingecko__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'coingecko' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.reservoir__": {"database": "ADMIN", "schema": "reservoir", "name": "reservoir__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/reservoir/reservoir__.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.sql", "unique_id": "model.livequery_models.reservoir__", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "reservoir__"], "alias": "", "checksum": {"name": "sha256", "checksum": "6ccab30c4dc7b31ce65d169622b5fe6014875eb662a2f1e229c204348df72aac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/reservoir/reservoir__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.647623, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_reservoir_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/reservoir/reservoir__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'reservoir' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.fred__": {"database": "ADMIN", "schema": "fred", "name": "fred__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/fred/fred__.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.sql", "unique_id": "model.livequery_models.fred__", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "fred__"], "alias": "", "checksum": {"name": "sha256", "checksum": "44274edd9fa472dbf09b042e45ed0dec8584a34b34f49150076d23588bbb461c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_series": {"name": "get_series", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/fred/fred__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.6561542, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_fred_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/fred/fred__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'fred' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.zapper__": {"database": "ADMIN", "schema": "zapper", "name": "zapper__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zapper/zapper__.sql", "original_file_path": "models/deploy/marketplace/zapper/zapper__.sql", "unique_id": "model.livequery_models.zapper__", "fqn": ["livequery_models", "deploy", "marketplace", "zapper", "zapper__"], "alias": "", "checksum": {"name": "sha256", "checksum": "74bdb58da84c5f7c07f56e4c29050414c05178b2c660b73aea40525db985e7f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1329181, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zapper_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/zapper/zapper__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'zapper' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models.dapplooker__": {"database": "ADMIN", "schema": "dapplooker", "name": "dapplooker__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dapplooker/dapplooker__.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.sql", "unique_id": "model.livequery_models.dapplooker__", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "dapplooker__"], "alias": "", "checksum": {"name": "sha256", "checksum": "06c50a1b30747bf59e1de42dd9b078f327f3dc5d5b595ec3a4838e0d8de8869e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["marketplace"], "description": "", "columns": {"get_chart": {"name": "get_chart", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dapplooker/dapplooker__.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006844.6646528, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dapplooker_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dapplooker/dapplooker__.sql", "compiled": true, "compiled_code": "with __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)-- depends_on: __dbt__cte__live\nSELECT 'dapplooker' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._evm__native_symbol_map": {"database": "ADMIN", "schema": "_evm", "name": "_evm__native_symbol_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__native_symbol_map.sql", "original_file_path": "models/mapping_tables/_evm__native_symbol_map.sql", "unique_id": "model.livequery_models._evm__native_symbol_map", "fqn": ["livequery_models", "mapping_tables", "_evm__native_symbol_map"], "alias": "native_symbol_map", "checksum": {"name": "sha256", "checksum": "3ee1112fc9b568e4bfd16703969c64185eecb78266275f6572d30f9337f61b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1489756, "relation_name": "ADMIN._evm.native_symbol_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nWITH blockchain_assets AS (\n\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'sepolia' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_nova' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'base' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'fantom' AS blockchain,\n        'FTM' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'CELO' AS blockchain,\n        'CELO' AS asset_symbol,\n        'mainnet' AS network\n)\n\nSELECT\n    blockchain,\n    network,\n    asset_symbol AS symbol\nFROM\n    blockchain_assets", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__native_symbol_map.sql", "compiled": true, "compiled_code": "\n\nWITH blockchain_assets AS (\n\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'sepolia' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_nova' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'base' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'fantom' AS blockchain,\n        'FTM' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'CELO' AS blockchain,\n        'CELO' AS asset_symbol,\n        'mainnet' AS network\n)\n\nSELECT\n    blockchain,\n    network,\n    asset_symbol AS symbol\nFROM\n    blockchain_assets", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._evm__abi_map": {"database": "ADMIN", "schema": "_evm", "name": "_evm__abi_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__abi_map.sql", "original_file_path": "models/mapping_tables/_evm__abi_map.sql", "unique_id": "model.livequery_models._evm__abi_map", "fqn": ["livequery_models", "mapping_tables", "_evm__abi_map"], "alias": "abi_map", "checksum": {"name": "sha256", "checksum": "88cdfb107baea6454e6ea0bde9b36a8a135f15abba9d6588a18de46d8095fe46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1588376, "relation_name": "ADMIN._evm.abi_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    parent_contract_address,\n    event_name,\n    event_signature,\n    abi,\n    start_block,\n    end_block,\n    CASE blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_evm_event_abis'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_evm_event_abis"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_evm_event_abis"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__abi_map.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    parent_contract_address,\n    event_name,\n    event_signature,\n    abi,\n    start_block,\n    end_block,\n    CASE blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    crosschain_dev.core.dim_evm_event_abis", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._evm__contracts_map": {"database": "ADMIN", "schema": "_evm", "name": "_evm__contracts_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__contracts_map.sql", "original_file_path": "models/mapping_tables/_evm__contracts_map.sql", "unique_id": "model.livequery_models._evm__contracts_map", "fqn": ["livequery_models", "mapping_tables", "_evm__contracts_map"], "alias": "contracts_map", "checksum": {"name": "sha256", "checksum": "735a229e83b106abf3e7fdffae2618ac6f66f8662e74c6394f232a13d43e3bd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1694584, "relation_name": "ADMIN._evm.contracts_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    address,\n    symbol,\n    decimals,\n    CASE\n    blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_contracts'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_contracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_contracts"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__contracts_map.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    address,\n    symbol,\n    decimals,\n    CASE\n    blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    crosschain_dev.core.dim_contracts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._eth__logs": {"database": "ADMIN", "schema": "_eth", "name": "_eth__logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__logs.sql", "original_file_path": "models/mapping_tables/_eth__logs.sql", "unique_id": "model.livequery_models._eth__logs", "fqn": ["livequery_models", "mapping_tables", "_eth__logs"], "alias": "logs", "checksum": {"name": "sha256", "checksum": "99ceaa11e1a1d01016305d322dc4ecdbfd2de223193155b186c6f9242e0bd2d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1789823, "relation_name": "ADMIN._eth.logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT *\nFROM\n    {{ source(\n        'ethereum_core',\n        'fact_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "fact_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.fact_event_logs"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_eth__logs.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM\n    ethereum_dev.core.fact_event_logs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.livequery_models._eth__decoded_logs": {"database": "ADMIN", "schema": "_eth", "name": "_eth__decoded_logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__decoded_logs.sql", "original_file_path": "models/mapping_tables/_eth__decoded_logs.sql", "unique_id": "model.livequery_models._eth__decoded_logs", "fqn": ["livequery_models", "mapping_tables", "_eth__decoded_logs"], "alias": "decoded_logs", "checksum": {"name": "sha256", "checksum": "3f2174b4a8be4c1cba5c8d3e79107d5699d83b1aef530e5ebafc1bc2ffdff638"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.1884918, "relation_name": "ADMIN._eth.decoded_logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT *\nFROM\n    {{ source(\n        'ethereum_core',\n        'ez_decoded_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "ez_decoded_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_eth__decoded_logs.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM\n    ethereum_dev.core.ez_decoded_event_logs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "analysis.livequery_models.generate_test_udf_skeleton": {"database": "ADMIN", "schema": "generate_test_udf_skeleton", "name": "generate_test_udf_skeleton", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/generate_test_udf_skeleton.sql", "original_file_path": "analysis/generate_test_udf_skeleton.sql", "unique_id": "analysis.livequery_models.generate_test_udf_skeleton", "fqn": ["livequery_models", "analysis", "generate_test_udf_skeleton"], "alias": "", "checksum": {"name": "sha256", "checksum": "2931dee110117aaa477703fa3ad1dd92e9691d5c8ca46ce0d22145d0e43294ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.217029, "relation_name": null, "raw_code": "{% set schema = \"strangelove\" %}\n{% set config = fromyaml(config_strangelove_udfs(schema_name = schema, utils_schema_name = \"quicknode_utils\"))  %}\n{% set raw_test_queries %}\nstrangelove.get:\n  - |\n    'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\n  - |\n    {\n      'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n    }\n\n\nstrangelove.post:\n  - |\n    'https://endpoint'\n  - |\n    {\n      'foo': 'bar'\n    }\n\n{% endset %}\n{% set test_queries = fromyaml(raw_test_queries) %}\n{{ test_queries }}\n{{ schema }}\n_____\n    columns:\n{%- for item in config %}\n      - name: {{ item[\"name\"] | replace(schema~\".\", \"\") }}\n        tests:\n          - test_marketplace_udf:\n              name: test_{{ item[\"name\"].replace(\".\", \"__\") ~ \"_status_200\" }}\n              args: >\n                {{ test_queries[item[\"name\"]] | join(\", \") | indent(16) }}\n              validations:\n                - result:status_code = 200\n{%- endfor %}\n\n=====================\n\n{{ config | pprint}}\n{# {% for item in config %}\n{% if item[\"return_type\"][0] != \"VARIANT\"%}\n  {{ item[\"return_type\"][0] }}\n{% endif %}\n{% endfor %} #}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_strangelove_udfs"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/generate_test_udf_skeleton.sql", "compiled": true, "compiled_code": "\n\n\n\n{'strangelove.get': [\"'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\\n\", \"{\\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\\n}\\n\"], 'strangelove.post': [\"'https://endpoint'\\n\", \"{\\n  'foo': 'bar'\\n}\\n\"]}\nstrangelove\n_____\n    columns:\n      - name: get\n        tests:\n          - test_marketplace_udf:\n              name: test_strangelove__get_status_200\n              args: >\n                'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\n                , {\n                  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n                }\n\n              validations:\n                - result:status_code = 200\n      - name: post\n        tests:\n          - test_marketplace_udf:\n              name: test_strangelove__post_status_200\n              args: >\n                'https://endpoint'\n                , {\n                  'foo': 'bar'\n                }\n\n              validations:\n                - result:status_code = 200\n\n=====================\n\n[{'name': 'strangelove.get',\n  'options': 'COMMENT = $$Issue a GET request to a Strangelove Endpoint '\n             '[Strangelove docs '\n             'here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\\n',\n  'return_type': ['VARIANT'],\n  'signature': [['URL', 'STRING', 'The url to issue a get request to'],\n                ['QUERY_ARGS', 'OBJECT', 'The query arguments']],\n  'sql': 'SELECT\\n'\n         '  live.udf_api(\\n'\n         \"    'GET',\\n\"\n         '    concat(\\n'\n         \"      URL, '?',\\n\"\n         '      utils.udf_object_to_url_query_string(QUERY_ARGS)\\n'\n         '    ),\\n'\n         \"    {'x-apikey': '{API_KEY}'},\\n\"\n         '    {},\\n'\n         \"    '_FSC_SYS/STRANGELOVE'\\n\"\n         ') as response\\n'},\n {'name': 'strangelove.post',\n  'options': 'COMMENT = $$Issue a POST request to a Strangelove Endpoint '\n             '[Strangelove docs '\n             'here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\\n',\n  'return_type': ['VARIANT'],\n  'signature': [['URL', 'STRING', 'The url to issue a post request to'],\n                ['QUERY', 'OBJECT', 'The body of the request']],\n  'sql': 'SELECT\\n'\n         '  live.udf_api(\\n'\n         \"    'POST',\\n\"\n         '    URL,\\n'\n         \"    {'x-apikey': '{API_KEY}'},\\n\"\n         '    QUERY,\\n'\n         \"    '_FSC_SYS/STRANGELOVE'\\n\"\n         ') as response\\n'}]\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.livequery_models.test_functions_py": {"database": "ADMIN", "schema": "test_functions_py", "name": "test_functions_py", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions_py.sql", "original_file_path": "analysis/test_functions_py.sql", "unique_id": "analysis.livequery_models.test_functions_py", "fqn": ["livequery_models", "analysis", "test_functions_py"], "alias": "", "checksum": {"name": "sha256", "checksum": "3e379c91a7abf83ca2438fdd68efa21b5f98a91a7c1beb62091f7b4d13d33745"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.2292798, "relation_name": null, "raw_code": "{{ python_hex_to_int() }}\n{{ python_udf_hex_to_int_with_encoding() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_functions_py.sql", "compiled": true, "compiled_code": "\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n\n\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.livequery_models.test_crud_udfs_in_schema": {"database": "ADMIN", "schema": "test_crud_udfs_in_schema", "name": "test_crud_udfs_in_schema", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_crud_udfs_in_schema.sql", "original_file_path": "analysis/test_crud_udfs_in_schema.sql", "unique_id": "analysis.livequery_models.test_crud_udfs_in_schema", "fqn": ["livequery_models", "analysis", "test_crud_udfs_in_schema"], "alias": "", "checksum": {"name": "sha256", "checksum": "f676dabac544030f70f1652a8d6908844809f667be9bd1c8719037b3070efab0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.2375746, "relation_name": null, "raw_code": "{{crud_udfs_by_chain(config_evm_high_level_abstractions, 'ethereum', 'mainnet', false)}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, False) -}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, true) -}}", "language": "sql", "refs": [{"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain"], "nodes": ["model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map"]}, "compiled_path": "target/compiled/livequery_models/analysis/test_crud_udfs_in_schema.sql", "compiled": true, "compiled_code": "\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum_mainnet;\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_native_balance(\n            wallet STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balance at the latest block for a given address.$$\n\n    AS\n    $$\n    \nwith base as (select lower(wallet) AS wallet_address)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success'\n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,'latest')::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_native_balance(\n            wallets ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances at the latest block for given addresses.$$\n\n    AS\n    $$\n    \nWITH address_inputs AS (\n    SELECT wallets AS wallet_array\n),\nflat_addresses AS (\n    SELECT lower(value::string) AS wallet_address\n    FROM address_inputs a,\n    LATERAL FLATTEN(input => a.wallet_array)\n),\nnode_call AS (\n    SELECT wallet_address,\n    ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,'latest')::string AS hex_balance\n    FROM flat_addresses\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(hex_balance) AS raw_balance,\n    (raw_balance / POW(10,18))::FLOAT AS balance\nFROM node_call\nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallet STRING,\n            token STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balance at the latest block for a given address and token address. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n     SELECT\n        lower(token) AS token_address,\n        lower(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n),\nnode_call AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM node_call\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallet STRING,\n            tokens ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for a given address and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT tokens, wallet\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS token_address,\n        lower(wallet::string) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN ADMIN._evm.contracts_map \n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallets ARRAY,\n            token STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for multiple addresses and a single token address. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT token, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS wallet_address,\n        lower(token::string) AS token_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN ADMIN._evm.contracts_map \n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallets ARRAY,\n            tokens ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for multiple addresses and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT tokens, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(tokens.VALUE::STRING) AS token_address,\n        lower(wallets.VALUE::STRING) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM\n        inputs,\n        LATERAL FLATTEN(input => tokens) tokens,\n        LATERAL FLATTEN(input => wallets) wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN ADMIN._evm.contracts_map \n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            token STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balance for a given address and token address at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data,\n        block_number\n), final AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            token STRING,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and token address at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            token STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and a given token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH wallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, 0)\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            tokens ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            tokens ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            tokens ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens,\n        wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            tokens ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        wallets,\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN ADMIN._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallet STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balance for a given address at a specific block.$$\n\n    AS\n    $$\n    \nwith base as (select lower(wallet) AS wallet_address, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))) as hex_block)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,hex_block)::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base \nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallet STRING,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for a given address at multiple specific blocks.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM blocks\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallets ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for multiple addresses at a specific block.$$\n\n    AS\n    $$\n    \nWITH wallet_inputs AS (\n    SELECT wallets\n),\nflat_wallets AS (\n    SELECT lower(value::string) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallets ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for multiple addresses at multiple specific blocks.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT wallets, block_numbers\n),\nflat_wallets AS (\n    SELECT lower(wallet.value::STRING) AS wallet, block.value::INTEGER AS block_number\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets) wallet,\n    LATERAL FLATTEN(input => block_numbers) block\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18))::float as balance\nFROM final\nLEFT JOIN ADMIN._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            address STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by a contract in the last 100 blocks.$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case \n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            address STRING,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by a contract within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case \n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(lookback)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            addresses ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by multiple contracts in the last 100 blocks.$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM (\n        SELECT value::STRING AS address\n        FROM LATERAL FLATTEN(input => addresses)\n    ) inputs, chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case \n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            addresses ARRAY,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by multiple contracts within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM (\n        SELECT value::STRING AS address\n        FROM LATERAL FLATTEN(input => addresses)\n    ) inputs, chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case \n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(lookback)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            address STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$RReturns the latest decoded events emitted by a contract in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN ADMIN._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            addresses ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by multiple contracts in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n\n    AS\n    $$\n    \nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN ADMIN._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            address STRING,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by a contract within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN ADMIN._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            addresses ARRAY,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by multiple contracts within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.* $$\n\n    AS\n    $$\n    \nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN ADMIN._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum;\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc(\n            method STRING,\n            parameters VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Executes an RPC call on the ethereum blockchain.$$\n\n    AS\n    $$\n    SELECT live.udf_rpc('ethereum', 'ethereum', method, parameters)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_call(\n            transaction OBJECT,\n            block_or_tag STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Executes a new message call immediately without creating a transaction on the block chain.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_call', [transaction, block_or_tag])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_get_logs(\n            filter OBJECT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns an array of all logs matching filter with given address.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_getLogs', [filter])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_get_balance(\n            address STRING,\n            block_or_tag STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the account of given address.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_getBalance', [address, block_or_tag])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_get_token_balance(\n            wallet_address STRING,\n            token_address STRING\n    )\n    COPY GRANTS\n    RETURNS STRING\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the wallet of given token address at the latest block.$$\n\n    AS\n    $$\n    SELECT utils.udf_hex_to_int(ethereum_ethereum.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))),'latest')::string)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_get_token_balance(\n            wallet_address STRING,\n            token_address STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS STRING\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the wallet of given token address at the given block.$$\n\n    AS\n    $$\n    SELECT utils.udf_hex_to_int(ethereum_ethereum.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING)\n    $$;\n\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum;\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc(\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_call(\n            OBJECT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_get_logs(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_get_balance(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_get_token_balance(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_get_token_balance(\n            STRING,\n            STRING,\n            INTEGER);\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.livequery_models.test_functions": {"database": "ADMIN", "schema": "test_functions", "name": "test_functions", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions.sql", "original_file_path": "analysis/test_functions.sql", "unique_id": "analysis.livequery_models.test_functions", "fqn": ["livequery_models", "analysis", "test_functions"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ab84ce91d84a3416f20a65f80f6226b0dec39313dbd0f555f40cdf721121b9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.331953, "relation_name": null, "raw_code": "{{ sql_udf_json_rpc_call(True) }}\n{# {{ sql_udf_json_rpc_call(False) }} #}\n{{ config_core__live() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.config_core__live"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_functions.sql", "compiled": true, "compiled_code": "\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                \n                  , 'id': hash(method, params)::string\n                \n              }\n              )\n\n\n\n\n- name: _live.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: 'AWS_LIVE_QUERY'\n  options: |\n    NOT NULL\n  sql: udf_api\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.livequery_models.test_create_or_drop_function_from_config": {"database": "ADMIN", "schema": "test_create_or_drop_function_from_config", "name": "test_create_or_drop_function_from_config", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_create_or_drop_function_from_config.sql", "original_file_path": "analysis/test_create_or_drop_function_from_config.sql", "unique_id": "analysis.livequery_models.test_create_or_drop_function_from_config", "fqn": ["livequery_models", "analysis", "test_create_or_drop_function_from_config"], "alias": "", "checksum": {"name": "sha256", "checksum": "6da8747a0512c8c0c522b3b56816f437171257a7544716d8795b1a4cc04c8664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.342019, "relation_name": null, "raw_code": "{%-  set udfs = fromyaml(config_core_live()) -%}\n{% do udfs.extend(fromyaml(config_core__live())) %}\n{% do udfs.extend(fromyaml(config_core__utils())) %}\n{% do udfs.extend(fromyaml(config_core_utils())) %}\n\n{%- for udf in udfs -%}\n{{- create_or_drop_function_from_config(udf, drop_=True) -}}\n{{- create_or_drop_function_from_config(udf, drop_=False) -}}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_core_live", "macro.livequery_models.config_core__live", "macro.livequery_models.config_core__utils", "macro.livequery_models.config_core_utils", "macro.livequery_models.create_or_drop_function_from_config"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_create_or_drop_function_from_config.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            data VARIANT,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      method,\n      url,\n      headers,\n      data,\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            data VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      method,\n      url,\n      headers,\n      data,\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            data VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'POST',\n      url,\n      {'Content-Type': 'application/json'},\n      data,\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            VARIANT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            data VARIANT,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'POST',\n      url,\n      {'Content-Type': 'application/json'},\n      data,\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'GET',\n      url,\n      {},\n      {},\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'GET',\n      url,\n      {},\n      {},\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_rpc(\n            STRING,\n            STRING,\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION live.udf_rpc(\n            blockchain STRING,\n            network STRING,\n            method STRING,\n            parameters VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\nCOMMENT = $$Executes an JSON RPC call on a blockchain.$$\n\n    AS\n    $$\n    \n\nWITH result as (\n    SELECT\n        live.udf_api(\n            '{endpoint}'\n            ,utils.udf_json_rpc_call(method, parameters)\n            ,concat_ws('/', 'integration', _utils.udf_provider(), blockchain, network)\n        )::VARIANT:data AS data\n)\nSELECT\n    COALESCE(data:result, {'error':data:error})\nFROM result\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS live.udf_allow_list();\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE EXTERNAL FUNCTION live.udf_allow_list(\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    RETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns a list of allowed domains.$$\n\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/allowed';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE EXTERNAL FUNCTION _live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            DATA VARIANT,\n            user_id STRING,\n            SECRET STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\n\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/udf_api';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _utils.udf_introspect(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE EXTERNAL FUNCTION _utils.udf_introspect(\n            echo STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/introspect';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _utils.udf_user_tier();\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_user_tier(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _utils.udf_provider();\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_provider(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _utils.udf_whoami();\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_whoami(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS _utils.udf_register_secret(\n            STRING,\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE EXTERNAL FUNCTION _utils.udf_register_secret(\n            request_id STRING,\n            user_id STRING,\n            key STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/secret/register';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_register_secret(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE SECURE FUNCTION utils.udf_register_secret(\n            request_id STRING,\n            key STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT\n  _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_int(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_int(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.8'\nHANDLER = 'hex_to_int'\n\n    AS\n    $$\n    \ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_int(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_int(\n            encoding STRING,\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.8'\nHANDLER = 'hex_to_int'\n\n    AS\n    $$\n    \ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_text_signature(\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_evm_text_signature(\n            abi VARIANT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'get_simplified_signature'\n\n    AS\n    $$\n    \n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_keccak256(\n            VARCHAR(255));\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_keccak256(\n            event_name VARCHAR(255)\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nPACKAGES = ('pycryptodome==3.15.0')\nHANDLER = 'udf_encode'\n\n    AS\n    $$\n    \nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_string(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_string(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT\n  LTRIM(regexp_replace(\n    try_hex_decode_string(hex),\n      '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_int_to_hex(\n            INTEGER);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_int_to_hex(\n            int INTEGER\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            ARRAY);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params ARRAY\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': hash(method, params)::string\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params OBJECT\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': hash(method, params)::string\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            OBJECT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params OBJECT,\n            id STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': id\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            ARRAY,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params ARRAY,\n            id STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': id\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            OBJECT,\n            BOOLEAN);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query OBJECT,\n            doseq BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.8'\nCOMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\nHANDLER = 'object_to_url_query_string'\n\n    AS\n    $$\n    \nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    \n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            ARRAY,\n            BOOLEAN);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query ARRAY,\n            doseq BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.8'\nCOMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\nHANDLER = 'object_to_url_query_string'\n\n    AS\n    $$\n    \nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    \n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            ARRAY);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query ARRAY\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(query, FALSE)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query OBJECT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(query, FALSE)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_object_to_url_query_string(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_object_to_url_query_string(\n            object OBJECT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(object, FALSE)\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_transform_log(\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_evm_transform_log(\n            decoded VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NULL\nLANGUAGE PYTHON\nIMMUTABLE\nRUNTIME_VERSION = '3.8'\nHANDLER = 'transform'\n\n    AS\n    $$\n    \nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_decode_log(\n            ARRAY,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE EXTERNAL FUNCTION utils.udf_evm_decode_log(\n            abi ARRAY,\n            data OBJECT\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/evm/decode/log';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_decode_log(\n            OBJECT,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE EXTERNAL FUNCTION utils.udf_evm_decode_log(\n            abi OBJECT,\n            data OBJECT\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_LIVE_QUERY\n    AS 'https://bqco8lkjsb.execute-api.us-east-1.amazonaws.com/prod/evm/decode/log';\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_base58_to_hex(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_base58_to_hex(\n            base58 STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'transform_base58_to_hex'\n\n    AS\n    $$\n    \n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    return '0x' + hex_string\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_base58(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_base58(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'transform_hex_to_base58'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_bech32(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_bech32(\n            hex STRING,\n            hrp STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'transform_hex_to_bech32'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_int_to_binary(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_int_to_binary(\n            num STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'int_to_binary'\n\n    AS\n    $$\n    \n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n    $$;\n\n    \n    \n    \n    \n    \n    \n\n    \n    DROP FUNCTION IF EXISTS utils.udf_binary_to_int(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n\n    \n    CREATE OR REPLACE  FUNCTION utils.udf_binary_to_int(\n            binary STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.8'\nHANDLER = 'binary_to_int'\n\n    AS\n    $$\n    \n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n\n    $$;\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "seed.livequery_models.live__verified_api_endpoints": {"database": "ADMIN", "schema": "live", "name": "live__verified_api_endpoints", "resource_type": "seed", "package_name": "livequery_models", "path": "live__verified_api_endpoints.csv", "original_file_path": "data/live__verified_api_endpoints.csv", "unique_id": "seed.livequery_models.live__verified_api_endpoints", "fqn": ["livequery_models", "live__verified_api_endpoints"], "alias": "verified_api_endpoints", "checksum": {"name": "sha256", "checksum": "f801025b0fb9a370678db2b5b63ead57dc1371caffa0688266d9be12605a8afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1726006843.413998, "relation_name": "ADMIN.live.verified_api_endpoints", "raw_code": "", "root_path": "/home/runner/work/admin-models/admin-models/dbt_packages/livequery_models", "depends_on": {"macros": []}}, "operation.livequery_models.livequery_models-on-run-start-0": {"database": "ADMIN", "schema": "livequery_models-on-run-start-0", "name": "livequery_models-on-run-start-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-start-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "21164b61c7e1df792b0f9738abd358ff8069bac2c658ccf812b44f7fdbe08202"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.425439, "relation_name": null, "raw_code": "{{ create_sps() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.create_sps"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/./dbt_project.yml/hooks/livequery_models-on-run-start-0.sql", "compiled": true, "compiled_code": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.livequery_models.livequery_models-on-run-end-0": {"database": "ADMIN", "schema": "livequery_models-on-run-end-0", "name": "livequery_models-on-run-end-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-end-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "21164b61c7e1df792b0f9738abd358ff8069bac2c658ccf812b44f7fdbe08202"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.4336433, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/./dbt_project.yml/hooks/livequery_models-on-run-end-0.sql", "compiled": true, "compiled_code": "\n    \n        \n        \n        \n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": [true], "column_name": "PIPELINE_ACTIVE", "model": "{{ get_where_subquery(ref('github_actions__current_task_status')) }}"}, "namespace": "dbt_expectations"}, "database": "ADMIN", "schema": "dbt_expectations_expect_column_values_to_be_in_set_github_actions", "name": "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True", "resource_type": "test", "package_name": "admin_models", "path": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.yml", "unique_id": "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f", "fqn": ["admin_models", "github_actions", "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True"], "alias": "current_task_status_PIPELINE_ACTIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9"}, "created_at": 1726006843.5669825, "relation_name": "ADMIN.dbt_expectations_expect_column_values_to_be_in_set_github_actions.current_task_status_PIPELINE_ACTIVE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9\") }}", "language": "sql", "refs": [{"name": "github_actions__current_task_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.admin_models.github_actions__current_task_status"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__current_task_status.yml/dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        PIPELINE_ACTIVE as value_field\n\n    from ADMIN.github_actions.current_task_status\n    \n\n),\nset_values as (\n\n    select\n        cast('True' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PIPELINE_ACTIVE", "file_key_name": "models.github_actions__current_task_status", "attached_node": "model.admin_models.github_actions__current_task_status"}, "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204.be298ec717": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": [204], "column_name": "SUCCESSES", "model": "{{ get_where_subquery(ref('github_actions__current_task_status')) }}"}, "namespace": "dbt_expectations"}, "database": "ADMIN", "schema": "dbt_expectations_expect_column_values_to_be_in_set_github_actions", "name": "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204", "resource_type": "test", "package_name": "admin_models", "path": "dbt_expectations_expect_column_cb79a89e73cc32b511c0bc383ee5f312.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.yml", "unique_id": "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204.be298ec717", "fqn": ["admin_models", "github_actions", "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204"], "alias": "current_task_status_SUCCESSES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb79a89e73cc32b511c0bc383ee5f312", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "warn_if": ">0", "alias": "dbt_expectations_expect_column_cb79a89e73cc32b511c0bc383ee5f312"}, "created_at": 1726006843.5820768, "relation_name": "ADMIN.dbt_expectations_expect_column_values_to_be_in_set_github_actions.current_task_status_SUCCESSES", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">0\",alias=\"dbt_expectations_expect_column_cb79a89e73cc32b511c0bc383ee5f312\") }}", "language": "sql", "refs": [{"name": "github_actions__current_task_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.admin_models.github_actions__current_task_status"]}, "compiled_path": "target/compiled/admin_models/models/github_actions/github_actions__current_task_status.yml/dbt_expectations_expect_column_cb79a89e73cc32b511c0bc383ee5f312.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        SUCCESSES as value_field\n\n    from ADMIN.github_actions.current_task_status\n    \n\n),\nset_values as (\n\n    select\n        cast('204' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SUCCESSES", "file_key_name": "models.github_actions__current_task_status", "attached_node": "model.admin_models.github_actions__current_task_status"}, "test.livequery_models.test___utils_udf_introspect.79bd27a18b": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'hello'", "assertions": ["result = 'hello'"], "column_name": "udf_introspect", "model": "{{ get_where_subquery(ref('_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test", "name": "test___utils_udf_introspect", "resource_type": "test", "package_name": "livequery_models", "path": "test___utils_udf_introspect.sql", "original_file_path": "models/deploy/core/_utils.yml", "unique_id": "test.livequery_models.test___utils_udf_introspect.79bd27a18b", "fqn": ["livequery_models", "deploy", "core", "test___utils_udf_introspect"], "alias": "_utils_udf_introspect", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.60167, "relation_name": "ADMIN.test._utils_udf_introspect", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_utils.yml/test___utils_udf_introspect.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),\ntest AS\n(\n    SELECT\n        '_utils.udf_introspect' AS test_name\n        ,['hello'] as parameters\n        ,ADMIN._utils.udf_introspect('hello') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'hello'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN._utils.udf_introspect('hello')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'hello'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_introspect", "file_key_name": "models._utils", "attached_node": "model.livequery_models._utils"}, "test.livequery_models.test_secrets__udf_register_secret.85444b4425": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', 'test'\n", "assertions": ["result = {'request_id':'test','success':false}"], "column_name": "udf_register_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_secrets", "name": "test_secrets__udf_register_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_register_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_register_secret.85444b4425", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_register_secret"], "alias": "udf_register_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6193097, "relation_name": "ADMIN.test_secrets.udf_register_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "udf_register_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets"}, "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'test'\n", "assertions": ["result::OBJECT = {'key': 'value'}\n"], "column_name": "udf_get_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_secrets", "name": "test_secrets__udf_get_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_get_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_get_secret"], "alias": "udf_get_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6255553, "relation_name": "ADMIN.test_secrets.udf_get_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "udf_get_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets"}, "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "", "assertions": ["result = {'test': {'key': 'value'}}\n"], "column_name": "udf_get_secrets", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_secrets", "name": "test_secrets__udf_get_secrets", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_get_secrets.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_get_secrets"], "alias": "udf_get_secrets", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.631681, "relation_name": "ADMIN.test_secrets.udf_get_secrets", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "udf_get_secrets", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets"}, "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', {'key': 'value'}\n", "assertions": ["result = 200"], "column_name": "udf_create_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_secrets", "name": "test_secrets__udf_create_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_create_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_create_secret.d42bc02506", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_create_secret"], "alias": "udf_create_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6376717, "relation_name": "ADMIN.test_secrets.udf_create_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "udf_create_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets"}, "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'test_delete'\n", "assertions": ["result = 200"], "column_name": "udf_delete_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_secrets", "name": "test_secrets__udf_delete_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_delete_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_delete_secret.9f28745276", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_delete_secret"], "alias": "udf_delete_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.643814, "relation_name": "ADMIN.test_secrets.udf_delete_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "udf_delete_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets"}, "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'foo', [], 1", "assertions": ["result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n"], "column_name": "udf_json_rpc_call", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_udf_utils", "name": "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call", "resource_type": "test", "package_name": "livequery_models", "path": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "fqn": ["livequery_models", "deploy", "core", "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call"], "alias": "foo_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f"}, "created_at": 1726006843.654877, "relation_name": "ADMIN.test_udf_utils.foo_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f\") }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_json_rpc_call' AS test_name\n        ,['foo', [], 1] as parameters\n        ,ADMIN.utils.udf_json_rpc_call('foo', [], 1) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_json_rpc_call('foo', [], 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_json_rpc_call", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_1"], "alias": "udf_urlencode_dict_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6611197, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_true_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}, TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'b'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'b'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'a', 'b':'b'}, TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_2"], "alias": "udf_urlencode_dict_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6672397, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_true_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'a', 'b':'b'}, TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'a', 'b':'b'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'a', 'b':'b'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_space"], "alias": "udf_urlencode_dict_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6734278, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_true_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}, TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode({'space': 'abc 123'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'space': 'abc 123'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_special"], "alias": "udf_urlencode_dict_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6795566, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_true_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}, TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_array"], "alias": "udf_urlencode_dict_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.685548, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_true_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}, TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode({'array': [0, 1, 2]}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=0&array=1&array=2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'array': [0, 1, 2]}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=0&array=1&array=2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_1"], "alias": "udf_urlencode_dict_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6916924, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_false_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}, FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'b'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'b'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}, FALSE\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_2"], "alias": "udf_urlencode_dict_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.6977928, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_false_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b', 'b':'b'}, FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'b', 'b':'b'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'b', 'b':'b'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_space"], "alias": "udf_urlencode_dict_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7038991, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_false_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}, FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode({'space': 'abc 123'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'space': 'abc 123'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_special"], "alias": "udf_urlencode_dict_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.710544, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_false_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}, FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_array"], "alias": "udf_urlencode_dict_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7165117, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_false_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}, FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode({'array': [0, 1, 2]}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'array': [0, 1, 2]}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_1"], "alias": "udf_urlencode_dict_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7225997, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'b'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'b'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_2"], "alias": "udf_urlencode_dict_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7287264, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b', 'b':'b'}] as parameters\n        ,ADMIN.utils.udf_urlencode({'a':'b', 'b':'b'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'a':'b', 'b':'b'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_space"], "alias": "udf_urlencode_dict_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7348912, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}] as parameters\n        ,ADMIN.utils.udf_urlencode({'space': 'abc 123'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'space': 'abc 123'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_special"], "alias": "udf_urlencode_dict_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7408428, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}] as parameters\n        ,ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'special!': ' !@#$,+\"'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_array"], "alias": "udf_urlencode_dict_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7469385, "relation_name": "ADMIN.test_utils.udf_urlencode_dict_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_dict_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}] as parameters\n        ,ADMIN.utils.udf_urlencode({'array': [0, 1, 2]}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode({'array': [0, 1, 2]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_1"], "alias": "udf_urlencode_array_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7531111, "relation_name": "ADMIN.test_utils.udf_urlencode_array_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_true_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']], TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'b']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'b']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_2"], "alias": "udf_urlencode_array_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.759291, "relation_name": "ADMIN.test_utils.udf_urlencode_array_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_true_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']], TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_space"], "alias": "udf_urlencode_array_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7652447, "relation_name": "ADMIN.test_utils.udf_urlencode_array_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_true_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']], TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode([['space', 'abc 123']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['space', 'abc 123']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_special"], "alias": "udf_urlencode_array_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7713444, "relation_name": "ADMIN.test_utils.udf_urlencode_array_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_true_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']], TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_array"], "alias": "udf_urlencode_array_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.777491, "relation_name": "ADMIN.test_utils.udf_urlencode_array_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_true_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]], TRUE] as parameters\n        ,ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=0&array=1&array=2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=0&array=1&array=2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_1"], "alias": "udf_urlencode_array_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.783714, "relation_name": "ADMIN.test_utils.udf_urlencode_array_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_false_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']], FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'b']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'b']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], FALSE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_2"], "alias": "udf_urlencode_array_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7896717, "relation_name": "ADMIN.test_utils.udf_urlencode_array_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_false_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']], FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_space"], "alias": "udf_urlencode_array_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.7958362, "relation_name": "ADMIN.test_utils.udf_urlencode_array_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_false_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']], FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode([['space', 'abc 123']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['space', 'abc 123']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_special"], "alias": "udf_urlencode_array_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.802023, "relation_name": "ADMIN.test_utils.udf_urlencode_array_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_false_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']], FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_array"], "alias": "udf_urlencode_array_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8087454, "relation_name": "ADMIN.test_utils.udf_urlencode_array_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_false_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]], FALSE] as parameters\n        ,ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']]\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_1"], "alias": "udf_urlencode_array_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8148406, "relation_name": "ADMIN.test_utils.udf_urlencode_array_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_1.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']]] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'b']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'b']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']]\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_2"], "alias": "udf_urlencode_array_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.821006, "relation_name": "ADMIN.test_utils.udf_urlencode_array_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_2.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']]] as parameters\n        ,ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['a', 'a'], ['b', 'b']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']]\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_space"], "alias": "udf_urlencode_array_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8271832, "relation_name": "ADMIN.test_utils.udf_urlencode_array_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_space.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']]] as parameters\n        ,ADMIN.utils.udf_urlencode([['space', 'abc 123']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['space', 'abc 123']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']]\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_special"], "alias": "udf_urlencode_array_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8333757, "relation_name": "ADMIN.test_utils.udf_urlencode_array_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_special.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']]] as parameters\n        ,ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['special!', ' !@#$,+\"']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]]\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_array"], "alias": "udf_urlencode_array_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8393545, "relation_name": "ADMIN.test_utils.udf_urlencode_array_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_urlencode_array_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]]] as parameters\n        ,ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_urlencode([['array', [0, 1, 2]]])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": 123456789, "assertions": ["result = '111010110111100110100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_int_to_binary", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_int_to_binary.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_int_to_binary"], "alias": "udf_int_to_binary", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.845561, "relation_name": "ADMIN.test_utils.udf_int_to_binary", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_int_to_binary.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_int_to_binary' AS test_name\n        ,[123456789] as parameters\n        ,ADMIN.utils.udf_int_to_binary(123456789) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '111010110111100110100010101'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_int_to_binary(123456789)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '111010110111100110100010101'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'123456789123456789123456789123456789123456789'", "assertions": ["result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_int_to_binary_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_int_to_binary_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_int_to_binary_large_number"], "alias": "udf_int_to_binary_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8514102, "relation_name": "ADMIN.test_utils.udf_int_to_binary_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_int_to_binary_large_number.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_int_to_binary' AS test_name\n        ,['123456789123456789123456789123456789123456789'] as parameters\n        ,ADMIN.utils.udf_int_to_binary('123456789123456789123456789123456789123456789') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_int_to_binary('123456789123456789123456789123456789123456789')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "111010110111100110100010101", "assertions": ["result = '123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_binary_to_int", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_binary_to_int.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_binary_to_int"], "alias": "udf_binary_to_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.857655, "relation_name": "ADMIN.test_utils.udf_binary_to_int", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_binary_to_int.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_binary_to_int' AS test_name\n        ,[111010110111100110100010101] as parameters\n        ,ADMIN.utils.udf_binary_to_int(111010110111100110100010101) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '123456789'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_binary_to_int(111010110111100110100010101)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '123456789'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'110110110100110110100101110101100110100000101111100010101'", "assertions": ["result = '123456789123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_binary_to_int_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_binary_to_int_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_binary_to_int_large_number"], "alias": "udf_binary_to_int_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8636653, "relation_name": "ADMIN.test_utils.udf_binary_to_int_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_binary_to_int_large_number.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_binary_to_int' AS test_name\n        ,['110110110100110110100101110101100110100000101111100010101'] as parameters\n        ,ADMIN.utils.udf_binary_to_int('110110110100110110100101110101100110100000101111100010101') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '123456789123456789'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_binary_to_int('110110110100110110100101110101100110100000101111100010101')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '123456789123456789'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant\n", "assertions": ["result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]"], "column_name": "udf_evm_decode_log", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_utils", "name": "test_utils__udf_evm_decode_log", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_evm_decode_log.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_evm_decode_log"], "alias": "udf_evm_decode_log", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8699434, "relation_name": "ADMIN.test_utils.udf_evm_decode_log", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test_utils__udf_evm_decode_log.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'utils.udf_evm_decode_log' AS test_name\n        ,[{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant] as parameters\n        ,ADMIN.utils.udf_evm_decode_log({\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.utils.udf_evm_decode_log({\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_evm_decode_log", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils"}, "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {'foo': 'bar'}\n", "assertions": ["result:data.json is not null", "result:data.json = OBJECT_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test", "name": "test__live_udf_api_post_data_object", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_object"], "alias": "live_udf_api_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8776698, "relation_name": "ADMIN.test.live_udf_api_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_object.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', {'foo': 'bar'}] as parameters\n        ,ADMIN.live.udf_api('https://httpbin.org/post', {'foo': 'bar'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', {'foo': 'bar'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = OBJECT_CONSTRUCT('foo', 'bar')$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', {'foo': 'bar'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = OBJECT_CONSTRUCT('foo', 'bar')\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live"}, "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', ['foo', 'bar']\n", "assertions": ["result:data.json is not null", "result:data.json = ARRAY_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test", "name": "test__live_udf_api_post_data_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_array.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_array"], "alias": "live_udf_api_post_data_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.884823, "relation_name": "ADMIN.test.live_udf_api_post_data_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_array.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', ['foo', 'bar']] as parameters\n        ,ADMIN.live.udf_api('https://httpbin.org/post', ['foo', 'bar']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', ['foo', 'bar'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = ARRAY_CONSTRUCT('foo', 'bar')$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', ['foo', 'bar'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = ARRAY_CONSTRUCT('foo', 'bar')\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live"}, "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', 'foo'::VARIANT\n", "assertions": ["result:data.json is not null", "result:data.json = 'foo'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test", "name": "test__live_udf_api_post_data_string", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_string.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_string"], "alias": "live_udf_api_post_data_string", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.8919373, "relation_name": "ADMIN.test.live_udf_api_post_data_string", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_string.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', 'foo'::VARIANT] as parameters\n        ,ADMIN.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = 'foo'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = 'foo'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live"}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9008284, "relation_name": "ADMIN.test_quicknode_solana_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml/test_quicknode_solana_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_solana_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_solana_nfts.fetch_nfts' AS test_name\n        ,[{\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_solana_nfts.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_solana_nfts.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_solana_nfts.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_solana_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_creator", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200"], "alias": "fetch_nfts_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9078255, "relation_name": "ADMIN.test_quicknode_solana_nfts.fetch_nfts_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml/test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_solana_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_solana_nfts.fetch_nfts_by_creator' AS test_name\n        ,[{\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}] as parameters\n        ,ADMIN.quicknode_solana_nfts.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_solana_nfts.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_solana_nfts.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_solana_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts_by_creator", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9187129, "relation_name": "ADMIN.test_quicknode_ethereum_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_tokens.get_token_metadata_by_contract_address' AS test_name\n        ,[{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}] as parameters\n        ,ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9256673, "relation_name": "ADMIN.test_quicknode_ethereum_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_tokens.get_token_metadata_by_symbol' AS test_name\n        ,[{\n  'symbol': 'USDC'\n}] as parameters\n        ,ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9328394, "relation_name": "ADMIN.test_quicknode_ethereum_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_tokens.get_transactions_by_address' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_ethereum_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9400265, "relation_name": "ADMIN.test_quicknode_ethereum_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_tokens.get_wallet_token_balance' AS test_name\n        ,[{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}] as parameters\n        ,ADMIN.quicknode_ethereum_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9473088, "relation_name": "ADMIN.test_quicknode_ethereum_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_tokens.get_wallet_token_transactions' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_ethereum_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9575915, "relation_name": "ADMIN.test_quicknode_polygon_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_nfts.fetch_nft_collection_details' AS test_name\n        ,[{ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}] as parameters\n        ,ADMIN.quicknode_polygon_nfts.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9647603, "relation_name": "ADMIN.test_quicknode_polygon_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_nfts.fetch_nfts' AS test_name\n        ,[{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}] as parameters\n        ,ADMIN.quicknode_polygon_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9719334, "relation_name": "ADMIN.test_quicknode_polygon_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_nfts.fetch_nfts_by_collection' AS test_name\n        ,[{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_polygon_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.9791336, "relation_name": "ADMIN.test_quicknode_polygon_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_nfts.get_transfers_by_nft' AS test_name\n        ,[{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }] as parameters\n        ,ADMIN.quicknode_polygon_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.986153, "relation_name": "ADMIN.test_quicknode_polygon_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__verify_nfts_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_nfts.verify_nfts_owner' AS test_name\n        ,[{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}] as parameters\n        ,ADMIN.quicknode_polygon_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006843.996529, "relation_name": "ADMIN.test_quicknode_ethereum_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_nfts.fetch_nft_collection_details' AS test_name\n        ,[{\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}] as parameters\n        ,ADMIN.quicknode_ethereum_nfts.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0034697, "relation_name": "ADMIN.test_quicknode_ethereum_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_nfts.fetch_nfts' AS test_name\n        ,[{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}] as parameters\n        ,ADMIN.quicknode_ethereum_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0106277, "relation_name": "ADMIN.test_quicknode_ethereum_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_nfts.fetch_nfts_by_collection' AS test_name\n        ,[{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_ethereum_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0182793, "relation_name": "ADMIN.test_quicknode_ethereum_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_nfts.get_transfers_by_nft' AS test_name\n        ,[{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }] as parameters\n        ,ADMIN.quicknode_ethereum_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.025464, "relation_name": "ADMIN.test_quicknode_ethereum_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_ethereum_nfts.verify_nfts_owner' AS test_name\n        ,[{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}] as parameters\n        ,ADMIN.quicknode_ethereum_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_ethereum_nfts.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_ethereum_nfts__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0355933, "relation_name": "ADMIN.test_quicknode_polygon_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_tokens.get_token_metadata_by_contract_address' AS test_name\n        ,[{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}] as parameters\n        ,ADMIN.quicknode_polygon_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0427475, "relation_name": "ADMIN.test_quicknode_polygon_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_tokens.get_token_metadata_by_symbol' AS test_name\n        ,[{\n  'symbol': 'USDC'\n}] as parameters\n        ,ADMIN.quicknode_polygon_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0499277, "relation_name": "ADMIN.test_quicknode_polygon_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_transactions_by_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_tokens.get_transactions_by_address' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_polygon_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.057131, "relation_name": "ADMIN.test_quicknode_polygon_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_tokens.get_wallet_token_balance' AS test_name\n        ,[{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}] as parameters\n        ,ADMIN.quicknode_polygon_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils"}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0641036, "relation_name": "ADMIN.test_quicknode_polygon_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n),\ntest AS\n(\n    SELECT\n        'quicknode_polygon_tokens.get_wallet_token_transactions' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,ADMIN.quicknode_polygon_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.quicknode_polygon_tokens.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_polygon_tokens__quicknode_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils__quicknode_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils"}, "test.livequery_models.test_transpose__get_status_200.8721d94682": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('transpose__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_transpose", "name": "test_transpose__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_transpose__get_status_200.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.yml", "unique_id": "test.livequery_models.test_transpose__get_status_200.8721d94682", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "test_transpose__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0889442, "relation_name": "ADMIN.test_transpose.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transpose__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.transpose__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/transpose/transpose__.yml/test_transpose__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__transpose__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'transpose' as schema_\n),\ntest AS\n(\n    SELECT\n        'transpose.get' AS test_name\n        ,['/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}] as parameters\n        ,ADMIN.transpose.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.transpose.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.transpose.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.transpose__", "sql": " __dbt__cte__transpose__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'transpose' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.transpose__", "attached_node": "model.livequery_models.transpose__"}, "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/collections' , {'limit': 5}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('deepnftvalue__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_deepnftvalue", "name": "test_deepnftvalue__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_deepnftvalue__get_status_200.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "unique_id": "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "test_deepnftvalue__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.0974188, "relation_name": "ADMIN.test_deepnftvalue.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deepnftvalue__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.deepnftvalue__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml/test_deepnftvalue__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__deepnftvalue__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'deepnftvalue' as schema_\n),\ntest AS\n(\n    SELECT\n        'deepnftvalue.get' AS test_name\n        ,['/v1/collections' , {'limit': 5}] as parameters\n        ,ADMIN.deepnftvalue.get('/v1/collections' , {'limit': 5}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.deepnftvalue.get('/v1/collections' , {'limit': 5})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.deepnftvalue.get('/v1/collections' , {'limit': 5})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.deepnftvalue__", "sql": " __dbt__cte__deepnftvalue__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'deepnftvalue' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.deepnftvalue__", "attached_node": "model.livequery_models.deepnftvalue__"}, "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_allowance", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_allowance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_allowance_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_allowance_status_200"], "alias": "get_token_allowance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1066544, "relation_name": "ADMIN.test_alchemy_tokens.get_token_allowance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_allowance_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_tokens.get_token_allowance' AS test_name\n        ,['eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]] as parameters\n        ,ADMIN.alchemy_tokens.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_allowance", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils"}, "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_balances", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_balances_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_balances_status_200"], "alias": "get_token_balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1138453, "relation_name": "ADMIN.test_alchemy_tokens.get_token_balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_balances_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_tokens.get_token_balances' AS test_name\n        ,['eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']] as parameters\n        ,ADMIN.alchemy_tokens.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_balances", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils"}, "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_metadata_status_200"], "alias": "get_token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1217692, "relation_name": "ADMIN.test_alchemy_tokens.get_token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_tokens.get_token_metadata' AS test_name\n        ,['eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']] as parameters\n        ,ADMIN.alchemy_tokens.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_tokens.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_tokens__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_token_metadata", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils"}, "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_transfers", "model": "{{ get_where_subquery(ref('alchemy_transfers__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_transfers", "name": "test_alchemy_transfers__get_asset_transfers_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_transfers__get_asset_transfers_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_transfers__get_asset_transfers_status_200"], "alias": "get_asset_transfers_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1302848, "relation_name": "ADMIN.test_alchemy_transfers.get_asset_transfers_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_transfers__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_transfers__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml/test_alchemy_transfers__get_asset_transfers_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_transfers__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_transfers.get_asset_transfers' AS test_name\n        ,['eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]] as parameters\n        ,ADMIN.alchemy_transfers.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_transfers.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_transfers.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_transfers__alchemy_utils", "sql": " __dbt__cte__alchemy_transfers__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_asset_transfers", "file_key_name": "models.alchemy_transfers__alchemy_utils", "attached_node": "model.livequery_models.alchemy_transfers__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_status_200"], "alias": "get_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1467602, "relation_name": "ADMIN.test_alchemy_nfts.get_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_nfts' AS test_name\n        ,['eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}] as parameters\n        ,ADMIN.alchemy_nfts.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_nfts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_token", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_token_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_token_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_token_status_200"], "alias": "get_owners_for_token_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1539207, "relation_name": "ADMIN.test_alchemy_nfts.get_owners_for_token_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_owners_for_token_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_owners_for_token' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,ADMIN.alchemy_nfts.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_owners_for_token", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_collection_status_200"], "alias": "get_owners_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1611009, "relation_name": "ADMIN.test_alchemy_nfts.get_owners_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_owners_for_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_owners_for_collection' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}] as parameters\n        ,ADMIN.alchemy_nfts.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_owners_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_holder_of_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_holder_of_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_holder_of_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_holder_of_collection_status_200"], "alias": "is_holder_of_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.168303, "relation_name": "ADMIN.test_alchemy_nfts.is_holder_of_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_holder_of_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.is_holder_of_collection' AS test_name\n        ,['eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,ADMIN.alchemy_nfts.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "is_holder_of_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contracts_for_owner", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contracts_for_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contracts_for_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contracts_for_owner_status_200"], "alias": "get_contracts_for_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1752594, "relation_name": "ADMIN.test_alchemy_nfts.get_contracts_for_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contracts_for_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_contracts_for_owner' AS test_name\n        ,['eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}] as parameters\n        ,ADMIN.alchemy_nfts.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_contracts_for_owner", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_status_200"], "alias": "get_nft_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1823764, "relation_name": "ADMIN.test_alchemy_nfts.get_nft_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_nft_metadata' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,ADMIN.alchemy_nfts.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_nft_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_batch_status_200"], "alias": "get_nft_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.1896856, "relation_name": "ADMIN.test_alchemy_nfts.get_nft_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_metadata_batch_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_nft_metadata_batch' AS test_name\n        ,['eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}] as parameters\n        ,ADMIN.alchemy_nfts.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_nft_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_status_200"], "alias": "get_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.196873, "relation_name": "ADMIN.test_alchemy_nfts.get_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contract_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_contract_metadata' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,ADMIN.alchemy_nfts.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_batch_status_200"], "alias": "get_contract_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.204038, "relation_name": "ADMIN.test_alchemy_nfts.get_contract_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contract_metadata_batch_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_contract_metadata_batch' AS test_name\n        ,['eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}] as parameters\n        ,ADMIN.alchemy_nfts.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_contract_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "invalidate_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__invalidate_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__invalidate_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__invalidate_contract_status_200"], "alias": "invalidate_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2109904, "relation_name": "ADMIN.test_alchemy_nfts.invalidate_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__invalidate_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.invalidate_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,ADMIN.alchemy_nfts.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "invalidate_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "reingest_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__reingest_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__reingest_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__reingest_contract_status_200"], "alias": "reingest_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2181256, "relation_name": "ADMIN.test_alchemy_nfts.reingest_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__reingest_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.reingest_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,ADMIN.alchemy_nfts.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "reingest_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'query': 'bored'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__search_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__search_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__search_contract_metadata_status_200"], "alias": "search_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2258942, "relation_name": "ADMIN.test_alchemy_nfts.search_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__search_contract_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.search_contract_metadata' AS test_name\n        ,['eth-mainnet', {'query': 'bored'}] as parameters\n        ,ADMIN.alchemy_nfts.search_contract_metadata('eth-mainnet', {'query': 'bored'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.search_contract_metadata('eth-mainnet', {'query': 'bored'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.search_contract_metadata('eth-mainnet', {'query': 'bored'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "search_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_for_collection_status_200"], "alias": "get_nfts_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2330835, "relation_name": "ADMIN.test_alchemy_nfts.get_nfts_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nfts_for_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_nfts_for_collection' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}] as parameters\n        ,ADMIN.alchemy_nfts.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_nfts_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_spam_contracts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_spam_contracts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_spam_contracts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_spam_contracts_status_200"], "alias": "get_spam_contracts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2402666, "relation_name": "ADMIN.test_alchemy_nfts.get_spam_contracts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_spam_contracts_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_spam_contracts' AS test_name\n        ,['eth-mainnet', {}] as parameters\n        ,ADMIN.alchemy_nfts.get_spam_contracts('eth-mainnet', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_spam_contracts('eth-mainnet', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_spam_contracts('eth-mainnet', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_spam_contracts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_spam_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_spam_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_spam_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_spam_contract_status_200"], "alias": "is_spam_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.247328, "relation_name": "ADMIN.test_alchemy_nfts.is_spam_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_spam_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.is_spam_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,ADMIN.alchemy_nfts.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "is_spam_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_airdrop", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_airdrop_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_airdrop_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_airdrop_status_200"], "alias": "is_airdrop_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.254524, "relation_name": "ADMIN.test_alchemy_nfts.is_airdrop_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_airdrop_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.is_airdrop' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,ADMIN.alchemy_nfts.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "is_airdrop", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_floor_price", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_floor_price_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_floor_price_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_floor_price_status_200"], "alias": "get_floor_price_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.268837, "relation_name": "ADMIN.test_alchemy_nfts.get_floor_price_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_floor_price_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_floor_price' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}] as parameters\n        ,ADMIN.alchemy_nfts.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_floor_price", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_sales", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_sales_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_sales_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_sales_status_200"], "alias": "get_nft_sales_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.275933, "relation_name": "ADMIN.test_alchemy_nfts.get_nft_sales_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_sales_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.get_nft_sales' AS test_name\n        ,['eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,ADMIN.alchemy_nfts.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_nft_sales", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "compute_rarity", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__compute_rarity_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__compute_rarity_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__compute_rarity_status_200"], "alias": "compute_rarity_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2828987, "relation_name": "ADMIN.test_alchemy_nfts.compute_rarity_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__compute_rarity_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.compute_rarity' AS test_name\n        ,['eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}] as parameters\n        ,ADMIN.alchemy_nfts.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "compute_rarity", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "summarize_nft_attributes", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__summarize_nft_attributes_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__summarize_nft_attributes_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__summarize_nft_attributes_status_200"], "alias": "summarize_nft_attributes_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.2901163, "relation_name": "ADMIN.test_alchemy_nfts.summarize_nft_attributes_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__summarize_nft_attributes_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n),\ntest AS\n(\n    SELECT\n        'alchemy_nfts.summarize_nft_attributes' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}] as parameters\n        ,ADMIN.alchemy_nfts.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.alchemy_nfts.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_nfts__alchemy_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils__alchemy_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "summarize_nft_attributes", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}, "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('chainbase_utils__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_chainbase_utils", "name": "test_chainbase_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_chainbase_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.yml", "unique_id": "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "test_chainbase_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.298612, "relation_name": "ADMIN.test_chainbase_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "chainbase_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.chainbase_utils__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/chainbase/chainbase_utils__.yml/test_chainbase_utils__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__chainbase_utils__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'chainbase_utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'chainbase_utils.get' AS test_name\n        ,['/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}] as parameters\n        ,ADMIN.chainbase_utils.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.chainbase_utils.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.chainbase_utils.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.chainbase_utils__", "sql": " __dbt__cte__chainbase_utils__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'chainbase_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.chainbase_utils__", "attached_node": "model.livequery_models.chainbase_utils__"}, "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('credmark_utils__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_credmark_utils", "name": "test_credmark_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_credmark_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.yml", "unique_id": "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "test_credmark_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.3071141, "relation_name": "ADMIN.test_credmark_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "credmark_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.credmark_utils__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/credmark/credmark_utils__.yml/test_credmark_utils__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__credmark_utils__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'credmark_utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'credmark_utils.get' AS test_name\n        ,['/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }] as parameters\n        ,ADMIN.credmark_utils.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.credmark_utils.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.credmark_utils.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.credmark_utils__", "sql": " __dbt__cte__credmark_utils__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'credmark_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.credmark_utils__", "attached_node": "model.livequery_models.credmark_utils__"}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_liquidity_pools", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_liquidity_pools.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_liquidity_pools"], "alias": "query_subgraph_status_200_liquidity_pools", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.3157017, "relation_name": "ADMIN.test_playgrounds.query_subgraph_status_200_liquidity_pools", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.yml/test_playgrounds__query_subgraph_status_200_liquidity_pools.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__playgrounds__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'playgrounds' as schema_\n),\ntest AS\n(\n    SELECT\n        'playgrounds.query_subgraph' AS test_name\n        ,['ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}] as parameters\n        ,ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.playgrounds__", "sql": " __dbt__cte__playgrounds__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'playgrounds' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__"}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_total_pool_count", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_total_pool_count.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_total_pool_count"], "alias": "query_subgraph_status_200_total_pool_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.3229144, "relation_name": "ADMIN.test_playgrounds.query_subgraph_status_200_total_pool_count", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.yml/test_playgrounds__query_subgraph_status_200_total_pool_count.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__playgrounds__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'playgrounds' as schema_\n),\ntest AS\n(\n    SELECT\n        'playgrounds.query_subgraph' AS test_name\n        ,['ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.playgrounds.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.playgrounds__", "sql": " __dbt__cte__playgrounds__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'playgrounds' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__"}, "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/health' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('opensea__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_opensea", "name": "test_opensea__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_opensea__get_status_200.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.yml", "unique_id": "test.livequery_models.test_opensea__get_status_200.5de63cfbb1", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "test_opensea__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.332053, "relation_name": "ADMIN.test_opensea.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "opensea__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.opensea__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/opensea/opensea__.yml/test_opensea__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__opensea__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'opensea' as schema_\n),\ntest AS\n(\n    SELECT\n        'opensea.get' AS test_name\n        ,['/health' , {}] as parameters\n        ,ADMIN.opensea.get('/health' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.opensea.get('/health' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.opensea.get('/health' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.opensea__", "sql": " __dbt__cte__opensea__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'opensea' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.opensea__", "attached_node": "model.livequery_models.opensea__"}, "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('bitquery__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_bitquery", "name": "test_bitquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_bitquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.yml", "unique_id": "test.livequery_models.test_bitquery__graphql_status_200.11917beb18", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "test_bitquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.3870804, "relation_name": "ADMIN.test_bitquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bitquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.bitquery__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/bitquery/bitquery__.yml/test_bitquery__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__bitquery__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'bitquery' as schema_\n),\ntest AS\n(\n    SELECT\n        'bitquery.graphql' AS test_name\n        ,[{\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}] as parameters\n        ,ADMIN.bitquery.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.bitquery.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.bitquery.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.bitquery__", "sql": " __dbt__cte__bitquery__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'bitquery' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "graphql", "file_key_name": "models.bitquery__", "attached_node": "model.livequery_models.bitquery__"}, "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('allday__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_allday", "name": "test_allday__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_allday__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.yml", "unique_id": "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "test_allday__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.395731, "relation_name": "ADMIN.test_allday.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "allday__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.allday__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/allday/allday__.yml/test_allday__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__allday__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'allday' as schema_\n),\ntest AS\n(\n    SELECT\n        'allday.graphql' AS test_name\n        ,[{\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}] as parameters\n        ,ADMIN.allday.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.allday.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.allday.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.allday__", "sql": " __dbt__cte__allday__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'allday' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "graphql", "file_key_name": "models.allday__", "attached_node": "model.livequery_models.allday__"}, "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('topshot__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_topshot", "name": "test_topshot__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_topshot__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.yml", "unique_id": "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "test_topshot__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4042027, "relation_name": "ADMIN.test_topshot.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "topshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.topshot__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/topshot/topshot__.yml/test_topshot__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__topshot__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'topshot' as schema_\n),\ntest AS\n(\n    SELECT\n        'topshot.graphql' AS test_name\n        ,[{\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}] as parameters\n        ,ADMIN.topshot.graphql({\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.topshot.graphql({\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.topshot__", "sql": " __dbt__cte__topshot__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'topshot' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "graphql", "file_key_name": "models.topshot__", "attached_node": "model.livequery_models.topshot__"}, "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/1/block_v2/5000000/' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('covalent__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_covalent", "name": "test_covalent__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_covalent__get_status_200.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.yml", "unique_id": "test.livequery_models.test_covalent__get_status_200.bb43bb7f69", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "test_covalent__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4116943, "relation_name": "ADMIN.test_covalent.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "covalent__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.covalent__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/covalent/covalent__.yml/test_covalent__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__covalent__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'covalent' as schema_\n),\ntest AS\n(\n    SELECT\n        'covalent.get' AS test_name\n        ,['/v1/1/block_v2/5000000/' , {}] as parameters\n        ,ADMIN.covalent.get('/v1/1/block_v2/5000000/' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.covalent.get('/v1/1/block_v2/5000000/' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.covalent.get('/v1/1/block_v2/5000000/' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.covalent__", "sql": " __dbt__cte__covalent__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'covalent' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.covalent__", "attached_node": "model.livequery_models.covalent__"}, "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('stakingrewards__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_stakingrewards", "name": "test_stakingrewards__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_stakingrewards__query_status_200.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "unique_id": "test.livequery_models.test_stakingrewards__query_status_200.144a35304b", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "test_stakingrewards__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.420095, "relation_name": "ADMIN.test_stakingrewards.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stakingrewards__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.stakingrewards__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/stakingrewards/stakingrewards__ .yml/test_stakingrewards__query_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__stakingrewards__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'stakingrewards' as schema_\n),\ntest AS\n(\n    SELECT\n        'stakingrewards.query' AS test_name\n        ,[{\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,ADMIN.stakingrewards.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.stakingrewards.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.stakingrewards.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.stakingrewards__", "sql": " __dbt__cte__stakingrewards__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'stakingrewards' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "query", "file_key_name": "models.stakingrewards__", "attached_node": "model.livequery_models.stakingrewards__"}, "test.livequery_models.test_strangelove__get_status_200.0a58865924": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('strangelove__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_strangelove", "name": "test_strangelove__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_strangelove__get_status_200.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.yml", "unique_id": "test.livequery_models.test_strangelove__get_status_200.0a58865924", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "test_strangelove__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4285944, "relation_name": "ADMIN.test_strangelove.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "strangelove__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.strangelove__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/strangelove/strangelove__.yml/test_strangelove__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__strangelove__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'strangelove' as schema_\n),\ntest AS\n(\n    SELECT\n        'strangelove.get' AS test_name\n        ,['https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}] as parameters\n        ,ADMIN.strangelove.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.strangelove.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.strangelove.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.strangelove__", "sql": " __dbt__cte__strangelove__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'strangelove' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.strangelove__", "attached_node": "model.livequery_models.strangelove__"}, "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/4tsxo4vuhotaojtl/defi/chains' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('dappradar__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_dappradar", "name": "test_dappradar__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_dappradar__get_status_200.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.yml", "unique_id": "test.livequery_models.test_dappradar__get_status_200.86e3502ff3", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "test_dappradar__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.437068, "relation_name": "ADMIN.test_dappradar.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dappradar__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dappradar__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dappradar/dappradar__.yml/test_dappradar__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__dappradar__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'dappradar' as schema_\n),\ntest AS\n(\n    SELECT\n        'dappradar.get' AS test_name\n        ,['/4tsxo4vuhotaojtl/defi/chains' , {}] as parameters\n        ,ADMIN.dappradar.get('/4tsxo4vuhotaojtl/defi/chains' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.dappradar.get('/4tsxo4vuhotaojtl/defi/chains' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.dappradar.get('/4tsxo4vuhotaojtl/defi/chains' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.dappradar__", "sql": " __dbt__cte__dappradar__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'dappradar' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.dappradar__", "attached_node": "model.livequery_models.dappradar__"}, "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('footprint_utils__footprint_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_footprint_utils", "name": "test_footprint_utils__get_status_200_v2_protocol_info", "resource_type": "test", "package_name": "livequery_models", "path": "test_footprint_utils__get_status_200_v2_protocol_info.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "unique_id": "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "test_footprint_utils__get_status_200_v2_protocol_info"], "alias": "get_status_200_v2_protocol_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4455142, "relation_name": "ADMIN.test_footprint_utils.get_status_200_v2_protocol_info", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "footprint_utils__footprint_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.footprint_utils__footprint_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml/test_footprint_utils__get_status_200_v2_protocol_info.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__footprint_utils__footprint_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'footprint_utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'footprint_utils.get' AS test_name\n        ,['/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n}] as parameters\n        ,ADMIN.footprint_utils.get('/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.footprint_utils.get('/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.footprint_utils.get('/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.footprint_utils__footprint_utils", "sql": " __dbt__cte__footprint_utils__footprint_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'footprint_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.footprint_utils__footprint_utils", "attached_node": "model.livequery_models.footprint_utils__footprint_utils"}, "test.livequery_models.test_subquery__graphql_status_200.02580cea10": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('subquery__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_subquery", "name": "test_subquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_subquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.yml", "unique_id": "test.livequery_models.test_subquery__graphql_status_200.02580cea10", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "test_subquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4540274, "relation_name": "ADMIN.test_subquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "subquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.subquery__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/subquery/subquery__.yml/test_subquery__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__subquery__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'subquery' as schema_\n),\ntest AS\n(\n    SELECT\n        'subquery.graphql' AS test_name\n        ,['kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'}] as parameters\n        ,ADMIN.subquery.graphql('kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.subquery.graphql('kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.subquery.graphql('kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.subquery__", "sql": " __dbt__cte__subquery__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'subquery' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "graphql", "file_key_name": "models.subquery__", "attached_node": "model.livequery_models.subquery__"}, "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('snapshot__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_snapshot", "name": "test_snapshot__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_snapshot__query_status_200.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__ .yml", "unique_id": "test.livequery_models.test_snapshot__query_status_200.35a2cffb40", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "test_snapshot__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4624956, "relation_name": "ADMIN.test_snapshot.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snapshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.snapshot__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/snapshot/snapshot__ .yml/test_snapshot__query_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__snapshot__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'snapshot' as schema_\n),\ntest AS\n(\n    SELECT\n        'snapshot.query' AS test_name\n        ,[{\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,ADMIN.snapshot.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.snapshot.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.snapshot.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.snapshot__", "sql": " __dbt__cte__snapshot__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'snapshot' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "query", "file_key_name": "models.snapshot__", "attached_node": "model.livequery_models.snapshot__"}, "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('nftscan__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_nftscan", "name": "test_nftscan__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_nftscan__get_status_200.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.yml", "unique_id": "test.livequery_models.test_nftscan__get_status_200.33868e0f0d", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "test_nftscan__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.471012, "relation_name": "ADMIN.test_nftscan.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nftscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.nftscan__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/nftscan/nftscan__.yml/test_nftscan__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__nftscan__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'nftscan' as schema_\n),\ntest AS\n(\n    SELECT\n        'nftscan.get' AS test_name\n        ,['https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}] as parameters\n        ,ADMIN.nftscan.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.nftscan.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.nftscan.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.nftscan__", "sql": " __dbt__cte__nftscan__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'nftscan' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.nftscan__", "attached_node": "model.livequery_models.nftscan__"}, "test.livequery_models.test_cmc__get_status_200.bc3231cada": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('cmc__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_cmc", "name": "test_cmc__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_cmc__get_status_200.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.yml", "unique_id": "test.livequery_models.test_cmc__get_status_200.bc3231cada", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "test_cmc__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4794643, "relation_name": "ADMIN.test_cmc.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cmc__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.cmc__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/cmc/cmc__.yml/test_cmc__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__cmc__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'cmc' as schema_\n),\ntest AS\n(\n    SELECT\n        'cmc.get' AS test_name\n        ,['/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'}] as parameters\n        ,ADMIN.cmc.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.cmc.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.cmc.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.cmc__", "sql": " __dbt__cte__cmc__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'cmc' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.cmc__", "attached_node": "model.livequery_models.cmc__"}, "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/odds/sports' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('apilayer__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_apilayer", "name": "test_apilayer__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_apilayer__get_status_200.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.yml", "unique_id": "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "test_apilayer__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4885516, "relation_name": "ADMIN.test_apilayer.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apilayer__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.apilayer__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/apilayer/apilayer__.yml/test_apilayer__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__apilayer__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'apilayer' as schema_\n),\ntest AS\n(\n    SELECT\n        'apilayer.get' AS test_name\n        ,['/odds/sports' , {}] as parameters\n        ,ADMIN.apilayer.get('/odds/sports' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.apilayer.get('/odds/sports' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.apilayer.get('/odds/sports' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.apilayer__", "sql": " __dbt__cte__apilayer__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'apilayer' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.apilayer__", "attached_node": "model.livequery_models.apilayer__"}, "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_status_200"], "alias": "get_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.4999838, "relation_name": "ADMIN.test_helius_das.get_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_asset_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_asset' AS test_name\n        ,['mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}] as parameters\n        ,ADMIN.helius_das.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_signatures_for_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_signatures_for_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_signatures_for_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_signatures_for_asset_status_200"], "alias": "get_signatures_for_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5069664, "relation_name": "ADMIN.test_helius_das.get_signatures_for_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_signatures_for_asset_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_signatures_for_asset' AS test_name\n        ,['mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}] as parameters\n        ,ADMIN.helius_das.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_signatures_for_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_assets", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__search_assets_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__search_assets_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__search_assets_status_200"], "alias": "search_assets_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5142088, "relation_name": "ADMIN.test_helius_das.search_assets_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__search_assets_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.search_assets' AS test_name\n        ,['mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,ADMIN.helius_das.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "search_assets", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_proof", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_asset_proof_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_proof_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_proof_status_200"], "alias": "get_asset_proof_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5215993, "relation_name": "ADMIN.test_helius_das.get_asset_proof_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_asset_proof_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_asset_proof' AS test_name\n        ,['mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}] as parameters\n        ,ADMIN.helius_das.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_asset_proof", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_owner", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_owner_status_200"], "alias": "get_assets_by_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.52887, "relation_name": "ADMIN.test_helius_das.get_assets_by_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_assets_by_owner' AS test_name\n        ,['mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,ADMIN.helius_das.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_assets_by_owner", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_authority", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_authority_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_authority_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_authority_status_200"], "alias": "get_assets_by_authority_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5360754, "relation_name": "ADMIN.test_helius_das.get_assets_by_authority_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_authority_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_assets_by_authority' AS test_name\n        ,['mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,ADMIN.helius_das.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_assets_by_authority", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_creator", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_creator_status_200"], "alias": "get_assets_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5431283, "relation_name": "ADMIN.test_helius_das.get_assets_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_creator_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_assets_by_creator' AS test_name\n        ,['mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,ADMIN.helius_das.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_assets_by_creator", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_group", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_group_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_group_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_group_status_200"], "alias": "get_assets_by_group_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5504153, "relation_name": "ADMIN.test_helius_das.get_assets_by_group_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_group_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_das.get_assets_by_group' AS test_name\n        ,['mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}] as parameters\n        ,ADMIN.helius_das.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_das.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_das__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_assets_by_group", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils"}, "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "token_metadata", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_apis", "name": "test_helius_apis__token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__token_metadata_status_200"], "alias": "token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5598261, "relation_name": "ADMIN.test_helius_apis.token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__token_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_apis.token_metadata' AS test_name\n        ,['mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}] as parameters\n        ,ADMIN.helius_apis.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "token_metadata", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils"}, "test.livequery_models.test_helius_apis__balances_status_200.d668884644": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "balances", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_apis", "name": "test_helius_apis__balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__balances_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__balances_status_200.d668884644", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__balances_status_200"], "alias": "balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.567094, "relation_name": "ADMIN.test_helius_apis.balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__balances_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_apis.balances' AS test_name\n        ,['mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg'] as parameters\n        ,ADMIN.helius_apis.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "balances", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils"}, "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "parse_transactions", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_helius_apis", "name": "test_helius_apis__parse_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__parse_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__parse_transactions_status_200"], "alias": "parse_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5743198, "relation_name": "ADMIN.test_helius_apis.parse_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__parse_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n),\ntest AS\n(\n    SELECT\n        'helius_apis.parse_transactions' AS test_name\n        ,['mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]] as parameters\n        ,ADMIN.helius_apis.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.helius_apis.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_apis__helius_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils__helius_utils\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "parse_transactions", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils"}, "test.livequery_models.test_defillama__get_status_200.90864f8f89": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/protocols' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('defillama__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_defillama", "name": "test_defillama__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_defillama__get_status_200.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.yml", "unique_id": "test.livequery_models.test_defillama__get_status_200.90864f8f89", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "test_defillama__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5828824, "relation_name": "ADMIN.test_defillama.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defillama__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.defillama__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/defillama/defillama__.yml/test_defillama__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__defillama__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'defillama' as schema_\n),\ntest AS\n(\n    SELECT\n        'defillama.get' AS test_name\n        ,['/protocols' , {}] as parameters\n        ,ADMIN.defillama.get('/protocols' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.defillama.get('/protocols' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.defillama.get('/protocols' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.defillama__", "sql": " __dbt__cte__defillama__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'defillama' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.defillama__", "attached_node": "model.livequery_models.defillama__"}, "test.livequery_models.test_github_utils__octocat_status_200.3573395088": {"test_metadata": {"name": "test_udf", "kwargs": {"assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "octocat", "model": "{{ get_where_subquery(ref('github_utils__github_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_github_utils", "name": "test_github_utils__octocat_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_utils__octocat_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.yml", "unique_id": "test.livequery_models.test_github_utils__octocat_status_200.3573395088", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_utils__octocat_status_200"], "alias": "octocat_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.5920243, "relation_name": "ADMIN.test_github_utils.octocat_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_utils__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_utils__github_utils.yml/test_github_utils__octocat_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n),\ntest AS\n(\n    SELECT\n        'github_utils.octocat' AS test_name\n        ,[] as parameters\n        ,ADMIN.github_utils.octocat() AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_utils.octocat()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_utils.octocat()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "octocat", "file_key_name": "models.github_utils__github_utils", "attached_node": "model.livequery_models.github_utils__github_utils"}, "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflows", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_github_actions", "name": "test_github_actions__workflows_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflows_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflows_status_200"], "alias": "workflows_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6010344, "relation_name": "ADMIN.test_github_actions.workflows_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__workflows_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n),\ntest AS\n(\n    SELECT\n        'github_actions.workflows' AS test_name\n        ,['FlipsideCrypto', 'admin-models'] as parameters\n        ,ADMIN.github_actions.workflows('FlipsideCrypto', 'admin-models') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.workflows('FlipsideCrypto', 'admin-models')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.workflows('FlipsideCrypto', 'admin-models')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "workflows", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils"}, "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_github_actions", "name": "test_github_actions__runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__runs_status_200"], "alias": "runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6081886, "relation_name": "ADMIN.test_github_actions.runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__runs_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n),\ntest AS\n(\n    SELECT\n        'github_actions.runs' AS test_name\n        ,['FlipsideCrypto', 'admin-models', {}] as parameters\n        ,ADMIN.github_actions.runs('FlipsideCrypto', 'admin-models', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.runs('FlipsideCrypto', 'admin-models', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.runs('FlipsideCrypto', 'admin-models', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils"}, "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflow_runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_github_actions", "name": "test_github_actions__workflow_runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflow_runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflow_runs_status_200"], "alias": "workflow_runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6154158, "relation_name": "ADMIN.test_github_actions.workflow_runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__workflow_runs_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n),\ntest AS\n(\n    SELECT\n        'github_actions.workflow_runs' AS test_name\n        ,['FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}] as parameters\n        ,ADMIN.github_actions.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.github_actions.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils__github_utils as (\n-- depends_on: __dbt__cte__live\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_actions__github_utils as (\n-- depends_on: __dbt__cte__live\n-- depends_on: __dbt__cte__github_utils__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "workflow_runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils"}, "test.livequery_models.test_espn__get_status_200.b4f84cc829": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('espn__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_espn", "name": "test_espn__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_espn__get_status_200.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.yml", "unique_id": "test.livequery_models.test_espn__get_status_200.b4f84cc829", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "test_espn__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6236846, "relation_name": "ADMIN.test_espn.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "espn__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.espn__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/espn/espn__.yml/test_espn__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__espn__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'espn' as schema_\n),\ntest AS\n(\n    SELECT\n        'espn.get' AS test_name\n        ,['http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}] as parameters\n        ,ADMIN.espn.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.espn.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.espn.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.espn__", "sql": " __dbt__cte__espn__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'espn' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.espn__", "attached_node": "model.livequery_models.espn__"}, "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/block/last' , {'limit': 10}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "public_api_get", "model": "{{ get_where_subquery(ref('solscan__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_solscan_public_api_get", "name": "test_solscan_public_api_get__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_solscan_public_api_get__get_status_200.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.yml", "unique_id": "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "test_solscan_public_api_get__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6321843, "relation_name": "ADMIN.test_solscan_public_api_get.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "solscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.solscan__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/solscan/solscan__.yml/test_solscan_public_api_get__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__solscan__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'solscan' as schema_\n),\ntest AS\n(\n    SELECT\n        'solscan.public_api_get' AS test_name\n        ,['/block/last' , {'limit': 10}] as parameters\n        ,ADMIN.solscan.public_api_get('/block/last' , {'limit': 10}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.solscan.public_api_get('/block/last' , {'limit': 10})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.solscan.public_api_get('/block/last' , {'limit': 10})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.solscan__", "sql": " __dbt__cte__solscan__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'solscan' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "public_api_get", "file_key_name": "models.solscan__", "attached_node": "model.livequery_models.solscan__"}, "test.livequery_models.test_coingecko__get_status_200.047f15c956": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('coingecko__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_coingecko", "name": "test_coingecko__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_coingecko__get_status_200.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.yml", "unique_id": "test.livequery_models.test_coingecko__get_status_200.047f15c956", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "test_coingecko__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6407578, "relation_name": "ADMIN.test_coingecko.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "coingecko__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.coingecko__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/coingecko/coingecko__.yml/test_coingecko__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__coingecko__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'coingecko' as schema_\n),\ntest AS\n(\n    SELECT\n        'coingecko.get' AS test_name\n        ,['/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}] as parameters\n        ,ADMIN.coingecko.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.coingecko.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.coingecko.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.coingecko__", "sql": " __dbt__cte__coingecko__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'coingecko' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.coingecko__", "attached_node": "model.livequery_models.coingecko__"}, "test.livequery_models.test_reservoir__get_status_200.cb905ea233": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('reservoir__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_reservoir", "name": "test_reservoir__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_reservoir__get_status_200.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.yml", "unique_id": "test.livequery_models.test_reservoir__get_status_200.cb905ea233", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "test_reservoir__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6492555, "relation_name": "ADMIN.test_reservoir.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "reservoir__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.reservoir__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/reservoir/reservoir__.yml/test_reservoir__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__reservoir__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'reservoir' as schema_\n),\ntest AS\n(\n    SELECT\n        'reservoir.get' AS test_name\n        ,['/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}] as parameters\n        ,ADMIN.reservoir.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.reservoir.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.reservoir.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.reservoir__", "sql": " __dbt__cte__reservoir__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'reservoir' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.reservoir__", "attached_node": "model.livequery_models.reservoir__"}, "test.livequery_models.test_fred__get_series_status_200.51822e30ca": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_series", "model": "{{ get_where_subquery(ref('fred__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_fred", "name": "test_fred__get_series_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_fred__get_series_status_200.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.yml", "unique_id": "test.livequery_models.test_fred__get_series_status_200.51822e30ca", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "test_fred__get_series_status_200"], "alias": "get_series_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6577642, "relation_name": "ADMIN.test_fred.get_series_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fred__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.fred__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/fred/fred__.yml/test_fred__get_series_status_200.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__fred__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'fred' as schema_\n),\ntest AS\n(\n    SELECT\n        'fred.get_series' AS test_name\n        ,[{\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}] as parameters\n        ,ADMIN.fred.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.fred.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.fred.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.fred__", "sql": " __dbt__cte__fred__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'fred' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_series", "file_key_name": "models.fred__", "attached_node": "model.livequery_models.fred__"}, "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": {"test_metadata": {"name": "test_udf", "kwargs": {"args": "'a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4'\n", "assertions": ["result:status_code between 200 and 299"], "column_name": "get_chart", "model": "{{ get_where_subquery(ref('dapplooker__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_dapplooker", "name": "test_dapplooker__get_chart_status_202", "resource_type": "test", "package_name": "livequery_models", "path": "test_dapplooker__get_chart_status_202.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.yml", "unique_id": "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "test_dapplooker__get_chart_status_202"], "alias": "get_chart_status_202", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1726006844.6662266, "relation_name": "ADMIN.test_dapplooker.get_chart_status_202", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dapplooker__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dapplooker__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dapplooker/dapplooker__.yml/test_dapplooker__get_chart_status_202.sql", "compiled": true, "compiled_code": "\n    \n\nwith __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__dapplooker__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'dapplooker' as schema_\n),\ntest AS\n(\n    SELECT\n        'dapplooker.get_chart' AS test_name\n        ,['a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4'] as parameters\n        ,ADMIN.dapplooker.get_chart('a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code between 200 and 299$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT ADMIN.dapplooker.get_chart('a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code between 200 and 299\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte___utils as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__utils as (\n-- depends_on: __dbt__cte___utils\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte___live as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__live as (\n-- depends_on: __dbt__cte___utils\n-- depends_on: __dbt__cte__utils\n-- depends_on: __dbt__cte___live\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.dapplooker__", "sql": " __dbt__cte__dapplooker__ as (\n-- depends_on: __dbt__cte__live\nSELECT 'dapplooker' as schema_\n)"}], "contract": {"enforced": false, "checksum": null}, "column_name": "get_chart", "file_key_name": "models.dapplooker__", "attached_node": "model.livequery_models.dapplooker__"}}, "sources": {"source.admin_models.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.crosschain.dim_date_hours", "fqn": ["admin_models", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1726006844.6731195}, "source.admin_models.crosschain.address_tags": {"database": "crosschain_dev", "schema": "core", "name": "address_tags", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.crosschain.address_tags", "fqn": ["admin_models", "crosschain", "address_tags"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.address_tags", "created_at": 1726006844.6733866}, "source.admin_models.crosschain.dim_dates": {"database": "crosschain_dev", "schema": "core", "name": "dim_dates", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.crosschain.dim_dates", "fqn": ["admin_models", "crosschain", "dim_dates"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_dates", "created_at": 1726006844.6736212}, "source.admin_models.github_actions.workflows": {"database": "ADMIN", "schema": "github_actions", "name": "workflows", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.github_actions.workflows", "fqn": ["admin_models", "github_actions", "workflows"], "source_name": "github_actions", "source_description": "", "loader": "", "identifier": "workflows", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ADMIN.github_actions.workflows", "created_at": 1726006844.673846}, "source.admin_models.studio.active_databases": {"database": "bi_analytics", "schema": "silver_studio", "name": "active_databases", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.studio.active_databases", "fqn": ["admin_models", "studio", "active_databases"], "source_name": "studio", "source_description": "", "loader": "", "identifier": "active_databases", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bi_analytics.silver_studio.active_databases", "created_at": 1726006844.6740665}, "source.admin_models.studio.active_schemas": {"database": "bi_analytics", "schema": "silver_studio", "name": "active_schemas", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.studio.active_schemas", "fqn": ["admin_models", "studio", "active_schemas"], "source_name": "studio", "source_description": "", "loader": "", "identifier": "active_schemas", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bi_analytics.silver_studio.active_schemas", "created_at": 1726006844.674287}, "source.admin_models.studio.objects": {"database": "bi_analytics", "schema": "silver_studio", "name": "objects", "resource_type": "source", "package_name": "admin_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.admin_models.studio.objects", "fqn": ["admin_models", "studio", "objects"], "source_name": "studio", "source_description": "", "loader": "", "identifier": "objects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bi_analytics.silver_studio.objects", "created_at": 1726006844.674506}, "source.livequery_models.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_date_hours", "fqn": ["livequery_models", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1726006844.674745}, "source.livequery_models.crosschain.dim_contracts": {"database": "crosschain_dev", "schema": "core", "name": "dim_contracts", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_contracts", "fqn": ["livequery_models", "crosschain", "dim_contracts"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_contracts", "created_at": 1726006844.6749823}, "source.livequery_models.crosschain.dim_evm_event_abis": {"database": "crosschain_dev", "schema": "core", "name": "dim_evm_event_abis", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_evm_event_abis", "fqn": ["livequery_models", "crosschain", "dim_evm_event_abis"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_evm_event_abis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_evm_event_abis", "created_at": 1726006844.675218}, "source.livequery_models.ethereum_core.fact_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "fact_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.fact_event_logs", "fqn": ["livequery_models", "ethereum_core", "fact_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.fact_event_logs", "created_at": 1726006844.6754534}, "source.livequery_models.ethereum_core.ez_decoded_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "ez_decoded_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.ez_decoded_event_logs", "fqn": ["livequery_models", "ethereum_core", "ez_decoded_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_decoded_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.ez_decoded_event_logs", "created_at": 1726006844.6756861}}, "macros": {"macro.admin_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "admin_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.admin_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.949988, "supported_languages": null}, "macro.admin_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "admin_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.admin_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9520652, "supported_languages": null}, "macro.admin_models.call_sp_grant_share_permissions": {"name": "call_sp_grant_share_permissions", "resource_type": "macro", "package_name": "admin_models", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.admin_models.call_sp_grant_share_permissions", "macro_sql": "{% macro call_sp_grant_share_permissions(args) %}\n    {% set sql %}\n        call datashare.sp_grant_share_permissions({{ args }})\n    {% endset %}\n    {% if execute and not target.database.upper().endswith(\"_DEV\") %}\n        {% set results = run_query(sql) %}\n        {% do log(sql, True) %}\n        {% do results.print_table(max_column_width=255) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9537346, "supported_languages": null}, "macro.admin_models.call_sp_grant_share_permissions_v2": {"name": "call_sp_grant_share_permissions_v2", "resource_type": "macro", "package_name": "admin_models", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.admin_models.call_sp_grant_share_permissions_v2", "macro_sql": "{% macro call_sp_grant_share_permissions_v2() %}\n    {% set sql %}\n        call {{ target.database }}.datashare.sp_share_build_and_grant_permissions()\n    {% endset %}\n    {% if execute and not target.database.upper().endswith(\"_DEV\") %}\n        {% set results = run_query(sql) %}\n        {% do log(sql, True) %}\n        {% do results.print_table(max_column_width=255) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.954872, "supported_languages": null}, "macro.admin_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "admin_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.admin_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9557848, "supported_languages": null}, "macro.admin_models.create_sp_grant_share_permissions_string_timestamp": {"name": "create_sp_grant_share_permissions_string_timestamp", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare.sql", "original_file_path": "macros/datashare.sql", "unique_id": "macro.admin_models.create_sp_grant_share_permissions_string_timestamp", "macro_sql": "{% macro create_sp_grant_share_permissions_string_timestamp() %}\nCREATE OR REPLACE PROCEDURE datashare.sp_grant_share_permissions(db STRING, updated_since TIMESTAMP_NTZ)\nRETURNS TABLE (SQL STRING)\nLANGUAGE SQL\n{% if target.database == 'ADMIN_DEV' %}\nEXECUTE AS CALLER\n{% else %}\nEXECUTE AS OWNER\n{% endif %}\nAS\n$$\nDECLARE\n  ddl_views VARCHAR DEFAULT :db || '._datashare._create_gold';\n  target_schema VARCHAR DEFAULT :db || '.information_schema.schemata';\n  all_grants VARCHAR DEFAULT '';\nBEGIN\n    IF (DB = 'UTILS') THEN \n        ddl_views := :db || '._datashare._create_udfs';\n    END IF;\n\n    WITH target_schema AS (\n        SELECT\n            array_agg(schema_name) AS schema_name\n        FROM identifier(:target_schema)\n    ),\n    schema_grants AS (\n        SELECT\n            regexp_substr_all(ddl,'(__SOURCE__).([\\\\w]+)', 1, 1,'i', 2) AS extracted\n            , array_distinct(split(upper(array_to_string(extracted, ';')), ';')) AS distinct_schemata\n            , array_intersection(\n                array_append(distinct_schemata, '_DATASHARE'),\n                (SELECT schema_name FROM target_schema)\n            ) AS valid_schemata,\n             regexp_replace(\n                array_to_string(valid_schemata, ';'),\n                '([\\\\w]+)',\n                '\\nGRANT USAGE ON SCHEMA {DB}.\\\\1 TO SHARE {SHARE};' ||\n                '\\nGRANT SELECT ON ALL TABLES IN SCHEMA {DB}.\\\\1 TO SHARE {SHARE}'\n            ) || ';\\n' AS ddl\n        FROM\n            identifier(:ddl_views)\n        WHERE\n            ddl_created_at >= :updated_since\n        ORDER BY\n            ddl_created_at DESC\n        LIMIT\n            1\n    )\n    ,add_suffix as (\n    SELECT concat_ws(' ',\n        'CREATE SHARE IF NOT EXISTS', :db || suffix, ';\\n',\n        'GRANT USAGE ON DATABASE',:db, 'TO SHARE', :db || suffix, ';\\n',\n        replace(\n            replace(\n                s.ddl,\n                '{DB}',\n                :db),\n            '{SHARE}',\n            :db || suffix)\n        ) AS permissions\n    FROM schema_grants s\n    CROSS JOIN (SELECT suffix from {{ target.database }}.datashare.share_suffix where is_active = true)\n    )\n    SELECT listagg(permissions,'\\n') as all_permissions\n            INTO :all_grants\n            FROM add_suffix;\n\n    IF (len(all_grants) > 0) THEN\n      EXECUTE IMMEDIATE 'BEGIN\\n' || :all_grants || 'END\\n';\n    END IF;\n    LET rs RESULTSET := (\n        SELECT value\n        FROM TABLE(split_to_table(:all_grants,'\\n'))\n        WHERE value NOT IN  ('', ' ')\n      );\n  RETURN TABLE(rs);\nEND;\n$$\n;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.957818, "supported_languages": null}, "macro.admin_models.create_sp_grant_share_permissions_timestamp": {"name": "create_sp_grant_share_permissions_timestamp", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare.sql", "original_file_path": "macros/datashare.sql", "unique_id": "macro.admin_models.create_sp_grant_share_permissions_timestamp", "macro_sql": "{% macro create_sp_grant_share_permissions_timestamp() %}\nCREATE OR REPLACE PROCEDURE datashare.sp_grant_share_permissions(updated_since TIMESTAMP_NTZ)\nRETURNS TABLE (TABLE_CATALOG STRING)\nLANGUAGE SQL\n{% if target.database == 'ADMIN_DEV' %}\nEXECUTE AS CALLER\n{% else %}\nEXECUTE AS OWNER\n{% endif %}\nAS\n$$\nDECLARE\n    cur CURSOR FOR SELECT\n        table_catalog\n    FROM snowflake.account_usage.tables\n    WHERE table_name in ('_CREATE_GOLD','_CREATE_UDFS')\n    and table_schema = '_DATASHARE'\n    AND TABLE_CATALOG NOT LIKE '%_DEV'\n    AND TABLE_CATALOG NOT IN ('PRODUCT_ANALYTICS');\nBEGIN\n    create or replace temporary table results as\n    SELECT ''::STRING AS db\n    FROM dual\n    LIMIT 0;\n    FOR cur_row IN cur DO\n        LET db VARCHAR := cur_row.table_catalog;\n        CALL {{ target.database }}.datashare.sp_grant_share_permissions(:db, :updated_since);\n        LET cnt VARCHAR := (SELECT COUNT(*) FROM TABLE(result_scan(last_query_id())));\n        IF (cnt > 0) THEN\n            INSERT INTO RESULTS (db) VALUES (:db);\n        END IF;\n    END FOR;\n    LET rs RESULTSET := (SELECT * FROM results ORDER BY db);\n    RETURN TABLE(rs);\nEND;\n$$\n;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9583642, "supported_languages": null}, "macro.admin_models.create_sp_grant_share_permissions": {"name": "create_sp_grant_share_permissions", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare.sql", "original_file_path": "macros/datashare.sql", "unique_id": "macro.admin_models.create_sp_grant_share_permissions", "macro_sql": "{% macro create_sp_grant_share_permissions() %}\nCREATE OR REPLACE PROCEDURE datashare.sp_grant_share_permissions()\nRETURNS TABLE (SQL STRING)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\n$$\nDECLARE\n  results RESULTSET;\nBEGIN\n  results := (CALL {{ target.database }}.datashare.sp_grant_share_permissions('2000-01-01'::TIMESTAMP_NTZ) );\n  RETURN TABLE(results);\nEND;\n$$\n;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9586446, "supported_languages": null}, "macro.admin_models.create_sp_grant_share_permissions_string": {"name": "create_sp_grant_share_permissions_string", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare.sql", "original_file_path": "macros/datashare.sql", "unique_id": "macro.admin_models.create_sp_grant_share_permissions_string", "macro_sql": "{% macro create_sp_grant_share_permissions_string() %}\nCREATE OR REPLACE PROCEDURE datashare.sp_grant_share_permissions(db STRING)\nRETURNS TABLE (SQL STRING)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\n$$\nDECLARE\n  results RESULTSET;\nBEGIN\n  results := (CALL {{ target.database }}.datashare.sp_grant_share_permissions(:db, '2000-01-01'::TIMESTAMP_NTZ) );\n  RETURN TABLE(results);\nEND;\n$$\n;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9589086, "supported_languages": null}, "macro.admin_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "admin_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.admin_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n{% set clone_query %}\ncall admin._internal.create_prod_clone('admin', 'admin_dev', 'internal_dev');\n{% endset %}\n\n{% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9594162, "supported_languages": null}, "macro.admin_models.create_sp_share_build_and_grant_permissions_db": {"name": "create_sp_share_build_and_grant_permissions_db", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare_v2.sql", "original_file_path": "macros/datashare_v2.sql", "unique_id": "macro.admin_models.create_sp_share_build_and_grant_permissions_db", "macro_sql": "{% macro create_sp_share_build_and_grant_permissions_db() %}\n    CREATE\n    OR REPLACE PROCEDURE datashare.sp_share_build_and_grant_permissions(\n        db STRING\n    ) returns TABLE (\n        SQL STRING\n    ) LANGUAGE SQL EXECUTE AS caller AS $$\nDECLARE\n    all_grants VARCHAR DEFAULT '';\nBEGIN\n    USE schema datashare;\nshow grants TO role velocity_ethereum;\nCREATE\n    OR REPLACE temporary TABLE datashare.grants AS\nSELECT\n    *\nFROM\n    TABLE(RESULT_SCAN(LAST_QUERY_ID()));\nCREATE\n    OR REPLACE temporary TABLE dbs AS\nSELECT\n    \"name\" AS db_name,\n    'create share if not exists ' || db_name || ';' AS share_cmd,\n    'alter share ' || db_name || ' set secure_objects_only = false;' AS non_sec_vw_cmd,\n    'grant usage on database ' || db_name || ' to share ' || db_name || ';' AS db_usage_cmd\nFROM\n    grants\nWHERE\n    \"granted_on\" = 'DATABASE'\n    AND db_name IN (\n        SELECT\n            database\n        FROM\n            {{ source(\n                'studio',\n                'active_databases'\n            ) }}\n    )\n    AND db_name NOT IN (\n        'CROSSCHAIN',\n        'EXTERNAL'\n    );\nCREATE\n    OR REPLACE temporary TABLE schs AS\nSELECT\n    SPLIT_PART(\n        \"name\",\n        '.',\n        1\n    ) || '.' || SPLIT_PART(\n        \"name\",\n        '.',\n        2\n    ) schema_name,\n    b.db_name,\n    'grant usage on schema ' || schema_name || ' to share ' || db_name || ';' AS schema_usage_cmd,\n    'grant select on all tables in schema ' || schema_name || ' to share ' || db_name || ';' AS table_select_cmd\nFROM\n    grants A\n    JOIN dbs b\n    ON SPLIT_PART(\n        \"name\",\n        '.',\n        1\n    ) = b.db_name\n    JOIN {{ source(\n        'studio',\n        'active_schemas'\n    ) }} C\n    ON b.db_name = C.database\n    AND schema_name = C.database || '.' || C.schema\nWHERE\n    \"granted_on\" = 'SCHEMA';\nCREATE\n    OR REPLACE temporary TABLE vws AS\nSELECT\n    \"name\" AS table_name,\n    b.schema_name,\n    b.db_name,\n    'grant select on view ' || \"name\" || ' to share ' || b.db_name || ';' AS view_select_cmd\nFROM\n    grants A\n    JOIN schs b\n    ON SPLIT_PART(\n        \"name\",\n        '.',\n        1\n    ) || '.' || SPLIT_PART(\n        \"name\",\n        '.',\n        2\n    ) = b.schema_name\n    JOIN (\n        SELECT\n            database,\n            schema,\n            OBJECT\n        FROM\n            {{ source(\n                'studio',\n                'objects'\n            ) }}\n        WHERE\n            active\n    ) C\n    ON b.db_name = C.database\n    AND b.schema_name = C.database || '.' || C.schema\n    AND table_name = C.database || '.' || C.schema || '.' || C.object\nWHERE\n    \"granted_on\" IN ('VIEW');\nWITH share_grants AS (\n        SELECT\n            share_cmd AS cmd,\n            db_name\n        FROM\n            dbs\n        UNION ALL\n        SELECT\n            non_sec_vw_cmd,\n            db_name\n        FROM\n            dbs\n        UNION ALL\n        SELECT\n            db_usage_cmd,\n            db_name\n        FROM\n            dbs\n        UNION ALL\n        SELECT\n            schema_usage_cmd,\n            db_name\n        FROM\n            schs\n        UNION ALL\n        SELECT\n            table_select_cmd,\n            db_name\n        FROM\n            schs\n        UNION ALL\n        SELECT\n            view_select_cmd,\n            db_name\n        FROM\n            vws\n    )\nSELECT\n    LISTAGG(\n        cmd,\n        '\\n'\n    ) AS all_permissions INTO :all_grants\nFROM\n    share_grants\nWHERE\n    (LOWER(db_name) = LOWER(:db)\n    OR LOWER(:db) = 'all');\nIF (len(all_grants) > 0) THEN EXECUTE IMMEDIATE 'BEGIN\\n' || :all_grants || 'END\\n';END IF;\nlet rs resultset:= (\n        SELECT\n            VALUE\n        FROM\n            TABLE(SPLIT_TO_TABLE(:all_grants, '\\n'))\n        WHERE\n            VALUE NOT IN (\n                '',\n                ' '\n            )\n    );\nRETURN TABLE(rs);\nEND;$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9614027, "supported_languages": null}, "macro.admin_models.create_sp_share_build_and_grant_permissions": {"name": "create_sp_share_build_and_grant_permissions", "resource_type": "macro", "package_name": "admin_models", "path": "macros/datashare_v2.sql", "original_file_path": "macros/datashare_v2.sql", "unique_id": "macro.admin_models.create_sp_share_build_and_grant_permissions", "macro_sql": "{% macro create_sp_share_build_and_grant_permissions() %}\n    CREATE\n    OR REPLACE PROCEDURE datashare.sp_share_build_and_grant_permissions() returns TABLE (\n        table_catalog STRING\n    ) LANGUAGE SQL EXECUTE AS caller AS $$\nDECLARE\n    results resultset;\nBEGIN\n    results:= (\n        CALL {{ target.database }}.datashare.sp_share_build_and_grant_permissions('all')\n    );\nRETURN TABLE(results);\nEND;$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.96169, "supported_languages": null}, "macro.admin_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "admin_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.admin_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% set sql %}\n        {% if target.database == 'admin' %}\n            CREATE SCHEMA IF NOT EXISTS _internal;\n            {{ sp_create_prod_clone('_internal') }};\n\n        {% endif %}\n\n        CREATE SCHEMA IF NOT EXISTS datashare;\n        {{ create_sp_grant_share_permissions_string_timestamp() }}\n        {{ create_sp_grant_share_permissions_timestamp() }}\n        {{ create_sp_grant_share_permissions() }}\n        {{ create_sp_grant_share_permissions_string() }}\n        {{create_sp_share_build_and_grant_permissions_db() }}\n        {{create_sp_share_build_and_grant_permissions() }}\n\n        CREATE SCHEMA IF NOT EXISTS streamline;\n        {{create_sp_create_streamline_users_roles_dev() }}\n        {{create_sp_create_streamline_users_roles_prod() }}\n        {{create_sp_streamline_dev_permissions() }}\n        {{create_sp_streamline_prod_permissions() }}\n\n    {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.admin_models.sp_create_prod_clone", "macro.admin_models.create_sp_grant_share_permissions_string_timestamp", "macro.admin_models.create_sp_grant_share_permissions_timestamp", "macro.admin_models.create_sp_grant_share_permissions", "macro.admin_models.create_sp_grant_share_permissions_string", "macro.admin_models.create_sp_share_build_and_grant_permissions_db", "macro.admin_models.create_sp_share_build_and_grant_permissions", "macro.admin_models.create_sp_create_streamline_users_roles_dev", "macro.admin_models.create_sp_create_streamline_users_roles_prod", "macro.admin_models.create_sp_streamline_dev_permissions", "macro.admin_models.create_sp_streamline_prod_permissions", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9636664, "supported_languages": null}, "macro.admin_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "admin_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.admin_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.964757, "supported_languages": null}, "macro.admin_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "admin_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.admin_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.965461, "supported_languages": null}, "macro.admin_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "admin_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.admin_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.966219, "supported_languages": null}, "macro.admin_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.admin_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9664555, "supported_languages": null}, "macro.admin_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.admin_models.create_tag_if_missing", "macro.admin_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.985707, "supported_languages": null}, "macro.admin_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.987179, "supported_languages": null}, "macro.admin_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.989769, "supported_languages": null}, "macro.admin_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9923234, "supported_languages": null}, "macro.admin_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9932616, "supported_languages": null}, "macro.admin_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.admin_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.994234, "supported_languages": null}, "macro.admin_models.sequence_gaps": {"name": "sequence_gaps", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.admin_models.sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n        WHERE\n            block_timestamp::date <= current_date - 1\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.996335, "supported_languages": null}, "macro.admin_models.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "unique_id": "macro.admin_models.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_id,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_id,\n            COUNT(\n                DISTINCT tx_id\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_id\n    )\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_name.block_id,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.996959, "supported_languages": null}, "macro.admin_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "admin_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.admin_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9979427, "supported_languages": null}, "macro.admin_models.create_sp_streamline_dev_permissions": {"name": "create_sp_streamline_dev_permissions", "resource_type": "macro", "package_name": "admin_models", "path": "macros/streamline/sp_streamline_dev_permissions.sql", "original_file_path": "macros/streamline/sp_streamline_dev_permissions.sql", "unique_id": "macro.admin_models.create_sp_streamline_dev_permissions", "macro_sql": "{% macro create_sp_streamline_dev_permissions() -%}\nCREATE OR REPLACE PROCEDURE streamline.streamline_dev_permissions(dev_db_name STRING)\nRETURNS BOOLEAN\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\n$$\nBEGIN\n    BEGIN TRANSACTION;\n\n    -- Create databases and schemas\n    EXECUTE IMMEDIATE 'CREATE DATABASE IF NOT EXISTS ' || :dev_db_name;\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :dev_db_name || '.BRONZE';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :dev_db_name || '.SILVER';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :dev_db_name || '.STREAMLINE';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :dev_db_name || '._INTERNAL';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS STREAMLINE.' || :dev_db_name;\n\n    -- Grant ownership on schemas, tables, views, and functions\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ' || :dev_db_name || ' TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL FUNCTIONS IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL VIEWS IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL TABLES IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n\n    -- Grant ownership on future schemas, tables, views, and functions\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE SCHEMAS IN DATABASE ' || :dev_db_name || ' TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE VIEWS IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA ' || :dev_db_name || '.STREAMLINE TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n\n    -- Grant ownership on the database\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON DATABASE ' || :dev_db_name || ' TO ROLE INTERNAL_DEV COPY CURRENT GRANTS';\n\n    COMMIT;\n    RETURN TRUE;\nEND;\n$$;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006839.9984796, "supported_languages": null}, "macro.admin_models.create_api_integration": {"name": "create_api_integration", "resource_type": "macro", "package_name": "admin_models", "path": "macros/streamline/create_api_integration.sql", "original_file_path": "macros/streamline/create_api_integration.sql", "unique_id": "macro.admin_models.create_api_integration", "macro_sql": "{% macro create_api_integration(project_name, snowflake_role_arn, endpoint_urls) %}\n  \n  {% set allowed_prefixes = [] %}\n  {% for url in endpoint_urls %}\n    {% do allowed_prefixes.append(\"'\" ~ url ~ \"'\") %}\n  {% endfor %}\n  {% set allowed_prefixes = allowed_prefixes|join(\", \") %}\n  {% set sql %}\n    CREATE OR REPLACE API INTEGRATION {{ project_name ~ \"_v2\" }} \n    API_PROVIDER = aws_api_gateway \n    API_AWS_ROLE_ARN = '{{ snowflake_role_arn }}' \n    API_ALLOWED_PREFIXES = ({{ allowed_prefixes }})\n    ENABLED=true\n  {% endset %}\n\n  {% do log(sql, info=true)%}\n\n  {% do run_query(sql) %}\n  {% do log(\"API Integration \" ~ integration_name ~ \" successfully created\", true) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.000486, "supported_languages": null}, "macro.admin_models.create_sp_create_streamline_users_roles_dev": {"name": "create_sp_create_streamline_users_roles_dev", "resource_type": "macro", "package_name": "admin_models", "path": "macros/streamline/sp_create_streamline_users_roles_dev.sql", "original_file_path": "macros/streamline/sp_create_streamline_users_roles_dev.sql", "unique_id": "macro.admin_models.create_sp_create_streamline_users_roles_dev", "macro_sql": "{% macro create_sp_create_streamline_users_roles_dev() -%}\nCREATE\nOR REPLACE PROCEDURE streamline.create_streamline_users_roles_dev(\n    prod_db_name STRING,\n    aws_lambda_dev_user_password STRING,\n    dbt_cloud_dev_user_password STRING\n)\nRETURNS STRING\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS $$\nBEGIN\n    -- Use EXECUTE IMMEDIATE for DDL statements within a stored procedure\n    EXECUTE IMMEDIATE 'CREATE USER IF NOT EXISTS aws_lambda_' || :prod_db_name || '_API_DEV PASSWORD = ''' || :aws_lambda_dev_user_password || '''';\n\n    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS aws_lambda_' || :prod_db_name || '_API_DEV';\n\n    RETURN 'Success: DEV users and roles created or updated successfully.';\nEND;$$;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0008276, "supported_languages": null}, "macro.admin_models.create_sp_streamline_prod_permissions": {"name": "create_sp_streamline_prod_permissions", "resource_type": "macro", "package_name": "admin_models", "path": "macros/streamline/sp_streamline_prod_permissions.sql", "original_file_path": "macros/streamline/sp_streamline_prod_permissions.sql", "unique_id": "macro.admin_models.create_sp_streamline_prod_permissions", "macro_sql": "{% macro create_sp_streamline_prod_permissions() -%}\nCREATE OR REPLACE PROCEDURE streamline.streamline_prod_permissions(prod_db_name STRING)\nRETURNS BOOLEAN\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\n$$\nBEGIN\n    BEGIN TRANSACTION;\n\n    EXECUTE IMMEDIATE 'CREATE DATABASE IF NOT EXISTS ' || :prod_db_name;\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :prod_db_name || '.BRONZE';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :prod_db_name || '.SILVER';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :prod_db_name || '.STREAMLINE';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || :prod_db_name || '._INTERNAL';\n    EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS STREAMLINE.' || :prod_db_name;\n\n\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ' || :prod_db_name || ' TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL FUNCTIONS IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL VIEWS IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ALL TABLES IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE SCHEMAS IN DATABASE ' || :prod_db_name || ' TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name;\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE VIEWS IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name;\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA ' || :prod_db_name || '.STREAMLINE TO ROLE DBT_CLOUD_' || :prod_db_name;\n\n    EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON DATABASE ' || :prod_db_name || ' TO ROLE DBT_CLOUD_' || :prod_db_name || ' COPY CURRENT GRANTS';\n\n    COMMIT;\n    RETURN TRUE;\nEND;\n$$;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0013561, "supported_languages": null}, "macro.admin_models.create_sp_create_streamline_users_roles_prod": {"name": "create_sp_create_streamline_users_roles_prod", "resource_type": "macro", "package_name": "admin_models", "path": "macros/streamline/sp_create_streamline_users_roles_prod.sql", "original_file_path": "macros/streamline/sp_create_streamline_users_roles_prod.sql", "unique_id": "macro.admin_models.create_sp_create_streamline_users_roles_prod", "macro_sql": "{% macro create_sp_create_streamline_users_roles_prod() -%}\nCREATE\nOR REPLACE PROCEDURE streamline.create_streamline_users_roles_prod(\n    prod_db_name STRING,\n    aws_lambda_prod_user_password STRING,\n    dbt_cloud_prod_user_password STRING\n)\nRETURNS STRING\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS $$\nBEGIN\n    -- Use EXECUTE IMMEDIATE for DDL statements within a stored procedure\n    EXECUTE IMMEDIATE 'CREATE USER IF NOT EXISTS aws_lambda_' || :prod_db_name || '_API PASSWORD = ''' || :aws_lambda_prod_user_password || '''';\n\n    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS aws_lambda_' || :prod_db_name || '_API';\n\n    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS DBT_CLOUD_' || :prod_db_name;\n\n    EXECUTE IMMEDIATE 'CREATE USER IF NOT EXISTS dbt_cloud_' || :prod_db_name || ' PASSWORD = ''' || :dbt_cloud_prod_user_password || ''' DEFAULT_ROLE = dbt_cloud_' || :prod_db_name || ' MUST_CHANGE_PASSWORD = FALSE';\n\n    RETURN 'Success: PROD users and roles created or updated successfully.';\nEND;$$;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0017147, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0023265, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0025923, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.024796, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0264437, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0271, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0293748, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0297267, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0315206, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0328426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0340297, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0347812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0352376, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0358334, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0363262, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.037557, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0379827, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.03837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0394974, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0399244, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.041132, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.042945, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0434515, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0440304, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0456605, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.046095, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0463984, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0468028, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0473247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0477529, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0481367, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0484135, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0487304, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0491045, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.049583, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0519135, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0526607, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0532744, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.054091, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0548787, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0592396, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0599658, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0612235, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0661314, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0741897, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0745907, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.079394, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0800378, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.080253, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0808835, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0811362, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0818734, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0822718, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0834384, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0844426, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0850782, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0853994, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0859902, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0863173, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.086866, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0871263, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.08768, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0879295, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0887096, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0891643, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.090005, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0907235, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0913393, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0916507, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0921888, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0926156, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0931253, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.093306, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.093806, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0939856, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0946007, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0949194, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0954752, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0957265, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0964756, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0968783, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0985608, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0989308, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0993145, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.0996761, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1000543, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1004395, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1009417, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1013675, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.101752, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1021135, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1024966, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1028416, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.103221, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1035662, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.104212, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1045647, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1051404, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1055286, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1062505, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1068814, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1072443, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1078746, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1082027, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1088645, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1091936, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1097357, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.110039, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.110995, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1113968, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1120484, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1128993, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.113801, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.114588, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1151907, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.116152, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.116805, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1175056, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1206372, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1220515, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.122749, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1255941, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1285167, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.13044, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1309974, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1318996, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1322265, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1326282, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1335826, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1362858, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1365745, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.136991, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.137255, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1380672, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1385102, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.138753, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1392949, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1397493, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1403086, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1407604, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1413, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1428733, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1434288, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1440122, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1445785, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.147293, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1519456, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1523707, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1529157, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1535988, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.154174, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.154928, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1553626, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.155871, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1563146, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1567037, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1571872, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.157851, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.158443, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.159742, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1602917, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1606362, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.161103, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1619616, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1630716, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1639628, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1643815, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1648107, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1650822, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1654825, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.165665, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1660628, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1664617, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.167522, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1679747, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1683166, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1716812, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1720684, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.172842, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1733563, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.17383, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.17426, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1761868, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.177017, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1774464, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1782682, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1788006, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.180204, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1808295, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.182699, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.183911, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.184339, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.184834, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1852384, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1858711, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1870503, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1893945, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1900191, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1904583, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.190821, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.19125, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.191827, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1923282, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1930504, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1934855, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.193874, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1946359, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1952097, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1955943, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1960285, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1985188, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.1988876, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2008715, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2018578, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2032485, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2043447, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2045238, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2051985, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2058964, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2064235, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.207632, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2098649, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2103395, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2106833, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2110236, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2113633, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2120821, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2128394, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2136974, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.215417, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2157037, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2170115, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2174084, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2177315, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2207675, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2216818, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2224998, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2240312, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2244973, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.225528, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2271636, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2282536, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2287571, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2291858, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.235161, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.236586, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.238107, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2386665, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2391117, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2398086, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2402434, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2409644, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2414024, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2420268, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2424629, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.242821, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2434733, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2515507, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2555888, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2562022, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2586884, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.259321, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2608616, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2684872, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.27139, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.274276, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2763002, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2789762, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.280324, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2819402, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2824972, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2842207, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2947187, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2953954, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2959282, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2991412, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.2999685, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3003948, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3008344, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3018389, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3075185, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3084548, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.309193, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3099396, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3108387, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3153505, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.32205, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3241966, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.32476, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.32591, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3263552, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3266678, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3270056, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3272831, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3276627, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3279366, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3290884, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3295214, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3325489, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3392365, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3446915, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3453834, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.345782, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3459945, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3463354, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.346604, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3470953, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3491235, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3495746, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3501754, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3511965, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.352021, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3526688, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3586946, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3592117, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3597472, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3614762, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3618572, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3622615, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3655574, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3687797, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.379781, "supported_languages": ["sql"]}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3808475, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3814034, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3820798, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.382728, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3844757, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3864179, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3918135, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.393182, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n    All items in references_to_replace are replaced with __NEW__,\n    while all remaining references to the database are replaced with __SOURCE__.\n\n    references_to_replace: a list of references to replace with __NEW__\n    ddl: the DDL statement to be replaced\n\n#}\n    {% set re = modules.re %}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ key ~ \"\\\\b\", re.IGNORECASE) -%}\n        {%- set replacement  =  \"__NEW__\" ~ \".\" ~ key -%}\n        {% set outer.replaced = original.sub(replacement, outer.replaced) %}\n    {%- endfor -%}\n    {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ \"\\\\b\", re.IGNORECASE) -%}\n    {% set outer.replaced = original.sub(\"__SOURCE__.\", outer.replaced) %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3950918, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name]) -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.3977036, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4018784, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" copy grants AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4031272, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4050972, "supported_languages": null}, "macro.fsc_utils.generate_datashare_udf_ddl": {"name": "generate_datashare_udf_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_udf_ddl", "macro_sql": "{% macro generate_datashare_udf_ddl() %}\n{#\n    generate UDF DDL for datashare\n\n    Return: UDF DDL for datashare\n #}\n    {%- set schema = \"UTILS\" -%}\n    {%- set udfs = fromyaml(fsc_utils.udf_configs(schema)) -%}\n    {%- set combined_ddl = [] -%}\n    {%- for udf in udfs -%}\n        {% set name_ = udf [\"name\"] %}\n        {% set signature = udf [\"signature\"] %}\n        {% set return_type = udf [\"return_type\"] %}\n        {% set sql_ = udf [\"sql\"] %}\n        {% set options = udf [\"options\"] %}\n        {% set api_integration = udf [\"api_integration\"] %}\n        {% set func_type = udf [\"func_type\"] %}\n        {% set exclude_from_datashare = udf.get(\"exclude_from_datashare\",False) %}\n        {% if not exclude_from_datashare %}\n            {%- set udf_ddl = fsc_utils.create_sql_function(\n                name_ = name_,\n                signature = signature,\n                return_type = return_type,\n                sql_ = sql_,\n                options = options,\n                api_integration = api_integration,\n                func_type = func_type\n            ).replace(\"\\\\\",\"\\\\\\\\\").replace(\"'\",\"\\\\'\") -%}\n            {%- do combined_ddl.append(udf_ddl) -%}       \n        {% endif %} \n    {% endfor %}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {%- do combined_ddl.insert(1, \"USE DATABASE __NEW__;\") -%}\n    {%- do combined_ddl.insert(2, \"CREATE SCHEMA IF NOT EXISTS \"~schema~\";\") -%}\n    {{- \"'BEGIN','\" ~ (combined_ddl | join(\"','\")) ~ \"','END'\" -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_sql_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4086304, "supported_languages": null}, "macro.fsc_utils.dynamic_range_predicate": {"name": "dynamic_range_predicate", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dynamic_range_predicate.sql", "original_file_path": "macros/dynamic_range_predicate.sql", "unique_id": "macro.fsc_utils.dynamic_range_predicate", "macro_sql": "{% macro dynamic_range_predicate(source, predicate_column, output_alias=\"\") -%}\n    {% set supported_data_types = [\"INTEGER\",\"DATE\"] %}\n    {% set predicate_column_data_type_query %}\n        SELECT typeof({{predicate_column}}::variant)\n        FROM {{ source }}\n        WHERE {{predicate_column}} IS NOT NULL\n        LIMIT 1;\n    {% endset %}\n    {% set predicate_column_data_type_result = run_query(predicate_column_data_type_query) %}\n    {% if predicate_column_data_type_result.rows|length == 0 %}\n        {{ return('1=1') }}\n    {% endif %}\n    {% set predicate_column_data_type = predicate_column_data_type_result.columns[0].values()[0] %}\n    \n\n    {% if predicate_column_data_type not in supported_data_types %}\n        {{ exceptions.raise_compiler_error(\"Data type of \"~ predicate_column_data_type ~\" is not supported, use one of \"~ supported_data_types ~\" column instead\") }}\n    {% endif %}\n\n    {% set get_start_end_query %}\n        SELECT\n            MIN(\n                {{ predicate_column }}\n            ) AS full_range_start,\n            MAX(\n                {{ predicate_column }}\n            ) AS full_range_end\n        FROM\n            {{ source }}\n    {% endset %}\n    {% set start_end_results = run_query(get_start_end_query).columns %}\n    {% set start_preciate_value = start_end_results[0].values()[0] %}\n    {% set end_predicate_value = start_end_results[1].values()[0] %}\n\n    {% set get_limits_query %}\n        WITH block_range AS (\n            {% if predicate_column_data_type == \"INTEGER\" %}\n                SELECT \n                    SEQ4() + {{ start_preciate_value }} as predicate_value\n                FROM \n                    TABLE(GENERATOR(rowcount => {{ end_predicate_value - start_preciate_value }}+1))\n            {% else %}\n                SELECT\n                    date_day as predicate_value\n                FROM\n                    crosschain.core.dim_dates\n                WHERE\n                    date_day BETWEEN '{{ start_preciate_value }}' AND '{{ end_predicate_value }}'\n            {% endif %}\n        ),\n        partition_block_counts AS (\n            SELECT\n                b.predicate_value,\n                COUNT(r.{{ predicate_column }}) AS count_in_window\n            FROM\n                block_range b\n                LEFT OUTER JOIN {{ source }}\n                r\n                ON r.{{ predicate_column }} = b.predicate_value\n            GROUP BY\n                1\n        ),\n        range_groupings AS (\n            SELECT\n                predicate_value,\n                count_in_window,\n                conditional_change_event(\n                    count_in_window > 0\n                ) over (\n                    ORDER BY\n                        predicate_value\n                ) AS group_val\n            FROM\n                partition_block_counts\n        ),\n        contiguous_ranges AS (\n            SELECT\n                MIN(predicate_value) AS start_value,\n                MAX(predicate_value) AS end_value\n            FROM\n                range_groupings\n            WHERE\n                count_in_window > 0\n            GROUP BY\n                group_val\n        ),\n        between_stmts AS (\n            SELECT\n                CONCAT(\n                    '{{ output_alias~\".\" if output_alias else \"\" }}',\n                    '{{ predicate_column }} between \\'',\n                    start_value,\n                    '\\' and \\'',\n                    end_value,\n                    '\\''\n                ) AS b\n            FROM\n                contiguous_ranges\n        )\n        SELECT\n            CONCAT('(', LISTAGG(b, ' OR '), ')')\n        FROM\n            between_stmts \n    {% endset %}\n    \n    {% set between_stmts = run_query(get_limits_query).columns[0].values()[0] %}\n\n    {% if between_stmts != '()' %}\n        /* in case empty update array */\n        {% set predicate_override = between_stmts %}\n    {% else %}\n        {% set predicate_override = '1=1' %}\n        /* need to have something or it will error since it expects at least 1 predicate */\n    {% endif %}\n\n    {{ return(predicate_override) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.418237, "supported_languages": null}, "macro.fsc_utils.create_gha_tasks": {"name": "create_gha_tasks", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.create_gha_tasks", "macro_sql": "{% macro create_gha_tasks() %}\n    {% set query %}\n        SELECT\n            task_name,\n            workflow_name,\n            workflow_schedule\n        FROM\n            {{ ref('github_actions__tasks') }}\n    {% endset %}\n\n    {% set results = run_query(query) %}\n\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    {% set prod_db = target.database.lower().replace('_dev', '') %}\n\n    {% for result in results_list %}\n        {% set task_name = result[0] %}\n        {% set workflow_name = result[1] %}\n        {% set workflow_schedule = result[2] %}\n\n        {% set sql %}\n        EXECUTE IMMEDIATE \n        'CREATE OR REPLACE TASK github_actions.{{ task_name }} \n        WAREHOUSE = DBT_CLOUD\n        SCHEDULE = \\'USING CRON {{ workflow_schedule }} UTC\\'\n        COMMENT = \\'Task to trigger {{ workflow_name }}.yml workflow according to {{ workflow_schedule }}\\' AS \n        DECLARE\n            rs resultset;\n            output string;\n        BEGIN\n            rs := (SELECT github_actions.workflow_dispatches(\\'FlipsideCrypto\\', \\'{{ prod_db }}-models\\', \\'{{ workflow_name }}.yml\\', NULL):status_code::int AS status_code);\n            SELECT LISTAGG($1, \\';\\') INTO :output FROM TABLE(result_scan(LAST_QUERY_ID())) LIMIT 1;\n            CALL SYSTEM$SET_RETURN_VALUE(:output);\n        END;'\n        {% endset %}\n\n        {% do run_query(sql) %}\n\n        {% if var(\"START_GHA_TASKS\") %}\n            {% if target.database.lower() == prod_db %}\n                {% set sql %}\n                    ALTER TASK github_actions.{{ task_name }} RESUME;\n                {% endset %}\n                {% do run_query(sql) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4302802, "supported_languages": null}, "macro.fsc_utils.gha_tasks_view": {"name": "gha_tasks_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_tasks_view", "macro_sql": "{% macro gha_tasks_view() %}\n    SELECT\n        workflow_name,\n        concat_ws(\n            '_',\n            'TRIGGER',\n            UPPER(workflow_name)\n        ) AS task_name,\n        workflow_schedule\n    FROM\n        {{ source(\n            'github_actions',\n            'workflows'\n        ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4306424, "supported_languages": null}, "macro.fsc_utils.gha_task_history_view": {"name": "gha_task_history_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_history_view", "macro_sql": "{% macro gha_task_history_view() %}\n    {% set query %}\n        SELECT\n            DISTINCT task_name\n        FROM\n            {{ ref('github_actions__tasks') }}\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            ({% for result in results_list %}\n            SELECT\n                NAME AS task_name, \n                completed_time, \n                return_value, \n                state, \n                database_name, \n                schema_name, \n                scheduled_time, \n                query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => '{{ result[0]}}')) {% if not loop.last %}\n                UNION ALL\n                {% endif %}\n            {% endfor %}) AS subquery\n        WHERE\n            database_name = '{{ target.database }}' \n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4321322, "supported_languages": null}, "macro.fsc_utils.gha_task_schedule_view": {"name": "gha_task_schedule_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_schedule_view", "macro_sql": "{% macro gha_task_schedule_view() %}\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            {{ ref('github_actions__tasks') }} AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\n    SELECT\n        task_name,\n        workflow_name,\n        workflow_schedule,\n        scheduled_time\n    FROM\n        base\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4324853, "supported_languages": null}, "macro.fsc_utils.gha_task_performance_view": {"name": "gha_task_performance_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_performance_view", "macro_sql": "{% macro gha_task_performance_view() %}\n    SELECT\n        s.task_name,\n        s.workflow_name,\n        s.scheduled_time,\n        h.return_value\n    FROM\n        {{ ref('github_actions__task_schedule') }}\n        s\n        LEFT JOIN {{ ref('github_actions__task_history') }}\n        h\n        ON s.task_name = h.task_name\n        AND TO_TIMESTAMP_NTZ(DATE_TRUNC('minute', s.scheduled_time)) = TO_TIMESTAMP_NTZ(DATE_TRUNC('minute', h.scheduled_time))\n        AND try_to_number(h.return_value) between 200 and 299\n        AND h.state = 'SUCCEEDED'\n    ORDER BY\n        task_name,\n        scheduled_time\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4328952, "supported_languages": null}, "macro.fsc_utils.gha_task_current_status_view": {"name": "gha_task_current_status_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_current_status_view", "macro_sql": "{% macro gha_task_current_status_view() %}\n    WITH base AS (\n        SELECT \n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM {{ ref('github_actions__task_performance') }}\n        QUALIFY row_number() OVER (PARTITION BY task_name ORDER BY scheduled_time DESC) <= 2\n    )\n    SELECT \n        task_name,\n        workflow_name,\n        MAX(scheduled_time) AS recent_scheduled_time,\n        MIN(scheduled_time) AS prior_scheduled_time,\n        SUM(IFF(return_value = 204, 1, 0)) AS successes,\n        successes > 0 AS pipeline_active\n    FROM base \n    GROUP BY task_name, workflow_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4332137, "supported_languages": null}, "macro.fsc_utils.alter_gha_task": {"name": "alter_gha_task", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.alter_gha_task", "macro_sql": "{% macro alter_gha_task(task_name, task_action) %}\n    {% set sql %}\n        EXECUTE IMMEDIATE \n        'ALTER TASK IF EXISTS github_actions.{{ task_name }} {{ task_action }};'\n    {% endset %}\n\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4337585, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4346242, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4352849, "supported_languages": null}, "macro.fsc_utils.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.fsc_utils.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates[0] == \"dynamic_range_predicate\" %}\n        -- run some queries to dynamically determine the min + max of this 'date_column' in the new data\n        {% set predicate_override = fsc_utils.dynamic_range_predicate(source, incremental_predicates[1], \"DBT_INTERNAL_DEST\") %}\n    {% endif %}\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.dynamic_range_predicate", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4369514, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4375296, "supported_languages": null}, "macro.fsc_utils.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4417534, "supported_languages": null}, "macro.fsc_utils.test_tx_block_count": {"name": "test_tx_block_count", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_tx_block_count", "macro_sql": "{% test tx_block_count(\n        model,\n        column_name\n) %}\n\nSELECT \n    {{ column_name }}, \n    COUNT(DISTINCT block_number) AS num_blocks\nFROM\n    {{ model }}\nGROUP BY {{ column_name }}\nHAVING num_blocks > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4421535, "supported_languages": null}, "macro.fsc_utils.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_full') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4425626, "supported_languages": null}, "macro.fsc_utils.recent_tx_gaps": {"name": "recent_tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.recent_tx_gaps", "macro_sql": "{% macro recent_tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_recent') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4429765, "supported_languages": null}, "macro.fsc_utils.test_recent_decoded_logs_match": {"name": "test_recent_decoded_logs_match", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_recent_decoded_logs_match", "macro_sql": "{% test recent_decoded_logs_match(\n    model\n) %}\nSELECT\n    block_number,\n    _log_id\nFROM\n    {{ model }}\n    d\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            {{ ref('silver__logs') }}\n            l\n        WHERE\n            d.block_number = l.block_number\n            AND d.tx_hash = l.tx_hash\n            AND d.event_index = l.event_index\n            AND d.contract_address = l.contract_address\n            AND d.topics [0] :: STRING = l.topics [0] :: STRING\n    ) \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4433477, "supported_languages": null}, "macro.fsc_utils.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    A.abi AS abi,\n    OBJECT_CONSTRUCT(\n        'topics',\n        l.topics,\n        'data',\n        l.data,\n        'address',\n        l.contract_address\n    ) AS DATA\nFROM\n    {{ ref(\"silver__logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__complete_event_abis\") }} A\n    ON A.parent_contract_address = l.contract_address\n    AND A.event_signature = l.topics[0]:: STRING\n    AND l.block_number BETWEEN A.start_block\n    AND A.end_block\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.445456, "supported_languages": null}, "macro.fsc_utils.block_reorg": {"name": "block_reorg", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.block_reorg", "macro_sql": "{% macro block_reorg(reorg_model_list, hours) %}\n  {% set models = reorg_model_list.split(\",\") %}\n  {% for model in models %}\n  {% set sql %}\n    DELETE FROM\n        {{ ref(model) }} t\n    WHERE\n        t._inserted_timestamp > DATEADD(\n            'hour',\n            -{{ hours }},\n            SYSDATE()\n        )\n        AND NOT EXISTS (\n            SELECT\n                1\n            FROM\n                {{ ref('silver__transactions') }}\n                s\n            WHERE s.block_number = t.block_number\n                AND s.tx_hash = t.tx_hash\n        );\n    {% endset %}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4466183, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}\n\n- name: {{ schema }}.udf_decimal_adjust\n  signature:\n    - [input, string]\n    - [adjustment, int]\n  return_type: VARCHAR\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'custom_divide'\n  sql: |\n    {{ fsc_utils.create_udf_decimal_adjust() | indent(4) }}\n\n- name: {{ schema }}.udf_cron_to_prior_timestamps\n  signature:\n    - [workflow_name, STRING]\n    - [workflow_schedule, STRING]\n  return_type: TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('croniter')\n    HANDLER = 'TimestampGenerator'\n  sql: |\n    {{ fsc_utils.create_udf_cron_to_prior_timestamps() | indent(4) }}\n\n- name: {{ schema }}.udf_transform_logs\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ fsc_utils.create_udf_transform_logs() | indent(4) }}\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ fsc_utils.create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [input, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_algorand\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_algorand'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_algorand() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_tezos\n  signature:\n    - [input, STRING]\n    - [prefix, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_tezos'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_tezos() | indent(4) }}\n\n- name: {{ schema }}.udf_detect_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n  return_type: ARRAY\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Detect overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas')\n    HANDLER = 'main'\n  sql: |\n    {{ fsc_utils.create_udf_detect_overflowed_responses() | indent(4) }}\n\n- name: {{ schema }}.udtf_flatten_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n    - [index_vals, ARRAY]\n  return_type: |\n    table(\n          index_vals ARRAY,\n          block_number NUMBER,\n          metadata OBJECT,\n          seq NUMBER,\n          key STRING,\n          path STRING,\n          index NUMBER,\n          value_ VARIANT\n        )\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Flatten rows from a JSON file with overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas', 'simplejson', 'numpy')\n    HANDLER = 'FlattenRows'\n  sql: |\n    {{ fsc_utils.create_udtf_flatten_overflowed_responses() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256", "macro.fsc_utils.create_udf_decimal_adjust", "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro.fsc_utils.create_udf_transform_logs", "macro.fsc_utils.create_udf_base58_to_hex", "macro.fsc_utils.create_udf_hex_to_base58", "macro.fsc_utils.create_udf_hex_to_bech32", "macro.fsc_utils.create_udf_hex_to_algorand", "macro.fsc_utils.create_udf_hex_to_tezos", "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro.fsc_utils.create_udtf_flatten_overflowed_responses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4576654, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.462763, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4634812, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.464311, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4655218, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4675367, "supported_languages": null}, "macro.fsc_utils.if_data_call_function_v2": {"name": "if_data_call_function_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_function_v2", "macro_sql": "{% macro if_data_call_function_v2(\n        func,\n        target,\n        params\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" with params: \\n\" ~ params | tojson(indent=2) ~  \"\\n on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}( parse_json($${{ params | tojson }}$$) )\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4689167, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}    \n    {{ log(\"Creating udf udf_bulk_rest_api for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(json variant) returns variant api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}udf_bulk_rest_api'\n    {% endif %}\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.473009, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.485556, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4858036, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4859924, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4862516, "supported_languages": null}, "macro.fsc_utils.create_udf_decimal_adjust": {"name": "create_udf_decimal_adjust", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_decimal_adjust", "macro_sql": "{% macro create_udf_decimal_adjust() %}\n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4864788, "supported_languages": null}, "macro.fsc_utils.create_udf_cron_to_prior_timestamps": {"name": "create_udf_cron_to_prior_timestamps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro_sql": "{% macro create_udf_cron_to_prior_timestamps() %}\nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4867024, "supported_languages": null}, "macro.fsc_utils.create_udf_transform_logs": {"name": "create_udf_transform_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_transform_logs", "macro_sql": "{% macro create_udf_transform_logs() %}\n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4870222, "supported_languages": null}, "macro.fsc_utils.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(input):\n    if input is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    for char in input:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    return '0x' + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4872355, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4874613, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(input, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4877703, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_algorand": {"name": "create_udf_hex_to_algorand", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_algorand", "macro_sql": "{% macro create_udf_hex_to_algorand() %}\n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new('sha512_256', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode('utf-8').rstrip('=')\n\n    return algorand_address\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4879777, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_tezos": {"name": "create_udf_hex_to_tezos", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_tezos", "macro_sql": "{% macro create_udf_hex_to_tezos() %}\n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return 'Invalid length'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        'tz1': '06a19f',  # Ed25519\n        'tz2': '06a1a1',  # Secp256k1\n        'tz3': '06a1a4'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return 'Invalid prefix: Must be tz1, tz2, or tz3'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4882548, "supported_languages": null}, "macro.fsc_utils.create_udf_detect_overflowed_responses": {"name": "create_udf_detect_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro_sql": "{% macro create_udf_detect_overflowed_responses() %}\n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, 'rb') as f:\n        df = pd.read_json(f, lines=True, compression='gzip')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4884856, "supported_languages": null}, "macro.fsc_utils.create_udtf_flatten_overflowed_responses": {"name": "create_udtf_flatten_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udtf_flatten_overflowed_responses", "macro_sql": "{% macro create_udtf_flatten_overflowed_responses() %}\n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, 'rb') as f:\n            df = pd.read_json(f, lines=True, compression='gzip')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4890816, "supported_languages": null}, "macro.livequery_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.livequery_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4911425, "supported_languages": null}, "macro.livequery_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.492041, "supported_languages": null}, "macro.livequery_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call livequery._internal.create_prod_clone(\n        'livequery',\n        'livequery_dev',\n        'livequery_dev_owner'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4925892, "supported_languages": null}, "macro.livequery_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.livequery_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'LIVEQUERY' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.493368, "supported_languages": null}, "macro.livequery_models.apply_grants_by_schema": {"name": "apply_grants_by_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_by_schema", "macro_sql": "{% macro apply_grants_by_schema(schema) %}\n{#\n    Generates SQL to grant permissions to roles for a given schema.\n    This gets run automatically when a deployment is made to prod.\n\n    This can be manually run to grant permissions to a new schema:\n    `dbt run-operation apply_grants_by_schema --args '{\"schema\": \"my_schema\"}'`\n #}\n    {%- set outer = namespace(sql=\"\") -%}\n    {% for role in fromyaml(var(\"ROLES\")) %}\n            {% set sql -%}\n                {% if schema.startswith(\"_\") %}\n                    REVOKE USAGE ON SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                    REVOKE USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                {%- else -%}\n                    GRANT USAGE ON SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n\n                    GRANT SELECT ON ALL TABLES IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT SELECT ON ALL VIEWS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                {%- endif -%}\n            {%- endset -%}\n            {%- set outer.sql = outer.sql ~ sql -%}\n    {%- endfor -%}\n    {{ outer.sql }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4967954, "supported_languages": null}, "macro.livequery_models.apply_grants_to_all_schema": {"name": "apply_grants_to_all_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_to_all_schema", "macro_sql": "{% macro apply_grants_to_all_schema() %}\n{#\n    Run SQL to grant permissions to roles for all schemas.\n    This is useful for when a new role is created and needs to be granted access to all schemas.\n    This is not used in the normal grant process.\n\n    `dbt run-operation apply_grants_to_all_schema`\n #}\n    {% if execute and target.name == \"prod\" %}\n        {% set sql_get_schema %}\n            SELECT SCHEMA_NAME\n            FROM {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n            WHERE SCHEMA_NAME NOT IN ('PUBLIC', 'INFORMATION_SCHEMA')\n        {%- endset -%}\n        {%- set results = run_query(sql_get_schema) -%}\n        {% set sql_apply_grants %}\n            {%- for schema in results.columns[0].values() -%}\n                {{ apply_grants_by_schema(schema) }}\n            {%- endfor -%}\n        {%- endset -%}\n        {% do log(sql_apply_grants, true) %}\n        {% do run_query(sql_apply_grants) %}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4981894, "supported_languages": null}, "macro.livequery_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.4990664, "supported_languages": null}, "macro.livequery_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.499732, "supported_languages": null}, "macro.livequery_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.livequery_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value('BLOCKCHAIN_NAME','LIVEQUERY') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.500119, "supported_languages": null}, "macro.livequery_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.livequery_models.create_tag_if_missing", "macro.livequery_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.519673, "supported_languages": null}, "macro.livequery_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5209832, "supported_languages": null}, "macro.livequery_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5235167, "supported_languages": null}, "macro.livequery_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5260727, "supported_languages": null}, "macro.livequery_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5270143, "supported_languages": null}, "macro.livequery_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5280018, "supported_languages": null}, "macro.livequery_models.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.sql", "original_file_path": "macros/core/functions.sql", "unique_id": "macro.livequery_models.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5286078, "supported_languages": null}, "macro.livequery_models.config_core_secrets": {"name": "config_core_secrets", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/secrets.yaml.sql", "original_file_path": "macros/core/secrets.yaml.sql", "unique_id": "macro.livequery_models.config_core_secrets", "macro_sql": "{% macro config_core_secrets(schema=\"secrets\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Registers a secret with the given request ID and key. $$\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_get_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns the secret value for the given secret name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME)\n        ):data::OBJECT\n\n- name: {{ schema }}.udf_get_secrets\n  signature: []\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns all secrets for the current user. $$\n  sql: |\n    SELECT\n      {{ schema }}.udf_get_secret('')\n\n- name: {{ schema }}.udf_create_secret\n  signature:\n    - [name, STRING]\n    - [secret, OBJECT]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Creates a new secret with the given name and value. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        SECRET\n        ):status_code::INTEGER\n\n- name: {{ schema }}.udf_delete_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Deletes the secret with the given name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        'DELETE',\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        {},\n        {},\n        ''\n        ):status_code::INTEGER\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5304143, "supported_languages": null}, "macro.livequery_models.config_core_utils": {"name": "config_core_utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/utils.yaml.sql", "original_file_path": "macros/core/utils.yaml.sql", "unique_id": "macro.livequery_models.config_core_utils", "macro_sql": "{% macro config_core_utils(schema=\"utils\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_udf_hex_to_int_with_encoding() | indent(4) }}\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ create_udf_evm_text_signature() | indent(4) }}\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ create_udf_keccak256() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n- name: {{ schema }}.udf_int_to_hex\n  signature:\n    - [int, INTEGER]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_object_to_url_query_string\n  signature:\n    - [object, OBJECT]\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: SELECT utils.udf_urlencode(object, FALSE)\n\n- name: {{ schema }}.udf_evm_transform_log\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ python_udf_evm_transform_log() | indent(4) }}\n\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, ARRAY]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [hex, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_int_to_binary\n  signature:\n    - [num, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'int_to_binary'\n  sql: |\n    {{ create_udf_int_to_binary() | indent(4) }}\n\n- name: {{ schema }}.udf_binary_to_int\n  signature:\n    - [binary, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'binary_to_int'\n  sql: |\n    {{ create_udf_binary_to_int() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro.livequery_models.create_udf_evm_text_signature", "macro.livequery_models.create_udf_keccak256", "macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.python_object_to_url_query_string", "macro.livequery_models.python_udf_evm_transform_log", "macro.livequery_models.create_udf_base58_to_hex", "macro.livequery_models.create_udf_hex_to_base58", "macro.livequery_models.create_udf_hex_to_bech32", "macro.livequery_models.create_udf_int_to_binary", "macro.livequery_models.create_udf_binary_to_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5426145, "supported_languages": null}, "macro.livequery_models.config_core__utils": {"name": "config_core__utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_utils.yaml.sql", "original_file_path": "macros/core/_utils.yaml.sql", "unique_id": "macro.livequery_models.config_core__utils", "macro_sql": "{% macro config_core__utils(schema=\"_utils\") %}\n\n- name: {{ schema }}.udf_introspect\n  signature:\n    - [echo, STRING]\n  func_type: SECURE EXTERNAL\n  return_type: TEXT\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  sql: introspect\n\n- name: {{ schema }}.udf_user_tier\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n- name: {{ schema }}.udf_provider\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n- name: {{ schema }}.udf_whoami\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [user_id, STRING]\n    - [key, STRING]\n  return_type: OBJECT\n  func_type: SECURE EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: secret/register\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5439034, "supported_languages": null}, "macro.livequery_models.config_core_live": {"name": "config_core_live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/live.yaml.sql", "original_file_path": "macros/core/live.yaml.sql", "unique_id": "macro.livequery_models.config_core_live", "macro_sql": "{% macro config_core_live(schema=\"live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          {},\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          {},\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_rpc\n  signature:\n    - [blockchain, STRING]\n    - [network, STRING]\n    - [method, STRING]\n    - [parameters, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n    COMMENT = $$Executes an JSON RPC call on a blockchain.$$\n  sql: |\n    {{ sql_live_rpc_call(\"method\", \"parameters\", \"blockchain\", \"network\") | indent(4) -}}\n\n- name: {{ schema }}.udf_allow_list\n  signature: []\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns a list of allowed domains.$$\n  sql: allowed\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sql_live_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5461557, "supported_languages": null}, "macro.livequery_models.config_core__live": {"name": "config_core__live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_live.yaml.sql", "original_file_path": "macros/core/_live.yaml.sql", "unique_id": "macro.livequery_models.config_core__live", "macro_sql": "{% macro config_core__live(schema=\"_live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5466826, "supported_languages": null}, "macro.livequery_models.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5490804, "supported_languages": null}, "macro.livequery_models.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5493367, "supported_languages": null}, "macro.livequery_models.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.549529, "supported_languages": null}, "macro.livequery_models.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5497794, "supported_languages": null}, "macro.livequery_models.python_object_to_url_query_string": {"name": "python_object_to_url_query_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_object_to_url_query_string", "macro_sql": "{% macro python_object_to_url_query_string() %}\nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    {# return type(query) #}\n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5499856, "supported_languages": null}, "macro.livequery_models.python_udf_evm_transform_log": {"name": "python_udf_evm_transform_log", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_evm_transform_log", "macro_sql": "{% macro python_udf_evm_transform_log(schema) %}\nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5502307, "supported_languages": null}, "macro.livequery_models.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    return '0x' + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5504427, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5506551, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.550949, "supported_languages": null}, "macro.livequery_models.create_udf_int_to_binary": {"name": "create_udf_int_to_binary", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_int_to_binary", "macro_sql": "{% macro create_udf_int_to_binary() %}\n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5511713, "supported_languages": null}, "macro.livequery_models.create_udf_binary_to_int": {"name": "create_udf_binary_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_binary_to_int", "macro_sql": "{% macro create_udf_binary_to_int() %}\n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5513716, "supported_languages": null}, "macro.livequery_models.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5564628, "supported_languages": null}, "macro.livequery_models.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5568693, "supported_languages": null}, "macro.livequery_models.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for p in params -%}\n        {%- set name = p.0 -%}\n        {%- set data_type = p.1 -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {%- endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5580108, "supported_languages": null}, "macro.livequery_models.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.compile_signature", "macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5592067, "supported_languages": null}, "macro.livequery_models.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] if config [\"return_type\"] is string else config [\"return_type\"][0] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5614493, "supported_languages": null}, "macro.livequery_models.crud_udfs": {"name": "crud_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs", "macro_sql": "{% macro crud_udfs(config_func, schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema\n\n    config_func: function that returns a list of udf configs\n    drop_: whether to drop or create the udfs\n #}\n    {% set udfs = fromyaml(config_func())%}\n    {%- for udf in udfs -%}\n        {% if udf[\"name\"].split(\".\") | first == schema %}\n            CREATE SCHEMA IF NOT EXISTS {{ schema }};\n            {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5624864, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_chain": {"name": "crud_udfs_by_chain", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_chain", "macro_sql": "{% macro crud_udfs_by_chain(config_func, blockchain, network, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    blockchain: blockchain name\n    network: network name\n    drop_: whether to drop or create the udfs\n #}\n  {% set schema = blockchain if not network else blockchain ~ \"_\" ~ network %}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%-  set configs = fromyaml(config_func(blockchain, network)) if network else fromyaml(config_func(schema, blockchain)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5637264, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_marketplace": {"name": "crud_udfs_by_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_marketplace", "macro_sql": "{% macro crud_udfs_by_marketplace(config_func, schema, utility_schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    schema: schema name\n    utility_schema: utility schema name\n #}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%- set configs = fromyaml(config_func(schema, utility_schema)) if utility_schema else fromyaml(config_func(schema, schema)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.564759, "supported_languages": null}, "macro.livequery_models.crud_marketplace_udfs": {"name": "crud_marketplace_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_marketplace_udfs", "macro_sql": "{% macro crud_marketplace_udfs(config_func, schemaName, base_api_schema_name, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema and api\n\n    config_func: function that returns a list of udf configs\n    schemaName: the target schema to build the udfs\n    base_api_schema_name: the schema that contains base api functions\n    drop_: whether to drop or create the udfs\n #}\n  {%-  set udfs = fromyaml(config_func(schemaName, base_api_schema_name)) -%}\n  {%- for udf in udfs -%}\n    {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n  {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5655293, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_core": {"name": "ephemeral_deploy_core", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_core", "macro_sql": "{% macro ephemeral_deploy_core(config) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {{- crud_udfs(config, this.schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(this.schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.567387, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy": {"name": "ephemeral_deploy", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy", "macro_sql": "{% macro ephemeral_deploy(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set blockchain = this.schema -%}\n    {%- set network = this.identifier -%}\n    {% set schema = blockchain ~ \"_\" ~ network %}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_chain(config, blockchain, network, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5697105, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_marketplace": {"name": "ephemeral_deploy_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_marketplace", "macro_sql": "{% macro ephemeral_deploy_marketplace(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set schema = this.schema -%}\n    {%- set utility_schema = this.identifier -%}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_marketplace(config, schema, utility_schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_marketplace", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5718162, "supported_languages": null}, "macro.livequery_models.create_udf_introspect": {"name": "create_udf_introspect", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/streamline_udfs.sql", "original_file_path": "macros/livequery/streamline_udfs.sql", "unique_id": "macro.livequery_models.create_udf_introspect", "macro_sql": "{% macro create_udf_introspect(\n        drop_ = False\n    ) %}\n    {% set name_ = 'silver.udf_introspect' %}\n    {% set signature = [('json', 'variant')] %}\n    {% set return_type = 'text' %}\n    {% set sql_ = construct_api_route(\"introspect\") %}\n    {% if not drop_ %}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            api_integration = var(\"API_INTEGRATION\")\n        ) }}\n    {% else %}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route", "macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.573667, "supported_languages": null}, "macro.livequery_models.sql_live_rpc_call": {"name": "sql_live_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/utils.sql", "original_file_path": "macros/livequery/utils.sql", "unique_id": "macro.livequery_models.sql_live_rpc_call", "macro_sql": "{% macro sql_live_rpc_call(method, params, blockchain, network) %}\n{#\n    Helper macro to call a JSON RPC method on a live node.\n\n    Parameters:\n        method (string): The JSON RPC method to call.\n        params (string): The JSON RPC parameters to pass to the method.\n        blockchain (string): The blockchain to call the method on.\n        network (string): The network to call the method on.\n    Returns:\n        string: The SQL to call the method.\n #}\n    WITH result as (\n        SELECT\n            live.udf_api(\n                '{endpoint}'\n                ,utils.udf_json_rpc_call({{ method }}, {{ params }})\n                ,concat_ws('/', 'integration', _utils.udf_provider(), {{ blockchain }}, {{ network }})\n            )::VARIANT:data AS data\n    )\n    SELECT\n        COALESCE(data:result, {'error':data:error})\n    FROM result\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5743918, "supported_languages": null}, "macro.livequery_models.create_aws_ethereum_api": {"name": "create_aws_ethereum_api", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/api_integrations.sql", "original_file_path": "macros/livequery/api_integrations.sql", "unique_id": "macro.livequery_models.create_aws_ethereum_api", "macro_sql": "{% macro create_aws_ethereum_api() %}\n    {% if target.name == \"prod\" %}\n        {% set sql %}\n        CREATE api integration IF NOT EXISTS aws_ethereum_api api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::661245089684:role/snowflake-api-ethereum' api_allowed_prefixes = (\n            'https://e03pt6v501.execute-api.us-east-1.amazonaws.com/prod/',\n            'https://mryeusnrob.execute-api.us-east-1.amazonaws.com/dev/'\n        ) enabled = TRUE;\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.5751834, "supported_languages": null}, "macro.livequery_models.config_evm_high_level_abstractions": {"name": "config_evm_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_evm_high_level_abstractions", "macro_sql": "{% macro config_evm_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate the high level abstractions for an EVM\n    blockchain.\n #}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n    - |\n        The table has the following columns:\n        * `blockchain` - The blockchain\n        * `network` - The network\n        * `wallet_address` - The wallet address\n        * `symbol` - The symbol of the native asset\n        * `raw_balance` - The unadjusted native asset balance\n        * `balance` - The adjusted native asset balance\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance at the latest block for a given address.$$\n  sql: |\n    {{ evm_latest_native_balance_string(schema,  blockchain, network) | indent(4) -}}\n  \n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances at the latest block for given addresses.$$\n  sql: |\n    {{ evm_latest_native_balance_array(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance at the latest block for a given address and token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_ss(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for a given address and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and a single token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_as(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance for a given address and token address at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and token address at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, The addresses to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and a given token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_asi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_sai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_saa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aaa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance for a given address at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for a given address at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_si(schema,  blockchain, network) | indent(4) -}}\n  \n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$RReturns the latest decoded events emitted by a contract in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by a contract within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.* $$\n  sql: |\n    {{ evm_latest_contract_events_decoded_ai(schema,  blockchain, network) | indent(4) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.evm_latest_native_balance_string", "macro.livequery_models.evm_latest_native_balance_array", "macro.livequery_models.evm_latest_token_balance_ss", "macro.livequery_models.evm_latest_token_balance_sa", "macro.livequery_models.evm_latest_token_balance_as", "macro.livequery_models.evm_latest_token_balance_aa", "macro.livequery_models.evm_historical_token_balance_ssi", "macro.livequery_models.evm_historical_token_balance_ssa", "macro.livequery_models.evm_historical_token_balance_asi", "macro.livequery_models.evm_historical_token_balance_sai", "macro.livequery_models.evm_historical_token_balance_saa", "macro.livequery_models.evm_historical_token_balance_aai", "macro.livequery_models.evm_historical_token_balance_aaa", "macro.livequery_models.evm_historical_native_balance_si", "macro.livequery_models.evm_historical_native_balance_sa", "macro.livequery_models.evm_historical_native_balance_ai", "macro.livequery_models.evm_historical_native_balance_aa", "macro.livequery_models.evm_latest_contract_events_s", "macro.livequery_models.evm_latest_contract_events_si", "macro.livequery_models.evm_latest_contract_events_a", "macro.livequery_models.evm_latest_contract_events_ai", "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro.livequery_models.evm_latest_contract_events_decoded_ai"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.6086876, "supported_languages": null}, "macro.livequery_models.config_eth_high_level_abstractions": {"name": "config_eth_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_eth_high_level_abstractions", "macro_sql": "{% macro config_eth_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate high level abstractions for Ethereum mainnet only.\n#}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_all_contract_events\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the events emitted by a contract from a specific block to the latest block.$$\n  sql: |\n    {{ evm_contract_events(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_all_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the decoded events emitted by a contract from a specific block to the latest block. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$  \n  sql: |\n    {{ evm_contract_events_decoded(schema,  blockchain, network) | indent(4) -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.evm_contract_events", "macro.livequery_models.evm_contract_events_decoded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.6097422, "supported_languages": null}, "macro.livequery_models.config_evm_rpc_primitives": {"name": "config_evm_rpc_primitives", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_primitives.yaml.sql", "original_file_path": "macros/evm/evm_primitives.yaml.sql", "unique_id": "macro.livequery_models.config_evm_rpc_primitives", "macro_sql": "{%- macro config_evm_rpc_primitives(blockchain, network) -%}\n{#-\n    Generates a set of UDFs that call the Ethereum JSON RPC API\n\n    - rpc: Executes an RPC call on the {{ blockchain }} blockchain\n    - eth_call: Executes a new message call immediately without creating a transaction on the block chain\n    - eth_getLogs: Returns an array of all logs matching filter with given address\n    - eth_getBalance: Returns the balance of the account of given address\n\n -#}\n{% set schema = blockchain ~ \"_\" ~ network -%}\n\n- name: {{ schema -}}.udf_rpc\n  signature:\n    - [method, STRING, RPC method to call]\n    - [parameters, VARIANT, Parameters to pass to the RPC method]\n  return_type: [VARIANT, The return value of the RPC method]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes an RPC call on the {{ blockchain }} blockchain.$$\n  sql: |\n    SELECT live.udf_rpc('{{ blockchain }}', '{{ network }}', method, parameters)\n\n- name: {{ schema -}}.udf_rpc_eth_call\n  signature:\n    - [transaction, OBJECT, The transaction object]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The return value of the executed contract code]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes a new message call immediately without creating a transaction on the block chain.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_call', [transaction, block_or_tag])\n\n- name: {{ schema -}}.udf_rpc_eth_get_logs\n  signature:\n    - [filter, OBJECT, The filter object]\n  return_type: [VARIANT, An array of all logs matching filter with given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns an array of all logs matching filter with given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getLogs', [filter])\n\n- name: {{ schema -}}.udf_rpc_eth_get_balance\n  signature:\n    - [address, STRING, The address to get the balance of]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the account of given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getBalance', [address, block_or_tag])\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the latest block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{ schema -}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))),'latest')::string)\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n    - [block_number, INTEGER, The block number to retrieve the balance at]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the given block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.6128526, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_string": {"name": "evm_latest_native_balance_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_string", "macro_sql": "{% macro evm_latest_native_balance_string(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8030083, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_array": {"name": "evm_latest_native_balance_array", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_array", "macro_sql": "{% macro evm_latest_native_balance_array(schema, blockchain, network) %}\nWITH address_inputs AS (\n    SELECT wallets AS wallet_array\n),\nflat_addresses AS (\n    SELECT lower(value::string) AS wallet_address\n    FROM address_inputs a,\n    LATERAL FLATTEN(input => a.wallet_array)\n),\nnode_call AS (\n    SELECT wallet_address,\n    {{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string AS hex_balance\n    FROM flat_addresses\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(hex_balance) AS raw_balance,\n    (raw_balance / POW(10,18))::FLOAT AS balance\nFROM node_call\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8036487, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_ss": {"name": "evm_latest_token_balance_ss", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_ss", "macro_sql": "{% macro evm_latest_token_balance_ss(schema, blockchain, network) %}\nWITH inputs AS (\n     SELECT\n        lower(token) AS token_address,\n        lower(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n),\nnode_call AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM node_call\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8042626, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_sa": {"name": "evm_latest_token_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_sa", "macro_sql": "{% macro evm_latest_token_balance_sa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallet\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS token_address,\n        lower(wallet::string) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8048828, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_as": {"name": "evm_latest_token_balance_as", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_as", "macro_sql": "{% macro evm_latest_token_balance_as(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT token, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS wallet_address,\n        lower(token::string) AS token_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.805476, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_aa": {"name": "evm_latest_token_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_aa", "macro_sql": "{% macro evm_latest_token_balance_aa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(tokens.VALUE::STRING) AS token_address,\n        lower(wallets.VALUE::STRING) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM\n        inputs,\n        LATERAL FLATTEN(input => tokens) tokens,\n        LATERAL FLATTEN(input => wallets) wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8060682, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssi": {"name": "evm_historical_token_balance_ssi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssi", "macro_sql": "{% macro evm_historical_token_balance_ssi(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data,\n        block_number\n), final AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.806654, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssa": {"name": "evm_historical_token_balance_ssa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssa", "macro_sql": "{% macro evm_historical_token_balance_ssa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8072617, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asi": {"name": "evm_historical_token_balance_asi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asi", "macro_sql": "{% macro evm_historical_token_balance_asi(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, 0)\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8078706, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asa": {"name": "evm_historical_token_balance_asa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asa", "macro_sql": "{% macro evm_historical_token_balance_asa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, '0')\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8085275, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_sai": {"name": "evm_historical_token_balance_sai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_sai", "macro_sql": "{% macro evm_historical_token_balance_sai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8091497, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_saa": {"name": "evm_historical_token_balance_saa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_saa", "macro_sql": "{% macro evm_historical_token_balance_saa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8098462, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aai": {"name": "evm_historical_token_balance_aai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aai", "macro_sql": "{% macro evm_historical_token_balance_aai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens,\n        wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.810481, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aaa": {"name": "evm_historical_token_balance_aaa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aaa", "macro_sql": "{% macro evm_historical_token_balance_aaa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        wallets,\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8111231, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_si": {"name": "evm_historical_native_balance_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_si", "macro_sql": "{% macro evm_historical_native_balance_si(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))) as hex_block)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,hex_block)::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base \nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8117154, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_sa": {"name": "evm_historical_native_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_sa", "macro_sql": "{% macro evm_historical_native_balance_sa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM blocks\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8123474, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_ai": {"name": "evm_historical_native_balance_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_ai", "macro_sql": "{% macro evm_historical_native_balance_ai(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nflat_wallets AS (\n    SELECT lower(value::string) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8129635, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_aa": {"name": "evm_historical_native_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_aa", "macro_sql": "{% macro evm_historical_native_balance_aa(schema, blockchain, network) %}\n    WITH inputs AS (\n        SELECT wallets, block_numbers\n    ),\n    flat_wallets AS (\n        SELECT lower(wallet.value::STRING) AS wallet, block.value::INTEGER AS block_number\n        FROM inputs,\n        LATERAL FLATTEN(input => wallets) wallet,\n        LATERAL FLATTEN(input => block_numbers) block\n    ),\n    final AS (\n        SELECT\n            wallet AS wallet_address,\n            block_number,\n            utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n        FROM flat_wallets\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(block_number)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        wallet_address,\n        symbol,\n        block_number,\n        raw_balance,\n        (raw_balance::int / pow(10,18))::float as balance\n    FROM final\n    LEFT JOIN {{ ref('_evm__native_symbol_map') }}\n    on '{{blockchain}}' = blockchain\n    and '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8137028, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_s": {"name": "evm_latest_contract_events_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_s", "macro_sql": "{% macro evm_latest_contract_events_s(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8142338, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_si": {"name": "evm_latest_contract_events_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_si", "macro_sql": "{% macro evm_latest_contract_events_si(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(lookback)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8148477, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_a": {"name": "evm_latest_contract_events_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_a", "macro_sql": "{% macro evm_latest_contract_events_a(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.815396, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_ai": {"name": "evm_latest_contract_events_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_ai", "macro_sql": "{% macro evm_latest_contract_events_ai(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(lookback)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8159366, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_s": {"name": "evm_latest_contract_events_decoded_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro_sql": "{% macro evm_latest_contract_events_decoded_s(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.816789, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_si": {"name": "evm_latest_contract_events_decoded_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro_sql": "{% macro evm_latest_contract_events_decoded_si(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8176258, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_a": {"name": "evm_latest_contract_events_decoded_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro_sql": "{% macro evm_latest_contract_events_decoded_a(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8184521, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_ai": {"name": "evm_latest_contract_events_decoded_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_ai", "macro_sql": "{% macro evm_latest_contract_events_decoded_ai(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8192818, "supported_languages": null}, "macro.livequery_models.evm_contract_events": {"name": "evm_contract_events", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events", "macro_sql": "{% macro evm_contract_events(schema, blockchain, network) %}\n WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 200, 'XXXXXXXXXX'))) AS from_block_hex,\n            utils.udf_hex_to_int(chainhead_hex) - 200 as min_block_no\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n    UNION ALL\n    SELECT\n        'Success' as status, \n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        topics as event_topics,\n        data as event_data\n    from {{ ref('_eth__logs') }}\n    where contract_address = (select contract_address from node_call)\n    and block_number >= min_block  \n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.820054, "supported_languages": null}, "macro.livequery_models.evm_contract_events_decoded": {"name": "evm_contract_events_decoded", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events_decoded", "macro_sql": "{% macro evm_contract_events_decoded(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 400, 'XXXXXXXXXX'))) AS from_block_hex,\n        utils.udf_hex_to_int(chainhead_hex) - 400 as min_block_no\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(min_block) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\nunion all\nselect \n    'Success' as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    event_name,\n    contract_address,\n    topics as event_topics,\n    data as event_data,\n    decoded_log as decoded_data\nfrom {{ ref('_eth__decoded_logs') }}\n    where contract_address = (select contract_address from inputs)\n    and block_number >= min_block\n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8211234, "supported_languages": null}, "macro.livequery_models.base_test_udf": {"name": "base_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tests/udfs.sql", "original_file_path": "macros/tests/udfs.sql", "unique_id": "macro.livequery_models.base_test_udf", "macro_sql": "{% macro base_test_udf(model, udf, args, assertions) %}\n{#\n  Generates a test for a UDF.\n #}\n{% if execute %}\n    {%- set context -%}\n      SET LIVEQUERY_CONTEXT = '{\"userId\":\"{{ var(\"STUDIO_TEST_USER_ID\") }}\"}';\n    {%- endset -%}\n  {%- do run_query(context) -%}\n{%- endif -%}\n{%- set call -%}\n{{ target.database }}.{{ udf }}({{ args }})\n{%- endset -%}\n,\ntest AS\n(\n    SELECT\n        '{{ udf }}' AS test_name\n        ,[{{ args }}] as parameters\n        ,{{ call }} AS result\n)\n  {% for assertion in assertions %}\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $${{ assertion }}$$ AS assertion,\n    $${{ context ~ \"\\n\" }}SELECT {{ call ~ \"\\n\" }};$$ AS sql\n    FROM test\n    WHERE NOT {{ assertion }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif -%}\n  {%- endfor -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8233116, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_nfts_udfs": {"name": "config_quicknode_ethereum_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_nfts_udfs", "macro_sql": "{% macro config_quicknode_ethereum_nfts_udfs(schema_name = \"quicknode_ethereum_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTs).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.825575, "supported_languages": null}, "macro.livequery_models.config_quicknode_solana_nfts_udfs": {"name": "config_quicknode_solana_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_solana_nfts_udfs", "macro_sql": "{% macro config_quicknode_solana_nfts_udfs(schema_name = \"quicknode_solana_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Solana NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTs).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_creator\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs that have been created by an address. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTsByCreator).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCreator') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_solana_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8265867, "supported_languages": null}, "macro.livequery_models.config_quicknode_utils_udfs": {"name": "config_quicknode_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_utils_udfs", "macro_sql": "{% macro config_quicknode_utils_udfs(schema_name = \"quicknode_utils\", utils_schema_name=\"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode base endpoints/RPC calls\n #}\n\n- name: {{ schema_name -}}.ethereum_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an Ethereum RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{ethereum-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.polygon_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Polygon RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{polygon-matic}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.solana_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Solana RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{solana-solana-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8275106, "supported_languages": null}, "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call": {"name": "quicknode_ethereum_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call", "macro_sql": "{% macro quicknode_ethereum_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.ethereum_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8280509, "supported_languages": null}, "macro.livequery_models.quicknode_polygon_mainnet_rpc_call": {"name": "quicknode_polygon_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_polygon_mainnet_rpc_call", "macro_sql": "{% macro quicknode_polygon_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.polygon_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8284004, "supported_languages": null}, "macro.livequery_models.quicknode_solana_mainnet_rpc_call": {"name": "quicknode_solana_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_solana_mainnet_rpc_call", "macro_sql": "{% macro quicknode_solana_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.solana_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8287206, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_tokens_udfs": {"name": "config_quicknode_ethereum_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_tokens_udfs", "macro_sql": "{% macro config_quicknode_ethereum_tokens_udfs(schema_name = \"quicknode_ethereum_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8310046, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_tokens_udfs": {"name": "config_quicknode_polygon_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_tokens_udfs", "macro_sql": "{% macro config_quicknode_polygon_tokens_udfs(schema_name = \"quicknode_polygon_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.833305, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_nfts_udfs": {"name": "config_quicknode_polygon_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_nfts_udfs", "macro_sql": "{% macro config_quicknode_polygon_nfts_udfs(schema_name = \"quicknode_polygon_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTs_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.835506, "supported_languages": null}, "macro.livequery_models.config_blockpour_utils_udfs": {"name": "config_blockpour_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_blockpour_utils_udfs", "macro_sql": "{% macro config_blockpour_utils_udfs(schema_name = \"blockpour_utils\", utils_schema_name=\"blockpour_utils\") -%}\n{#\n    This macro is used to generate the Blockpour base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Blockpour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://services.blockpour.com/api', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the BlockPour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://services.blockpour.com/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8362434, "supported_languages": null}, "macro.livequery_models.config_transpose_udfs": {"name": "config_transpose_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/transpose/udfs.yaml.sql", "original_file_path": "macros/marketplace/transpose/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_transpose_udfs", "macro_sql": "{% macro config_transpose_udfs(schema_name = \"transpose\", utils_schema_name=\"transpose_utils\") -%}\n{#\n    This macro is used to generate the Transpose Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.transpose.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.transpose.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8370087, "supported_languages": null}, "macro.livequery_models.config_deepnftvalue_udfs": {"name": "config_deepnftvalue_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "original_file_path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_deepnftvalue_udfs", "macro_sql": "{% macro config_deepnftvalue_udfs(schema_name = \"deepnftvalue\", utils_schema_name=\"deepnftvalue_utils\") -%}\n{#\n    This macro is used to generate the DeepNftValue Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.deepnftvalue.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Token {API_KEY}'},\n        {},\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.deepnftvalue.com', PATH),\n        {'Authorization': 'Token {API_KEY}'},\n        BODY,\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8377845, "supported_languages": null}, "macro.livequery_models.config_alchemy_utils_udfs": {"name": "config_alchemy_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_utils_udfs", "macro_sql": "{% macro config_alchemy_utils_udfs(schema_name = \"alchemy_utils\", utils_schema_name=\"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema -}}.nfts_get\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        concat(\n            'https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.nfts_post\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH),\n        {},\n        BODY,\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Alchemy.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://', NETWORK,'.g.alchemy.com/v2/{',NETWORK,'}'),\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/ALCHEMY') as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8387425, "supported_languages": null}, "macro.livequery_models.config_alchemy_transfers_udfs": {"name": "config_alchemy_transfers_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_transfers_udfs", "macro_sql": "{% macro config_alchemy_transfers_udfs(schema_name = \"alchemy_transfers\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy transfers endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset_transfers\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$The Transfers API allows you to easily fetch historical transactions for any address across Ethereum and supported L2s including Polygon, Arbitrum, and Optimism. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-getassettransfers).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getAssetTransfers\") | trim}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8394468, "supported_languages": null}, "macro.livequery_models.config_alchemy_nfts_udfs": {"name": "config_alchemy_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_nfts_udfs", "macro_sql": "{% macro config_alchemy_nfts_udfs(schema_name = \"alchemy_nfts\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy nft endpoints\n #}\n\n- name: {{ schema_name -}}.get_nfts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs currently owned by a given address. [Alchemy docs here](https://docs.alchemy.com/reference/getnfts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTs') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_token\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get the owner(s) for a token. [Alchemy docs here](https://docs.alchemy.com/reference/getownersfortoken).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForToken') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all owners for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getownersforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForCollection') | trim }}\n\n- name: {{ schema_name -}}.is_holder_of_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Checks whether a wallet holds a NFT in a given collection. [Alchemy docs here](https://docs.alchemy.com/reference/isholderofcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isHolderOfCollection') | trim }}\n\n- name: {{ schema_name -}}.get_contracts_for_owner\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFT contracts held by an owner address. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractsforowner).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractsForOwner') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with a given NFT. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with up to 100 given NFT contracts. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getNFTMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Queries NFT high-level collection/contract level information. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with the given list of contract addresses. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getContractMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.invalidate_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Marks all cached tokens for the particular contract as stale. So the next time the endpoint is queried it fetches live data instead of fetching from cache. [Alchemy docs here](https://docs.alchemy.com/reference/invalidatecontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'invalidateContract') | trim }}\n\n- name: {{ schema_name -}}.reingest_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes. [Alchemy docs here](https://docs.alchemy.com/reference/reingestcontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'reingestContract') | trim }}\n\n- name: {{ schema_name -}}.search_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts. [Alchemy docs here](https://docs.alchemy.com/reference/searchcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'searchContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nfts_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTsForCollection') | trim }}\n\n- name: {{ schema_name -}}.get_spam_contracts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns a list of all spam contracts marked by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/getspamcontracts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getSpamContracts') | trim }}\n\n- name: {{ schema_name -}}.is_spam_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a contract is marked as spam or not by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/isspamcontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isSpamContract') | trim }}\n\n- name: {{ schema_name -}}.is_airdrop\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. [Alchemy docs here](https://docs.alchemy.com/reference/isairdrop).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isAirdrop') | trim }}\n\n- name: {{ schema_name -}}.report_spam\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Report a particular address to our APIs if you think it is spam. [Alchemy docs here](https://docs.alchemy.com/reference/reportspam).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'reportSpam') | trim }}\n\n- name: {{ schema_name -}}.get_floor_price\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the floor prices of a NFT collection by marketplace. [Alchemy docs here](https://docs.alchemy.com/reference/getfloorprice).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getFloorPrice') | trim }}\n\n- name: {{ schema_name -}}.get_nft_sales\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets NFT sales that have happened through on-chain marketplaces. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsales).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTSales') | trim }}\n\n- name: {{ schema_name -}}.compute_rarity\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Computes the rarity of each attribute of an NFT. [Alchemy docs here](https://docs.alchemy.com/reference/computerarity).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'computeRarity') | trim }}\n\n- name: {{ schema_name -}}.summarize_nft_attributes\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Generate a summary of attribute prevalence for an NFT collection. [Alchemy docs here](https://docs.alchemy.com/reference/summarizenftattributes).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'summarizeNFTAttributes') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_nft_get_api_call", "macro.livequery_models.alchemy_nft_post_api_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.855544, "supported_languages": null}, "macro.livequery_models.alchemy_nft_get_api_call": {"name": "alchemy_nft_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_get_api_call", "macro_sql": "{% macro alchemy_nft_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_get(NETWORK, '/{{api_path}}', QUERY_ARGS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.856114, "supported_languages": null}, "macro.livequery_models.alchemy_nft_post_api_call": {"name": "alchemy_nft_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_post_api_call", "macro_sql": "{% macro alchemy_nft_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_post(NETWORK, '/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8564503, "supported_languages": null}, "macro.livequery_models.alchemy_rpc_call": {"name": "alchemy_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_rpc_call", "macro_sql": "{% macro alchemy_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8567617, "supported_languages": null}, "macro.livequery_models.config_alchemy_tokens_udfs": {"name": "config_alchemy_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_tokens_udfs", "macro_sql": "{% macro config_alchemy_tokens_udfs(schema_name = \"alchemy_tokens\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_allowance\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the amount which the spender is allowed to withdraw from the owner. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenallowance).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenAllowance\") | trim}}\n\n- name: {{ schema_name -}}.get_token_balances\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC20 token balances for all tokens the given address has ever transacted in with. Optionally accepts a list of contracts. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenbalances).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenBalances\") | trim}}\n\n- name: {{ schema_name -}}.get_token_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata (name, symbol, decimals, logo) for a given token contract address. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenmetadata).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenMetadata\") | trim}}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8582182, "supported_languages": null}, "macro.livequery_models.config_chainbase_utils_udfs": {"name": "config_chainbase_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainbase_utils_udfs", "macro_sql": "{% macro config_chainbase_utils_udfs(schema_name = \"chainbase_utils\", utils_schema_name=\"chainbase_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.chainbase.online', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.chainbase.online', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Chainbase. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.chainbase.online'),\n      {'x-api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/CHAINBASE') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8592095, "supported_languages": null}, "macro.livequery_models.config_credmark_utils_udfs": {"name": "config_credmark_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/credmark/util_udfs.sql", "original_file_path": "macros/marketplace/credmark/util_udfs.sql", "unique_id": "macro.livequery_models.config_credmark_utils_udfs", "macro_sql": "{% macro config_credmark_utils_udfs(schema_name = \"credmark_utils\", utils_schema_name=\"credmark_utils\") -%}\n{#\n    This macro is used to generate the Credmark base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://gateway.credmark.com', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://gateway.credmark.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8599439, "supported_languages": null}, "macro.livequery_models.config_playgrounds_udfs": {"name": "config_playgrounds_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/playgrounds/udfs.yaml.sql", "original_file_path": "macros/marketplace/playgrounds/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_playgrounds_udfs", "macro_sql": "{% macro config_playgrounds_udfs(schema_name = \"playgrounds\", utils_schema_name = \"playgrounds_utils\") -%}\n{#\n    This macro is used to generate the Playgrounds calls\n #}\n\n- name: {{ schema_name -}}.query_subgraph\n  signature:\n    - [SUBGRAPH_ID, STRING, The ID of the Subgraph]\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a subgraph via the Playgrounds Proxy [Playgrounds docs here](https://docs.playgrounds.network/api/subgraph-proxy/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.playgrounds.network/v1/proxy/subgraphs/id/', SUBGRAPH_ID),\n        {'Playgrounds-Api-Key': '{API_KEY}', 'Content-Type': 'application/json'},\n        QUERY,\n        '_FSC_SYS/PLAYGROUNDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8605263, "supported_languages": null}, "macro.livequery_models.config_opensea_udfs": {"name": "config_opensea_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/opensea/udfs.yaml.sql", "original_file_path": "macros/marketplace/opensea/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_opensea_udfs", "macro_sql": "{% macro config_opensea_udfs(schema_name = \"opensea\", utils_schema_name=\"opensea_utils\") -%}\n{#\n    This macro is used to generate the OpenSea Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.opensea.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.opensea.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8612623, "supported_languages": null}, "macro.livequery_models.config_chainstack_udfs": {"name": "config_chainstack_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainstack/udfs.yaml.sql", "original_file_path": "macros/marketplace/chainstack/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainstack_udfs", "macro_sql": "{% macro config_chainstack_udfs(schema_name = \"chainstack\", utils_schema_name=\"chainstack_utils\") -%}\n{#\n    This macro is used to generate the Chainstack Base api endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.chainstack.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.chainstack.com', PATH),\n        {'authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.862009, "supported_languages": null}, "macro.livequery_models.config_bitquery_udfs": {"name": "config_bitquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/bitquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/bitquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_bitquery_udfs", "macro_sql": "{% macro config_bitquery_udfs(schema_name = \"bitquery\", utils_schema_name = \"bitquery_utils\") -%}\n{#\n    This macro is used to generate the BitQuery calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on BitQuery [BitQuery docs here](https://docs.bitquery.io/docs/start/first-query/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://graphql.bitquery.io',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/BITQUERY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.862528, "supported_languages": null}, "macro.livequery_models.config_allday_udfs": {"name": "config_allday_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/allday/allday.graphql.sql", "original_file_path": "macros/marketplace/allday/allday.graphql.sql", "unique_id": "macro.livequery_models.config_allday_udfs", "macro_sql": "{% macro config_allday_udfs(schema_name = \"allday\", utils_schema_name = \"allday_utils\") -%}\n{#\n    This macro is used to generate the AllDay calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on AllDay.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT('https://nflallday.com/consumer/graphql?query=', utils.udf_object_to_url_query_string(QUERY)),\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        {},\n        '_FSC_SYS/ALLDAY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8630707, "supported_languages": null}, "macro.livequery_models.config_topshot_udfs": {"name": "config_topshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/topshot/topshot.graphql.sql", "original_file_path": "macros/marketplace/topshot/topshot.graphql.sql", "unique_id": "macro.livequery_models.config_topshot_udfs", "macro_sql": "{% macro config_topshot_udfs(schema_name = \"topshot\", utils_schema_name = \"topshot_utils\") -%}\n{#\n    This macro is used to generate the Topshot calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on TopShot.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://public-api.nbatopshot.com/graphql',\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        QUERY,\n        '_FSC_SYS/TOPSHOT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8635988, "supported_languages": null}, "macro.livequery_models.config_covalent_udfs": {"name": "config_covalent_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/covalent/udfs.yaml.sql", "original_file_path": "macros/marketplace/covalent/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_covalent_udfs", "macro_sql": "{% macro config_covalent_udfs(schema_name = \"covalent\", utils_schema_name=\"covalent_utils\") -%}\n{#\n    This macro is used to generate the Covalent Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.covalenthq.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.covalenthq.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8643682, "supported_languages": null}, "macro.livequery_models.config_stakingrewards_udfs": {"name": "config_stakingrewards_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "original_file_path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_stakingrewards_udfs", "macro_sql": "{% macro config_stakingrewards_udfs(schema_name = \"stakingrewards\", utils_schema_name=\"stakingrewards_utils\") -%}\n{#\n    This macro is used to generate the StakingRewards Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the StakingRewards API. [StakingRewards docs here](https://api-docs.stakingrewards.com/api-docs/get-started/quick-start-guide).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://api.stakingrewards.com/public/query',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STAKINGREWARDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.864933, "supported_languages": null}, "macro.livequery_models.config_strangelove_udfs": {"name": "config_strangelove_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/strangelove/udfs.yaml.sql", "original_file_path": "macros/marketplace/strangelove/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_strangelove_udfs", "macro_sql": "{% macro config_strangelove_udfs(schema_name = \"strangelove\", utils_schema_name = \"strangelove_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The url to issue a get request to]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a GET request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n          URL, '?',\n          utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-apikey': '{API_KEY}'},\n        {},\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The url to issue a post request to]\n    - [QUERY, OBJECT, The body of the request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a POST request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'x-apikey': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8656814, "supported_languages": null}, "macro.livequery_models.config_dappradar_udfs": {"name": "config_dappradar_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dappradar/udfs.yaml.sql", "original_file_path": "macros/marketplace/dappradar/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dappradar_udfs", "macro_sql": "{% macro config_dappradar_udfs(schema_name = \"dappradar\", utils_schema_name=\"dappradar_utils\") -%}\n{#\n    This macro is used to generate the DappRadar Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dappradar.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-BLOBR-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.dappradar.com', PATH),\n        {'X-BLOBR-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8664196, "supported_languages": null}, "macro.livequery_models.config_footprint_utils_udfs": {"name": "config_footprint_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/footprint/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_footprint_utils_udfs", "macro_sql": "{% macro config_footprint_utils_udfs(schema_name = \"footprint_utils\", utils_schema_name=\"footprint_utils\") -%}\n{#\n    This macro is used to generate the Footprint base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.footprint.network/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Footprint.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.footprint.network/api'),\n      {'api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/FOOTPRINT') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8675978, "supported_languages": null}, "macro.livequery_models.footprint_get_api_call": {"name": "footprint_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_get_api_call", "macro_sql": "{% macro footprint_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.get('/{{api_path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.868051, "supported_languages": null}, "macro.livequery_models.footprint_post_api_call": {"name": "footprint_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_post_api_call", "macro_sql": "{% macro footprint_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.post('/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8683858, "supported_languages": null}, "macro.livequery_models.config_subquery_udfs": {"name": "config_subquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/subquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/subquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_subquery_udfs", "macro_sql": "{% macro config_subquery_udfs(schema_name = \"subquery\", utils_schema_name = \"subquery_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [PROJECT, STRING, The sub-query project name]\n    - [QUERY, OBJECT, The graphql query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a SubQuery Project [SubQuery docs here](https://explorer.subquery.network/subquery/subquery/kepler-network).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.subquery.network/sq/subquery/', PROJECT),\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8689253, "supported_languages": null}, "macro.livequery_models.config_snapshot_udfs": {"name": "config_snapshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/snapshot/udfs.yaml.sql", "original_file_path": "macros/marketplace/snapshot/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_snapshot_udfs", "macro_sql": "{% macro config_snapshot_udfs(schema_name = \"snapshot\", utils_schema_name=\"snapshot_utils\") -%}\n{#\n    This macro is used to generate the Snapshot Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the Snapshot API. [Snapshot docs here](https://docs.snapshot.org/tools/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://hub.snapshot.org/graphql',\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.869438, "supported_languages": null}, "macro.livequery_models.config_nftscan_udfs": {"name": "config_nftscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/nftscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/nftscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_nftscan_udfs", "macro_sql": "{% macro config_nftscan_udfs(schema_name = \"nftscan\", utils_schema_name=\"nftscan_utils\") -%}\n{#\n    This macro is used to generate the NFTScan Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8701572, "supported_languages": null}, "macro.livequery_models.config_cmc_udfs": {"name": "config_cmc_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/cmc/udfs.yaml.sql", "original_file_path": "macros/marketplace/cmc/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_cmc_udfs", "macro_sql": "{% macro config_cmc_udfs(schema_name = \"cmc\", utils_schema_name=\"cmc_utils\") -%}\n{#\n    This macro is used to generate the CoinmarketCap Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coinmarketcap.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/CMC'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coinmarketcap.com', PATH),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CMC'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.871031, "supported_languages": null}, "macro.livequery_models.config_apilayer_udfs": {"name": "config_apilayer_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/apilayer/udfs.yaml.sql", "original_file_path": "macros/marketplace/apilayer/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_apilayer_udfs", "macro_sql": "{% macro config_apilayer_udfs(schema_name = \"apilayer\", utils_schema_name=\"apilayer_utils\") -%}\n{#\n    This macro is used to generate the ApiLayer Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.apilayer.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'apikey': '{API_KEY}'},\n        {},\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.apilayer.com', PATH),\n        {'apikey': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8717856, "supported_languages": null}, "macro.livequery_models.config_helius_apis_udfs": {"name": "config_helius_apis_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/apis_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/apis_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_apis_udfs", "macro_sql": "{% macro config_helius_apis_udfs(schema_name = \"helius_apis\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius API endpoints\n #}\n\n- name: {{ schema_name -}}.token_metadata\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [BODY, OBJECT, The body of the API request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata for a list of given token mint addresses. [Helius docs here](https://docs.helius.xyz/solana-apis/token-metadata-api).$$\n  sql: {{ helius_post_call(utils_schema_name, '/v0/token-metadata') | trim }}\n\n- name: {{ schema_name -}}.balances\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [ADDRESS, STRING, The address to retrieve balances for]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the native Solana balance (in lamports) and all token balances for a given address. [Helius docs here](https://docs.helius.xyz/solana-apis/balances-api).$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE \n          WHEN NETWORK = 'devnet' THEN \n              concat('https://api-devnet.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n          ELSE \n              concat('https://api.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema_name -}}.parse_transactions\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [TRANSACTIONS, ARRAY, An array of transaction signatures]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns an array of enriched, human-readable transactions of the given transaction signatures. Up to 100 transactions per call. [Helius docs here](https://docs.helius.xyz/solana-apis/enhanced-transactions-api/parse-transaction-s).$$\n  sql: |\n    SELECT {{ utils_schema_name -}}.post(NETWORK, '/v0/transactions', {'transactions': TRANSACTIONS}) as response\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_post_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.873098, "supported_languages": null}, "macro.livequery_models.config_helius_das_udfs": {"name": "config_helius_das_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/das_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/das_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_das_udfs", "macro_sql": "{% macro config_helius_das_udfs(schema_name = \"helius_das\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius DAS endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get an asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAsset') | trim }}\n\n- name: {{ schema_name -}}.get_signatures_for_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of transaction signatures related to a compressed asset. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-signatures-for-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getSignaturesForAsset') | trim }}\n\n- name: {{ schema_name -}}.search_assets\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for assets by a variety of parameters. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/search-assets).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'searchAssets') | trim }}\n\n- name: {{ schema_name -}}.get_asset_proof\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a merkle proof for a compressed asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset-proof).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetProof') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_owner\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets owned by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-owner).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByOwner') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_authority\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets with a specific authority. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-authority).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByAuthority') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_creator\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets created by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-creator).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByCreator') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_group\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets by a group key and value. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-group).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByGroup') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8770885, "supported_languages": null}, "macro.livequery_models.config_helius_utils_udfs": {"name": "config_helius_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_utils_udfs", "macro_sql": "{% macro config_helius_utils_udfs(schema = \"helius_utils\", utils_schema_name=\"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius base endpoints\n #}\n\n- name: {{ schema -}}.get\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [QUERY_PARAMS, OBJECT, The query parameters]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP GET request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.post\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP POST request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}')\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}')\n      END,\n      {},\n      BODY,\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              'https://devnet.helius-rpc.com?api-key={API_KEY}'\n          ELSE\n              'https://rpc.helius.xyz?api-key={API_KEY}'\n      END,\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8782008, "supported_languages": null}, "macro.livequery_models.helius_rpc_call": {"name": "helius_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_rpc_call", "macro_sql": "{% macro helius_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8787303, "supported_languages": null}, "macro.livequery_models.helius_get_call": {"name": "helius_get_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_get_call", "macro_sql": "{% macro helius_get_call(schema_name, path) %}\nSELECT {{ schema_name -}}.get(NETWORK, '{{path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8790433, "supported_languages": null}, "macro.livequery_models.helius_post_call": {"name": "helius_post_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_post_call", "macro_sql": "{% macro helius_post_call(schema_name, path) %}\nSELECT {{ schema_name -}}.post(NETWORK, '{{path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8793528, "supported_languages": null}, "macro.livequery_models.config_binance_udfs": {"name": "config_binance_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/binance/udfs.yaml.sql", "original_file_path": "macros/marketplace/binance/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_binance_udfs", "macro_sql": "{% macro config_binance_udfs(schema_name = \"binance\", utils_schema_name=\"binance_utils\") -%}\n{#\n    This macro is used to generate the Binance Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.880079, "supported_languages": null}, "macro.livequery_models.config_dune_udfs": {"name": "config_dune_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dune/udfs.yaml.sql", "original_file_path": "macros/marketplace/dune/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dune_udfs", "macro_sql": "{% macro config_dune_udfs(schema_name = \"dune\", utils_schema_name=\"dune_utils\") -%}\n{#\n    This macro is used to generate the Dune Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dune.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-dune-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DUNE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.dune.com', PATH),\n        {'x-dune-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DUNE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8808377, "supported_languages": null}, "macro.livequery_models.config_defillama_udfs": {"name": "config_defillama_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/defillama/udfs.yaml.sql", "original_file_path": "macros/marketplace/defillama/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_defillama_udfs", "macro_sql": "{% macro config_defillama_udfs(schema_name = \"defillama\", utils_schema_name=\"defillama_utils\") -%}\n{#\n    This macro is used to generate the Defillama endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Defillama API. [Defillama docs here](https://defillama.com/docs/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.llama.fi', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Accept': '*/*', 'User-Agent': 'livequery/1.0 (Snowflake)', 'Host':'api.llama.fi', 'Connection': 'keep-alive'},\n        {},\n        IFF(ARRAY_CONTAINS('api_key'::VARIANT, OBJECT_KEYS(QUERY_ARGS)), '_FSC_SYS/DEFILLAMA', '')\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8814106, "supported_languages": null}, "macro.livequery_models.config_zettablock_udfs": {"name": "config_zettablock_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zettablock/udfs.yaml.sql", "original_file_path": "macros/marketplace/zettablock/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zettablock_udfs", "macro_sql": "{% macro config_zettablock_udfs(schema_name = \"zettablock\", utils_schema_name=\"zettablock_utils\") -%}\n{#\n    This macro is used to generate the Zettablock Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zettablock.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zettablock.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8821545, "supported_languages": null}, "macro.livequery_models.config_github_utils_udfs": {"name": "config_github_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/utils_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/utils_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_utils_udfs", "macro_sql": "{% macro config_github_utils_udfs(schema_name = \"github_utils\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.octocat\n  signature:\n    - []\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Verify token [Authenticating to the REST API](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api?apiVersion=2022-11-28).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        'https://api.github.com/octocat',\n        {'Authorization': 'Bearer {TOKEN}',\n        'X-GitHub-Api-Version': '2022-11-28'},\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n        \n    ) as response\n\n- name: {{ schema_name -}}.headers\n  signature: []\n  return_type:\n    - \"TEXT\"\n  options: |\n    NOT NULL\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT '{\"Authorization\": \"Bearer {TOKEN}\",\n            \"X-GitHub-Api-Version\": \"2022-11-28\",\n            \"Accept\": \"application/vnd.github+json\"}'\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [route, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT_WS('/', 'https://api.github.com',  route || '?') || utils.udf_urlencode(query),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.post\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.put\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'PUT',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8840365, "supported_languages": null}, "macro.livequery_models.config_github_actions_udfs": {"name": "config_github_actions_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/actions_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_actions_udfs", "macro_sql": "{% macro config_github_actions_udfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflows(owner, repo, {})\n\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.runs(owner, repo, {})\n\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_runs(owner, repo, workflow_id, {})\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [body, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.POST(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'dispatches'),\n        COALESCE(body, {'ref': 'main'})::OBJECT\n    )::OBJECT\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_dispatches(owner, repo, workflow_id, NULL)\n\n- name: {{ schema_name -}}.workflow_enable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Enables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#enable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'enable'),\n        {}\n    )::OBJECT\n- name: {{ schema_name -}}.workflow_disable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Disables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#disable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'disable'),\n        {}\n    )::OBJECT\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8891816, "supported_languages": null}, "macro.livequery_models.config_github_actions_udtfs": {"name": "config_github_actions_udtfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udtfs.yml.sql", "original_file_path": "macros/marketplace/github/actions_udtfs.yml.sql", "unique_id": "macro.livequery_models.config_github_actions_udtfs", "macro_sql": "{% macro config_github_actions_udtfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    WITH workflows AS\n    (\n    SELECT\n        github_actions.workflows(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n        value:id::INTEGER AS id\n        ,value:badge_url::STRING AS badge_url\n        ,value:created_at::TIMESTAMP AS created_at\n        ,value:html_url::STRING AS html_url\n        ,value:name::STRING AS name\n        ,value:node_id::STRING AS node_id\n        ,value:path::STRING AS path\n        ,value:state::STRING AS state\n        ,value:updated_at::TIMESTAMP AS updated_at\n        ,value:url::STRING AS url\n    FROM workflows, LATERAL FLATTEN( input=> response:workflows)\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflows(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.runs(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_runs(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.workflow_runs(OWNER, REPO, WORKFLKOW_ID, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflow_runs(owner, repo, WORKFLKOW_ID, {}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.893656, "supported_languages": null}, "macro.livequery_models.config_espn_udfs": {"name": "config_espn_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/espn/udfs.yaml.sql", "original_file_path": "macros/marketplace/espn/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_espn_udfs", "macro_sql": "{% macro config_espn_udfs(schema_name = \"espn\", utils_schema_name=\"espn_utils\") -%}\n{#\n    This macro is used to generate the ESPN Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {}\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {},\n        BODY\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8943815, "supported_languages": null}, "macro.livequery_models.config_solscan_udfs": {"name": "config_solscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/solscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/solscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_solscan_udfs", "macro_sql": "{% macro config_solscan_udfs(schema_name = \"solscan\", utils_schema_name=\"solscan_utils\") -%}\n{#\n    This macro is used to generate the Solscan Base endpoints\n #}\n\n- name: {{ schema_name -}}.pro_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.pro_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://public-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://public-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8956215, "supported_languages": null}, "macro.livequery_models.config_coingecko_udfs": {"name": "config_coingecko_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/coingecko/udfs.yaml.sql", "original_file_path": "macros/marketplace/coingecko/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_coingecko_udfs", "macro_sql": "{% macro config_coingecko_udfs(schema_name = \"coingecko\", utils_schema_name=\"coingecko_utils\") -%}\n{#\n    This macro is used to generate the Coingecko Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coingecko.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path after '/api' starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coingecko.com', PATH),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8964071, "supported_languages": null}, "macro.livequery_models.config_reservoir_udfs": {"name": "config_reservoir_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/reservoir/udfs.yaml.sql", "original_file_path": "macros/marketplace/reservoir/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_reservoir_udfs", "macro_sql": "{% macro config_reservoir_udfs(schema_name = \"reservoir\", utils_schema_name=\"reservoir_utils\") -%}\n{#\n    This macro is used to generate the Reservoir Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.reservoir.tools', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.reservoir.tools', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8971689, "supported_languages": null}, "macro.livequery_models.config_fred_udfs": {"name": "config_fred_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/fred/udfs.yaml.sql", "original_file_path": "macros/marketplace/fred/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_fred_udfs", "macro_sql": "{% macro config_fred_udfs(schema_name = \"fred\", utils_schema_name = \"fred_utils\") -%}\n{#\n    This macro is used to generate the FRED Calls\n #}\n- name: {{ schema_name -}}.get_series\n  signature:\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a FRED series [FRED docs here](https://fred.stlouisfed.org/docs/api/fred/series.html).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.stlouisfed.org/fred/series/observations?api_key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {},\n        '_FSC_SYS/FRED'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8977058, "supported_languages": null}, "macro.livequery_models.config_zapper_udfs": {"name": "config_zapper_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zapper/udfs.yaml.sql", "original_file_path": "macros/marketplace/zapper/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zapper_udfs", "macro_sql": "{% macro config_zapper_udfs(schema_name = \"zapper\", utils_schema_name=\"zapper_utils\") -%}\n{#\n    This macro is used to generate the Zapper Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zapper.xyz', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Basic {API_KEY}'},\n        {},\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zapper.xyz', PATH),\n        {'Authorization': 'Basic {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8984573, "supported_languages": null}, "macro.livequery_models.config_dapplooker_udfs": {"name": "config_dapplooker_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dapplooker/udfs.yaml.sql", "original_file_path": "macros/marketplace/dapplooker/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dapplooker_udfs", "macro_sql": "{% macro config_dapplooker_udfs(schema_name = \"dapplooker\", utils_schema_name = \"dapplooker_utils\") -%}\n{#\n    This macro is used to generate the DappLooker endpoints\n #}\n\n- name: {{ schema_name -}}.get_chart\n  signature:\n    - [CHART_ID, STRING, The UUID of the chart]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the chart data. [DappLooker docs here](https://github.com/dapplooker/dapplooker-sdk).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dapplooker.com/chart/', CHART_ID, '?api_key={API_KEY}&output_format=json'),\n        {},\n        {},\n        '_FSC_SYS/DAPPLOOKER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.8989968, "supported_languages": null}, "macro.livequery_models.test_test_udf": {"name": "test_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "tests/generic/test_udf.sql", "original_file_path": "tests/generic/test_udf.sql", "unique_id": "macro.livequery_models.test_test_udf", "macro_sql": "{% test test_udf(model, column_name, args, assertions) %}\n    {#\n        This is a generic test for UDFs.\n        The udfs are deployed using ephemeral models, so we need to\n        use the ephemeral model name to get the udf name.\n     #}\n    {%- set schema = model | replace(\"__dbt__cte__\", \"\") -%}\n    {%- set schema = schema.split(\"__\") | first -%}\n    {%- set udf = schema ~ \".\" ~ column_name -%}\n\n    {{ base_test_udf(model, udf, args, assertions) }}\n{% endtest %}", "depends_on": {"macros": ["macro.livequery_models.base_test_udf"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.900313, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9011037, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9012928, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.901474, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9016514, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9020343, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9022114, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9023857, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9025671, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9031768, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9037764, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9043899, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9046426, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9048865, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9051266, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.905579, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9064505, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9071677, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9077833, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9085305, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9088187, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9090035, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9092066, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9095063, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9096844, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9176314, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9233756, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9247365, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9283376, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9298046, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.931121, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9320004, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9334903, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9403973, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9417586, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9428816, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9459083, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9478006, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9495983, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9501343, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9503849, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9519436, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9526582, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9542544, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9558332, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9566774, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9577074, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.960118, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9610078, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9628205, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9642594, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.966655, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.970137, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9725726, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9733794, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9757168, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9769073, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9775903, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9785085, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9798295, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9825852, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9842908, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9851184, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9869442, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9877913, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.98981, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9922557, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9944308, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9965827, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9985518, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006840.9991288, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0001698, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0016966, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.002754, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0041358, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0052593, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0066473, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0086489, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0101466, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0122554, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0131996, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0149174, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0166628, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0181646, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0197601, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0214167, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0225868, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0237286, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0252187, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0263848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.02802, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0295134, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.031061, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0327983, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0354822, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0373418, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0388436, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.039414, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.041223, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0435548, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.045783, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0475154, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0484397, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0489569, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0497518, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0506501, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0521727, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.054852, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0562208, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0579188, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0605109, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0644968, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.065707, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0680184, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0706463, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0727615, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0736313, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.07467, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0758517, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.07658, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0773728, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0781903, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0792606, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0802937, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0817058, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.082268, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0826793, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0846045, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0851946, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0855887, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.086193, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0866528, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0880103, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0900264, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0909631, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0920718, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0929925, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0941036, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.095265, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0968266, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0978737, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0985775, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.0995796, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1004071, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1016088, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1023972, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1071324, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1109369, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1121337, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1132574, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1144218, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1163785, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1180983, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1204963, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.121981, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1245313, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1253886, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1262507, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.127809, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1302264, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1312923, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1321898, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1335661, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1359334, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1366835, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1374693, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.138188, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1396363, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1405475, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1420848, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1428905, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1434329, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1455486, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1489434, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.150206, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1522079, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1532364, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1550045, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1556385, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.155959, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.156744, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1580238, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1593883, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1603959, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1608467, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1620798, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.162948, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.163613, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1642666, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1652272, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1664853, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.16697, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.167447, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1678936, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1683085, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.168715, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1699526, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.171352, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1718872, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1727383, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1734433, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1742342, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1761448, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1799345, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1816804, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1823578, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1836786, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1856549, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1864476, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1878617, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1892247, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1912527, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.193387, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1944795, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.195566, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.1960218, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2004833, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2088776, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2096298, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2099583, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2102764, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2111652, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2127762, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2137208, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2154524, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2160764, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2166865, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2188816, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.222841, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2254324, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2262957, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2280123, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2292368, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2312186, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.233261, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2349777, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.236794, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2384205, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2494473, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2549062, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2604449, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2618499, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2628555, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2633033, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.264568, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.265817, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2672312, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2677736, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2686374, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2695813, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.270057, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2705293, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2709956, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.271474, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2726078, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2730787, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2735522, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.274024, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2745013, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2749205, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.276666, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2772706, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2776425, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2780297, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2785926, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2790356, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.279534, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2799442, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.28054, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.281377, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2818637, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.282486, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2828014, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2831116, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.28352, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2844975, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2848144, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2852948, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2857685, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.286181, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2887952, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2894769, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2905517, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2912266, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.292217, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.293097, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2938972, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2942948, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2951083, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2961054, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2964957, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2968292, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2971601, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2974873, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.2993999, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3000202, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.30066, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3018024, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3027427, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3036993, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3042011, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3045564, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.304881, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3053744, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3059094, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3064992, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3074977, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3079596, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3083272, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3087888, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3094335, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3097694, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3100984, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3105307, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.310989, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.311416, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3120346, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3123903, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3127234, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.312968, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.313512, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3143723, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.315451, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3159199, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3162467, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3165946, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3171074, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3181517, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3185134, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3193302, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3199449, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.320925, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3214235, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3219664, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.324346, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3256383, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726006841.3271475, "supported_languages": null}}, "docs": {"doc.admin_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "admin_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.admin_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto xyz Models Documentation\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the xyz\n tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/) For more information on how these models are built, please see [the github repository.](https://github.com/flipsideCrypto/xyz-models/)\n\n## **How do I use these docs?**\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Tables (`xyz`.`CORE`.`<table_name>`)\n\n**Dimension Tables:**\n\n\n**Fact Tables:**\n\n\n\n**Convenience Tables:**\n\n\n\n\n## **Data Model Overview**\n\nThe xyz\n models are built a few different ways, but the core fact tables are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/xyz-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.livequery_models.__livequery_models__": {"name": "__livequery_models__", "resource_type": "doc", "package_name": "livequery_models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "unique_id": "doc.livequery_models.__livequery_models__", "block_contents": "# Welcome to the Flipside Crypto LiveQuery Models Documentation!\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the LiveQuery functions available via [Flipside Crypto](https://flipsidecrypto.xyz/). For more information on how these functions are built, please see [the github repository.](https://github.com/FlipsideCrypto/livequery-models)\n\n### **Overview of Available Functions**\n\n#### **UTILS Functions**\n\n- `livequery.utils.hex_to_int`: Use this UDF to transform any hex string to integer\n    ```\n    ex: Curve Swaps\n\n    SELECT\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        livequery.utils.hex_to_int(segmented_data [1] :: STRING) :: INTEGER AS tokens_sold\n    FROM\n        optimism.core.fact_event_logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0x8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd97140',\n            '0xd013ca23e77a65003c2c659c5442c00c805371b7fc1ebd4c206c41d1536bd90b'\n        )\n    ```\n- `livequery.utils.hex_encode_function` (coming soon)(Function VARCHAR): Use this UDF to hex encode any string\n    ```\n    ex: Decimals Function Signature\n\n    SELECT\n        `decimals` AS function_name,\n        livequery.utils.hex_encode_function(`decimals()`) :: STRING AS text_sig,\n        LEFT(text_sig,10) AS function_sig,\n        '0x313ce567' AS expected_sig\n    ```\n- `livequery.utils.evm_decode_logs` (coming soon)\n- `livequery.utils.udf_register_secret`\n\n#### **LIVE Functions & Examples**\n\n- `livequery.live.udf_api`(Method STRING, URL STRING, Headers OBJECT, Data OBJECT): Use this UDF to make a GET or POST request on any API\n    ```\n    ex: Defillama GET request -> working with the output (JSON flatten)\n\n    WITH chain_base AS (\n        SELECT\n            livequery.live.udf_api(\n                'GET','https://api.llama.fi/chains',{},{}\n            ) AS read\n    )\n\n    SELECT\n        VALUE:chainId::STRING AS chain_id,\n        VALUE:name::STRING AS chain,\n        VALUE:tokenSymbol::STRING AS token_symbol\n    FROM chain_base,\n        LATERAL FLATTEN (input=> read:data)\n\n    ex: Solana Token Metadata\n\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            'https://public-api.solscan.io/token/meta?tokenAddress=SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR',\n            { },\n            { }\n        );\n\n    ex: Running with multiple token addresses at the same time\n\n    WITH solana_addresses AS (\n        SELECT\n            'SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR' AS address\n        UNION\n        SELECT\n            '4KbzSz2VF1LCvEaw8viq1335VgWzNjMd8rwQMsCkKHip'\n    )\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            concat(\n                'https://public-api.solscan.io/token/meta?tokenAddress=',\n                address\n            ),\n            { },\n            { }\n        )\n    FROM\n        solana_addresses;\n\n    ex: Hit Quicknode (see instructions below for how to register an API Key with Flipside securely)\n\n    SELECT\n        livequery.live.udf_api(\n            'POST',\n            concat(\n                'http://sample-endpoint-name.network.quiknode.pro/',\n                '{my_key}'\n            ),\n            {},\n            { 'method' :'eth_blockNumber',\n              'params' :[],\n                'id' :1,\n                'jsonrpc' :'2.0' },\n            'quicknode'\n        );\n    ```\n\n##### **Registering and Using LiveQuery Credentials to Query Quicknode**\nWith LiveQuery you can safely store encrypted credentials, such as an API key, with Flipside, and query blockchain nodes directly via our SQL interface. Here\u2019s how:\n1. Sign up for a free [Quicknode API Account](https://www.quicknode.com/core-api)\n2. Navigate to ***Endpoints*** on the left hand side then click the ***Get Started*** tab and ***Copy*** the HTTP Provider Endpoint. Do not adjust the Setup or Security parameters.\n3. Visit [Ephit](https://science.flipsidecrypto.xyz/ephit) to obtain an Ephemeral query that will securely link your API Endpoint to Flipside's backend. This will allow you to refer to the URL securely in our application without referencing it or exposing keys directly.\n4. Fill out the form and click ***Submit this Credential***\n5. Paste the provided query into [Flipside](https://flipside.new) and query your node directly in the app with your submitted Credential (`{my_key}`).\n\n##### **API Endpoints available for use with LiveQuery:**\nPlease visit the Flipside discord or open a ticket for questions, concerns or more information.\n\n- Snapshot: [https://hub.snapshot.org/graphql](https://docs.snapshot.org/graphql-api)\n- Defillama: [https://api.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://yields.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://stablecoins.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://bridges.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://coins.llama.fi/](https://defillama.com/docs/api)\n- zkSync: [https://api.zksync.io/api/v0.2/](https://docs.zksync.io/apiv02-docs/)\n- DeepNFT Value: [https://api.deepnftvalue.com/v1](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api)\n- Zapper: [https://api.zapper.fi/v2/](https://api.zapper.fi/api/static/index.html#/Apps/AppsController_getApps)\n- Helius: [https://api.helius.xyz](https://docs.helius.xyz/introduction/why-helius)\n- Stargaze Name Service: [https://rest.stargaze-apis.com](https://github.com/public-awesome/names/blob/main/API.md)\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/external-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.livequery_models.secrets": [{"database": "ADMIN", "schema": "secrets", "name": "secrets", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/secrets.sql", "original_file_path": "models/deploy/core/secrets.sql", "unique_id": "model.livequery_models.secrets", "fqn": ["livequery_models", "deploy", "core", "secrets"], "alias": "", "checksum": {"name": "sha256", "checksum": "ec1f117cc419f648463c64fca28b91e20fff87fa5b6f982ab8d75e74a3d1b052"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["core"], "description": "", "columns": {"udf_register_secret": {"name": "udf_register_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secret": {"name": "udf_get_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secrets": {"name": "udf_get_secrets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_create_secret": {"name": "udf_create_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_delete_secret": {"name": "udf_delete_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/secrets.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "enabled": "{{ true if env_var(\"ENABLE_SNOWFLAKE_SECRETS\", \"\") else false }}", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1726006843.6176016, "config_call_dict": {}, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('live') }}\n{% set config = config_core_secrets %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49": [{"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', {\n  'blockNumber': 17767007\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1726006844.07307, "config_call_dict": {}, "relation_name": "ADMIN.test_blockpour_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "get", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__"}], "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49": [{"test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/model/run', {\n  'slug': 'price.quote',\n  'version': '1.0',\n  'chainId': 1,\n  'blockNumber': 17767016,\n  'input': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__post_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__post_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__post_status_200"], "alias": "post_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1726006844.0803292, "config_call_dict": {}, "relation_name": "ADMIN.test_blockpour_utils.post_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "post", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__"}], "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454": [{"test_metadata": {"name": "test_udf", "kwargs": {"args": null, "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "report_spam", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}, "database": "ADMIN", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__report_spam_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__report_spam_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__report_spam_status_200"], "alias": "report_spam_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1726006844.2617137, "config_call_dict": {"enabled": false}, "relation_name": "ADMIN.test_alchemy_nfts.report_spam_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "report_spam", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils"}]}, "parent_map": {"model.admin_models.github_actions__current_task_status": ["model.admin_models.github_actions__task_performance"], "model.admin_models.github_actions__task_schedule": ["model.admin_models.github_actions__tasks"], "model.admin_models.github_actions__tasks": ["source.admin_models.github_actions.workflows"], "model.admin_models.github_actions__task_performance": ["model.admin_models.github_actions__task_history", "model.admin_models.github_actions__task_schedule"], "model.admin_models.github_actions__task_history": ["model.admin_models.github_actions__tasks"], "seed.admin_models.github_actions__workflows": [], "seed.admin_models.datashare__share_suffix": [], "operation.admin_models.admin_models-on-run-start-0": ["source.admin_models.studio.active_databases", "source.admin_models.studio.active_schemas", "source.admin_models.studio.objects"], "operation.admin_models.admin_models-on-run-start-1": [], "operation.admin_models.admin_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "model.fsc_utils._datashare___create_udfs": [], "model.livequery_models.live__allow_list": ["model.livequery_models.live"], "model.livequery_models.utils": ["model.livequery_models._utils"], "model.livequery_models._live": [], "model.livequery_models.live": ["model.livequery_models._live", "model.livequery_models._utils", "model.livequery_models.utils"], "model.livequery_models._utils": [], "model.livequery_models.harmony__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.avalanche_c__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__sepolia": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.fantom__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__mainnet": ["model.livequery_models._eth__decoded_logs", "model.livequery_models._eth__logs", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.bsc__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_nova__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.avalanche_c__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.celo__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.bsc__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.gnosis__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.harmony__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.live"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.blockpour_utils__": ["model.livequery_models.live"], "model.livequery_models.transpose__": ["model.livequery_models.live"], "model.livequery_models.deepnftvalue__": ["model.livequery_models.live"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.live"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.chainbase_utils__": ["model.livequery_models.live"], "model.livequery_models.credmark_utils__": ["model.livequery_models.live"], "model.livequery_models.playgrounds__": ["model.livequery_models.live"], "model.livequery_models.opensea__": ["model.livequery_models.live"], "model.livequery_models.bitquery__": ["model.livequery_models.live"], "model.livequery_models.allday__": ["model.livequery_models.live"], "model.livequery_models.topshot__": ["model.livequery_models.live"], "model.livequery_models.covalent__": ["model.livequery_models.live"], "model.livequery_models.stakingrewards__": ["model.livequery_models.live"], "model.livequery_models.strangelove__": ["model.livequery_models.live"], "model.livequery_models.dappradar__": ["model.livequery_models.live"], "model.livequery_models.footprint_utils__footprint_utils": ["model.livequery_models.live"], "model.livequery_models.subquery__": ["model.livequery_models.live"], "model.livequery_models.snapshot__": ["model.livequery_models.live"], "model.livequery_models.nftscan__": ["model.livequery_models.live"], "model.livequery_models.cmc__": ["model.livequery_models.live"], "model.livequery_models.apilayer__": ["model.livequery_models.live"], "model.livequery_models.helius_apis__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.live"], "model.livequery_models.helius_das__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.defillama__": ["model.livequery_models.live"], "model.livequery_models.zettablock__": ["model.livequery_models.live"], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.live"], "model.livequery_models.github_actions__github_utils": ["model.livequery_models.github_utils__github_utils", "model.livequery_models.live"], "model.livequery_models.espn__": ["model.livequery_models.live"], "model.livequery_models.solscan__": ["model.livequery_models.live"], "model.livequery_models.coingecko__": ["model.livequery_models.live"], "model.livequery_models.reservoir__": ["model.livequery_models.live"], "model.livequery_models.fred__": ["model.livequery_models.live"], "model.livequery_models.zapper__": ["model.livequery_models.live"], "model.livequery_models.dapplooker__": ["model.livequery_models.live"], "model.livequery_models._evm__native_symbol_map": [], "model.livequery_models._evm__abi_map": ["source.livequery_models.crosschain.dim_evm_event_abis"], "model.livequery_models._evm__contracts_map": ["source.livequery_models.crosschain.dim_contracts"], "model.livequery_models._eth__logs": ["source.livequery_models.ethereum_core.fact_event_logs"], "model.livequery_models._eth__decoded_logs": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_crud_udfs_in_schema": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__native_symbol_map"], "analysis.livequery_models.test_functions": [], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": ["model.admin_models.github_actions__current_task_status"], "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204.be298ec717": ["model.admin_models.github_actions__current_task_status"], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": ["model.livequery_models._utils"], "test.livequery_models.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": ["model.livequery_models.utils"], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": ["model.livequery_models.live"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_transpose__get_status_200.8721d94682": ["model.livequery_models.transpose__"], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": ["model.livequery_models.deepnftvalue__"], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": ["model.livequery_models.alchemy_transfers__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": ["model.livequery_models.chainbase_utils__"], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": ["model.livequery_models.credmark_utils__"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": ["model.livequery_models.opensea__"], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": ["model.livequery_models.bitquery__"], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": ["model.livequery_models.allday__"], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": ["model.livequery_models.topshot__"], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": ["model.livequery_models.covalent__"], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": ["model.livequery_models.stakingrewards__"], "test.livequery_models.test_strangelove__get_status_200.0a58865924": ["model.livequery_models.strangelove__"], "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": ["model.livequery_models.dappradar__"], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": ["model.livequery_models.footprint_utils__footprint_utils"], "test.livequery_models.test_subquery__graphql_status_200.02580cea10": ["model.livequery_models.subquery__"], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": ["model.livequery_models.snapshot__"], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": ["model.livequery_models.nftscan__"], "test.livequery_models.test_cmc__get_status_200.bc3231cada": ["model.livequery_models.cmc__"], "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": ["model.livequery_models.apilayer__"], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_defillama__get_status_200.90864f8f89": ["model.livequery_models.defillama__"], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": ["model.livequery_models.github_utils__github_utils"], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_espn__get_status_200.b4f84cc829": ["model.livequery_models.espn__"], "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": ["model.livequery_models.solscan__"], "test.livequery_models.test_coingecko__get_status_200.047f15c956": ["model.livequery_models.coingecko__"], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": ["model.livequery_models.reservoir__"], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": ["model.livequery_models.fred__"], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": ["model.livequery_models.dapplooker__"], "source.admin_models.crosschain.dim_date_hours": [], "source.admin_models.crosschain.address_tags": [], "source.admin_models.crosschain.dim_dates": [], "source.admin_models.github_actions.workflows": [], "source.admin_models.studio.active_databases": [], "source.admin_models.studio.active_schemas": [], "source.admin_models.studio.objects": [], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": [], "source.livequery_models.crosschain.dim_evm_event_abis": [], "source.livequery_models.ethereum_core.fact_event_logs": [], "source.livequery_models.ethereum_core.ez_decoded_event_logs": []}, "child_map": {"model.admin_models.github_actions__current_task_status": ["test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f", "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204.be298ec717"], "model.admin_models.github_actions__task_schedule": ["model.admin_models.github_actions__task_performance"], "model.admin_models.github_actions__tasks": ["model.admin_models.github_actions__task_history", "model.admin_models.github_actions__task_schedule"], "model.admin_models.github_actions__task_performance": ["model.admin_models.github_actions__current_task_status"], "model.admin_models.github_actions__task_history": ["model.admin_models.github_actions__task_performance"], "seed.admin_models.github_actions__workflows": [], "seed.admin_models.datashare__share_suffix": [], "operation.admin_models.admin_models-on-run-start-0": [], "operation.admin_models.admin_models-on-run-start-1": [], "operation.admin_models.admin_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "model.fsc_utils._datashare___create_udfs": [], "model.livequery_models.live__allow_list": [], "model.livequery_models.utils": ["model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.live", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010", "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4", "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2", "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e", "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e", "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c", "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341", "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99", "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89", "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0", "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c", "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f", "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03", "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6", "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056", "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93", "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6", "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6", "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231", "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132", "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854", "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392", "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27", "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef", "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f", "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc", "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b", "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798", "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c", "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48"], "model.livequery_models._live": ["model.livequery_models.live"], "model.livequery_models.live": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils", "model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.allday__", "model.livequery_models.apilayer__", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bitquery__", "model.livequery_models.blockpour_utils__", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.chainbase_utils__", "model.livequery_models.cmc__", "model.livequery_models.coingecko__", "model.livequery_models.covalent__", "model.livequery_models.credmark_utils__", "model.livequery_models.dapplooker__", "model.livequery_models.dappradar__", "model.livequery_models.deepnftvalue__", "model.livequery_models.defillama__", "model.livequery_models.espn__", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.footprint_utils__footprint_utils", "model.livequery_models.fred__", "model.livequery_models.github_actions__github_utils", "model.livequery_models.github_utils__github_utils", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils", "model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live__allow_list", "model.livequery_models.nftscan__", "model.livequery_models.opensea__", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.playgrounds__", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "model.livequery_models.quicknode_utils__quicknode_utils", "model.livequery_models.reservoir__", "model.livequery_models.snapshot__", "model.livequery_models.solscan__", "model.livequery_models.stakingrewards__", "model.livequery_models.strangelove__", "model.livequery_models.subquery__", "model.livequery_models.topshot__", "model.livequery_models.transpose__", "model.livequery_models.zapper__", "model.livequery_models.zettablock__", "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb"], "model.livequery_models._utils": ["model.livequery_models.live", "model.livequery_models.utils", "test.livequery_models.test___utils_udf_introspect.79bd27a18b"], "model.livequery_models.harmony__mainnet": [], "model.livequery_models.arbitrum_one__mainnet": [], "model.livequery_models.base__mainnet": [], "model.livequery_models.polygon__testnet": [], "model.livequery_models.avalanche_c__mainnet": [], "model.livequery_models.ethereum__sepolia": [], "model.livequery_models.fantom__mainnet": [], "model.livequery_models.polygon_zkevm__testnet": [], "model.livequery_models.ethereum__mainnet": [], "model.livequery_models.bsc__testnet": [], "model.livequery_models.polygon__mainnet": [], "model.livequery_models.arbitrum_one__goerli": [], "model.livequery_models.arbitrum_nova__mainnet": [], "model.livequery_models.avalanche_c__testnet": [], "model.livequery_models.celo__mainnet": [], "model.livequery_models.bsc__mainnet": [], "model.livequery_models.ethereum__goerli": [], "model.livequery_models.base__goerli": [], "model.livequery_models.polygon_zkevm__mainnet": [], "model.livequery_models.optimism__goerli": [], "model.livequery_models.gnosis__mainnet": [], "model.livequery_models.optimism__mainnet": [], "model.livequery_models.harmony__testnet": [], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13"], "model.livequery_models.blockpour_utils__": [], "model.livequery_models.transpose__": ["test.livequery_models.test_transpose__get_status_200.8721d94682"], "model.livequery_models.deepnftvalue__": ["test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76"], "model.livequery_models.chainbase_utils__": ["test.livequery_models.test_chainbase_utils__get_status_200.07b6733652"], "model.livequery_models.credmark_utils__": ["test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e"], "model.livequery_models.playgrounds__": ["test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee"], "model.livequery_models.opensea__": ["test.livequery_models.test_opensea__get_status_200.5de63cfbb1"], "model.livequery_models.bitquery__": ["test.livequery_models.test_bitquery__graphql_status_200.11917beb18"], "model.livequery_models.allday__": ["test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1"], "model.livequery_models.topshot__": ["test.livequery_models.test_topshot__graphql_status_200.fb93e3b220"], "model.livequery_models.covalent__": ["test.livequery_models.test_covalent__get_status_200.bb43bb7f69"], "model.livequery_models.stakingrewards__": ["test.livequery_models.test_stakingrewards__query_status_200.144a35304b"], "model.livequery_models.strangelove__": ["test.livequery_models.test_strangelove__get_status_200.0a58865924"], "model.livequery_models.dappradar__": ["test.livequery_models.test_dappradar__get_status_200.86e3502ff3"], "model.livequery_models.footprint_utils__footprint_utils": ["test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb"], "model.livequery_models.subquery__": ["test.livequery_models.test_subquery__graphql_status_200.02580cea10"], "model.livequery_models.snapshot__": ["test.livequery_models.test_snapshot__query_status_200.35a2cffb40"], "model.livequery_models.nftscan__": ["test.livequery_models.test_nftscan__get_status_200.33868e0f0d"], "model.livequery_models.cmc__": ["test.livequery_models.test_cmc__get_status_200.bc3231cada"], "model.livequery_models.apilayer__": ["test.livequery_models.test_apilayer__get_status_200.fa02bd0f30"], "model.livequery_models.helius_apis__helius_utils": ["test.livequery_models.test_helius_apis__balances_status_200.d668884644", "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils"], "model.livequery_models.helius_das__helius_utils": ["test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616"], "model.livequery_models.defillama__": ["test.livequery_models.test_defillama__get_status_200.90864f8f89"], "model.livequery_models.zettablock__": [], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.github_actions__github_utils", "test.livequery_models.test_github_utils__octocat_status_200.3573395088"], "model.livequery_models.github_actions__github_utils": ["test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94"], "model.livequery_models.espn__": ["test.livequery_models.test_espn__get_status_200.b4f84cc829"], "model.livequery_models.solscan__": ["test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6"], "model.livequery_models.coingecko__": ["test.livequery_models.test_coingecko__get_status_200.047f15c956"], "model.livequery_models.reservoir__": ["test.livequery_models.test_reservoir__get_status_200.cb905ea233"], "model.livequery_models.fred__": ["test.livequery_models.test_fred__get_series_status_200.51822e30ca"], "model.livequery_models.zapper__": [], "model.livequery_models.dapplooker__": ["test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822"], "model.livequery_models._evm__native_symbol_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._evm__abi_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._evm__contracts_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._eth__logs": ["model.livequery_models.ethereum__mainnet"], "model.livequery_models._eth__decoded_logs": ["model.livequery_models.ethereum__mainnet"], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_crud_udfs_in_schema": [], "analysis.livequery_models.test_functions": [], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": [], "test.admin_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__204.be298ec717": [], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": [], "test.livequery_models.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": [], "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": [], "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": [], "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": [], "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": [], "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": [], "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": [], "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": [], "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": [], "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": [], "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": [], "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": [], "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": [], "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": [], "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": [], "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": [], "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": [], "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": [], "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": [], "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": [], "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": [], "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": [], "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": [], "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": [], "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": [], "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": [], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": [], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": [], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": [], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": [], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": [], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": [], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": [], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": [], "test.livequery_models.test_transpose__get_status_200.8721d94682": [], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": [], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": [], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": [], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": [], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": [], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": [], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": [], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": [], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": [], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": [], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": [], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": [], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": [], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": [], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": [], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": [], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": [], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": [], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": [], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": [], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": [], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": [], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": [], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": [], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": [], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": [], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": [], "test.livequery_models.test_strangelove__get_status_200.0a58865924": [], "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": [], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": [], "test.livequery_models.test_subquery__graphql_status_200.02580cea10": [], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": [], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": [], "test.livequery_models.test_cmc__get_status_200.bc3231cada": [], "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": [], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": [], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": [], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": [], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": [], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": [], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": [], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": [], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": [], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": [], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": [], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": [], "test.livequery_models.test_defillama__get_status_200.90864f8f89": [], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": [], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": [], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": [], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": [], "test.livequery_models.test_espn__get_status_200.b4f84cc829": [], "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": [], "test.livequery_models.test_coingecko__get_status_200.047f15c956": [], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": [], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": [], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": [], "source.admin_models.crosschain.dim_date_hours": [], "source.admin_models.crosschain.address_tags": [], "source.admin_models.crosschain.dim_dates": [], "source.admin_models.github_actions.workflows": ["model.admin_models.github_actions__tasks"], "source.admin_models.studio.active_databases": ["operation.admin_models.admin_models-on-run-start-0"], "source.admin_models.studio.active_schemas": ["operation.admin_models.admin_models-on-run-start-0"], "source.admin_models.studio.objects": ["operation.admin_models.admin_models-on-run-start-0"], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": ["model.livequery_models._evm__contracts_map"], "source.livequery_models.crosschain.dim_evm_event_abis": ["model.livequery_models._evm__abi_map"], "source.livequery_models.ethereum_core.fact_event_logs": ["model.livequery_models._eth__logs"], "source.livequery_models.ethereum_core.ez_decoded_event_logs": ["model.livequery_models._eth__decoded_logs"]}, "group_map": {}}